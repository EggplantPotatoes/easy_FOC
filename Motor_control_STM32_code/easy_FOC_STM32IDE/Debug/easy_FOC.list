
easy_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae08  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800afe0  0800afe0  0001afe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f8  0800b1f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b200  0800b200  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b200  0800b200  0001b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000010  0800b218  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800b218  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b07  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000331e  00000000  00000000  00037b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001073  00000000  00000000  0003c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002148e  00000000  00000000  0003d483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018574  00000000  00000000  0005e911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db176  00000000  00000000  00076e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ed4  00000000  00000000  00151ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00157ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800afc8 	.word	0x0800afc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800afc8 	.word	0x0800afc8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2f>:
 8000944:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800094c:	bf24      	itt	cs
 800094e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000956:	d90d      	bls.n	8000974 <__aeabi_d2f+0x30>
 8000958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800095c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800096c:	bf08      	it	eq
 800096e:	f020 0001 	biceq.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000978:	d121      	bne.n	80009be <__aeabi_d2f+0x7a>
 800097a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800097e:	bfbc      	itt	lt
 8000980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000984:	4770      	bxlt	lr
 8000986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800098a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800098e:	f1c2 0218 	rsb	r2, r2, #24
 8000992:	f1c2 0c20 	rsb	ip, r2, #32
 8000996:	fa10 f30c 	lsls.w	r3, r0, ip
 800099a:	fa20 f002 	lsr.w	r0, r0, r2
 800099e:	bf18      	it	ne
 80009a0:	f040 0001 	orrne.w	r0, r0, #1
 80009a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b0:	ea40 000c 	orr.w	r0, r0, ip
 80009b4:	fa23 f302 	lsr.w	r3, r3, r2
 80009b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009bc:	e7cc      	b.n	8000958 <__aeabi_d2f+0x14>
 80009be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009c2:	d107      	bne.n	80009d4 <__aeabi_d2f+0x90>
 80009c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c8:	bf1e      	ittt	ne
 80009ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009d2:	4770      	bxne	lr
 80009d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b970 	b.w	8000cdc <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9e08      	ldr	r6, [sp, #32]
 8000a1a:	460d      	mov	r5, r1
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	460f      	mov	r7, r1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d14a      	bne.n	8000aba <__udivmoddi4+0xa6>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4694      	mov	ip, r2
 8000a28:	d965      	bls.n	8000af6 <__udivmoddi4+0xe2>
 8000a2a:	fab2 f382 	clz	r3, r2
 8000a2e:	b143      	cbz	r3, 8000a42 <__udivmoddi4+0x2e>
 8000a30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a34:	f1c3 0220 	rsb	r2, r3, #32
 8000a38:	409f      	lsls	r7, r3
 8000a3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a3e:	4317      	orrs	r7, r2
 8000a40:	409c      	lsls	r4, r3
 8000a42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a46:	fa1f f58c 	uxth.w	r5, ip
 8000a4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a4e:	0c22      	lsrs	r2, r4, #16
 8000a50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a58:	fb01 f005 	mul.w	r0, r1, r5
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x62>
 8000a60:	eb1c 0202 	adds.w	r2, ip, r2
 8000a64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a68:	f080 811c 	bcs.w	8000ca4 <__udivmoddi4+0x290>
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	f240 8119 	bls.w	8000ca4 <__udivmoddi4+0x290>
 8000a72:	3902      	subs	r1, #2
 8000a74:	4462      	add	r2, ip
 8000a76:	1a12      	subs	r2, r2, r0
 8000a78:	b2a4      	uxth	r4, r4
 8000a7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a86:	fb00 f505 	mul.w	r5, r0, r5
 8000a8a:	42a5      	cmp	r5, r4
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x90>
 8000a8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a96:	f080 8107 	bcs.w	8000ca8 <__udivmoddi4+0x294>
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	f240 8104 	bls.w	8000ca8 <__udivmoddi4+0x294>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	2100      	movs	r1, #0
 8000aac:	b11e      	cbz	r6, 8000ab6 <__udivmoddi4+0xa2>
 8000aae:	40dc      	lsrs	r4, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0xbc>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	f000 80ed 	beq.w	8000c9e <__udivmoddi4+0x28a>
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aca:	4608      	mov	r0, r1
 8000acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad0:	fab3 f183 	clz	r1, r3
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d149      	bne.n	8000b6c <__udivmoddi4+0x158>
 8000ad8:	42ab      	cmp	r3, r5
 8000ada:	d302      	bcc.n	8000ae2 <__udivmoddi4+0xce>
 8000adc:	4282      	cmp	r2, r0
 8000ade:	f200 80f8 	bhi.w	8000cd2 <__udivmoddi4+0x2be>
 8000ae2:	1a84      	subs	r4, r0, r2
 8000ae4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ae8:	2001      	movs	r0, #1
 8000aea:	4617      	mov	r7, r2
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d0e2      	beq.n	8000ab6 <__udivmoddi4+0xa2>
 8000af0:	e9c6 4700 	strd	r4, r7, [r6]
 8000af4:	e7df      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000af6:	b902      	cbnz	r2, 8000afa <__udivmoddi4+0xe6>
 8000af8:	deff      	udf	#255	; 0xff
 8000afa:	fab2 f382 	clz	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8090 	bne.w	8000c24 <__udivmoddi4+0x210>
 8000b04:	1a8a      	subs	r2, r1, r2
 8000b06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0a:	fa1f fe8c 	uxth.w	lr, ip
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b14:	fb07 2015 	mls	r0, r7, r5, r2
 8000b18:	0c22      	lsrs	r2, r4, #16
 8000b1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b1e:	fb0e f005 	mul.w	r0, lr, r5
 8000b22:	4290      	cmp	r0, r2
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x124>
 8000b26:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x122>
 8000b30:	4290      	cmp	r0, r2
 8000b32:	f200 80cb 	bhi.w	8000ccc <__udivmoddi4+0x2b8>
 8000b36:	4645      	mov	r5, r8
 8000b38:	1a12      	subs	r2, r2, r0
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b40:	fb07 2210 	mls	r2, r7, r0, r2
 8000b44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b48:	fb0e fe00 	mul.w	lr, lr, r0
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x14e>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x14c>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f200 80bb 	bhi.w	8000cd6 <__udivmoddi4+0x2c2>
 8000b60:	4610      	mov	r0, r2
 8000b62:	eba4 040e 	sub.w	r4, r4, lr
 8000b66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b6a:	e79f      	b.n	8000aac <__udivmoddi4+0x98>
 8000b6c:	f1c1 0720 	rsb	r7, r1, #32
 8000b70:	408b      	lsls	r3, r1
 8000b72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b82:	40fd      	lsrs	r5, r7
 8000b84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b8e:	fa1f fe8c 	uxth.w	lr, ip
 8000b92:	fb09 5518 	mls	r5, r9, r8, r5
 8000b96:	0c1c      	lsrs	r4, r3, #16
 8000b98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ba0:	42a5      	cmp	r5, r4
 8000ba2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba6:	fa00 f001 	lsl.w	r0, r0, r1
 8000baa:	d90b      	bls.n	8000bc4 <__udivmoddi4+0x1b0>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb4:	f080 8088 	bcs.w	8000cc8 <__udivmoddi4+0x2b4>
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	f240 8085 	bls.w	8000cc8 <__udivmoddi4+0x2b4>
 8000bbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc2:	4464      	add	r4, ip
 8000bc4:	1b64      	subs	r4, r4, r5
 8000bc6:	b29d      	uxth	r5, r3
 8000bc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bd8:	45a6      	cmp	lr, r4
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1da>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000be4:	d26c      	bcs.n	8000cc0 <__udivmoddi4+0x2ac>
 8000be6:	45a6      	cmp	lr, r4
 8000be8:	d96a      	bls.n	8000cc0 <__udivmoddi4+0x2ac>
 8000bea:	3b02      	subs	r3, #2
 8000bec:	4464      	add	r4, ip
 8000bee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bf6:	eba4 040e 	sub.w	r4, r4, lr
 8000bfa:	42ac      	cmp	r4, r5
 8000bfc:	46c8      	mov	r8, r9
 8000bfe:	46ae      	mov	lr, r5
 8000c00:	d356      	bcc.n	8000cb0 <__udivmoddi4+0x29c>
 8000c02:	d053      	beq.n	8000cac <__udivmoddi4+0x298>
 8000c04:	b156      	cbz	r6, 8000c1c <__udivmoddi4+0x208>
 8000c06:	ebb0 0208 	subs.w	r2, r0, r8
 8000c0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c12:	40ca      	lsrs	r2, r1
 8000c14:	40cc      	lsrs	r4, r1
 8000c16:	4317      	orrs	r7, r2
 8000c18:	e9c6 7400 	strd	r7, r4, [r6]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c24:	f1c3 0120 	rsb	r1, r3, #32
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c30:	fa25 f101 	lsr.w	r1, r5, r1
 8000c34:	409d      	lsls	r5, r3
 8000c36:	432a      	orrs	r2, r5
 8000c38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c44:	fb07 1510 	mls	r5, r7, r0, r1
 8000c48:	0c11      	lsrs	r1, r2, #16
 8000c4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c52:	428d      	cmp	r5, r1
 8000c54:	fa04 f403 	lsl.w	r4, r4, r3
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x258>
 8000c5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c62:	d22f      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c64:	428d      	cmp	r5, r1
 8000c66:	d92d      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1b49      	subs	r1, r1, r5
 8000c6e:	b292      	uxth	r2, r2
 8000c70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c74:	fb07 1115 	mls	r1, r7, r5, r1
 8000c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c80:	4291      	cmp	r1, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x282>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d216      	bcs.n	8000cbc <__udivmoddi4+0x2a8>
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	d914      	bls.n	8000cbc <__udivmoddi4+0x2a8>
 8000c92:	3d02      	subs	r5, #2
 8000c94:	4462      	add	r2, ip
 8000c96:	1a52      	subs	r2, r2, r1
 8000c98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c9c:	e738      	b.n	8000b10 <__udivmoddi4+0xfc>
 8000c9e:	4631      	mov	r1, r6
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	e708      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e6e6      	b.n	8000a76 <__udivmoddi4+0x62>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	e6fb      	b.n	8000aa4 <__udivmoddi4+0x90>
 8000cac:	4548      	cmp	r0, r9
 8000cae:	d2a9      	bcs.n	8000c04 <__udivmoddi4+0x1f0>
 8000cb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	e7a3      	b.n	8000c04 <__udivmoddi4+0x1f0>
 8000cbc:	4645      	mov	r5, r8
 8000cbe:	e7ea      	b.n	8000c96 <__udivmoddi4+0x282>
 8000cc0:	462b      	mov	r3, r5
 8000cc2:	e794      	b.n	8000bee <__udivmoddi4+0x1da>
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	e7d1      	b.n	8000c6c <__udivmoddi4+0x258>
 8000cc8:	46d0      	mov	r8, sl
 8000cca:	e77b      	b.n	8000bc4 <__udivmoddi4+0x1b0>
 8000ccc:	3d02      	subs	r5, #2
 8000cce:	4462      	add	r2, ip
 8000cd0:	e732      	b.n	8000b38 <__udivmoddi4+0x124>
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e70a      	b.n	8000aec <__udivmoddi4+0xd8>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e742      	b.n	8000b62 <__udivmoddi4+0x14e>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 ff19 	bl	8001b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f82c 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 fbf6 	bl	80014dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fa10 	bl	8001114 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cf4:	f000 f88c 	bl	8000e10 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000cf8:	f000 f974 	bl	8000fe4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000cfc:	f000 fba2 	bl	8001444 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d00:	f000 fb04 	bl	800130c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //  test_PWM_ADC_init();
  //  test_uart_init();
  uart_debug_init();
 8000d04:	f008 fc08 	bl	8009518 <uart_debug_init>
  FOC_hardware_init();
 8000d08:	f008 fc32 	bl	8009570 <FOC_hardware_init>
  PWM_encoder_init();
 8000d0c:	f008 fb0e 	bl	800932c <PWM_encoder_init>
  HAL_Delay(1000);
 8000d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d14:	f000 ff72 	bl	8001bfc <HAL_Delay>
  Motor_Align(0.5);
 8000d18:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000d1c:	f009 f832 	bl	8009d84 <Motor_Align>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d20:	2120      	movs	r1, #32
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f003 fcdb 	bl	80046e0 <HAL_GPIO_TogglePin>
    //   vofa_FireWater_output_test();
    //		vofa_JustFloat_output(1.0,2.0,3.0,4.0);
    //		svpwm_test();
//    test_PWM_encoder();
	motor_open_loop_control(0.5f);
 8000d2a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000d2e:	f009 f85f 	bl	8009df0 <motor_open_loop_control>
    test++;
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <main+0x60>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a01      	ldr	r2, [pc, #4]	; (8000d40 <main+0x60>)
 8000d3a:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d3c:	e7f0      	b.n	8000d20 <main+0x40>
 8000d3e:	bf00      	nop
 8000d40:	20000228 	.word	0x20000228

08000d44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0a4      	sub	sp, #144	; 0x90
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d4e:	2238      	movs	r2, #56	; 0x38
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f009 f876 	bl	8009e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2244      	movs	r2, #68	; 0x44
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f009 f868 	bl	8009e44 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f003 fccd 	bl	8004714 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d82:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d90:	2355      	movs	r3, #85	; 0x55
 8000d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fd65 	bl	800487c <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000db8:	f000 fbfe 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 f868 	bl	8004eac <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000de2:	f000 fbe9 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
   */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC12;
 8000de6:	f248 0302 	movw	r3, #32770	; 0x8002
 8000dea:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000df0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fa73 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e04:	f000 fbd8 	bl	80015b8 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3790      	adds	r7, #144	; 0x90
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09a      	sub	sp, #104	; 0x68
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f009 f80a 	bl	8009e44 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	223c      	movs	r2, #60	; 0x3c
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 f804 	bl	8009e44 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
   */
  hadc1.Instance = ADC1;
 8000e3c:	4b65      	ldr	r3, [pc, #404]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e44:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4c:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e58:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e64:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e6a:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000e76:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e78:	2203      	movs	r2, #3
 8000e7a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e84:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e86:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e8c:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eaa:	484a      	ldr	r0, [pc, #296]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000eac:	f001 f8f4 	bl	8002098 <HAL_ADC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000eb6:	f000 fb7f 	bl	80015b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ebe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4843      	ldr	r0, [pc, #268]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000ec6:	f003 f85b 	bl	8003f80 <HAL_ADCEx_MultiModeConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000ed0:	f000 fb72 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed4:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <MX_ADC1_Init+0x1c8>)
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000edc:	2304      	movs	r3, #4
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee0:	237f      	movs	r3, #127	; 0x7f
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4838      	ldr	r0, [pc, #224]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000ef4:	f001 fc90 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000efe:	f000 fb5b 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <MX_ADC1_Init+0x1cc>)
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f06:	230c      	movs	r3, #12
 8000f08:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4830      	ldr	r0, [pc, #192]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000f12:	f001 fc81 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000f1c:	f000 fb4c 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f20:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_ADC1_Init+0x1d0>)
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f24:	2312      	movs	r3, #18
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000f30:	f001 fc72 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000f3a:	f000 fb3d 	bl	80015b8 <Error_Handler>
  }
  /** Configure Injected Channel
   */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_ADC1_Init+0x1c8>)
 8000f40:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f42:	2309      	movs	r3, #9
 8000f44:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f4a:	237f      	movs	r3, #127	; 0x7f
 8000f4c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f6c:	2384      	movs	r3, #132	; 0x84
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000f80:	f002 fb1e 	bl	80035c0 <HAL_ADCEx_InjectedConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8000f8a:	f000 fb15 	bl	80015b8 <Error_Handler>
  }
  /** Configure Injected Channel
   */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC1_Init+0x1cc>)
 8000f90:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f92:	f240 130f 	movw	r3, #271	; 0x10f
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000f9e:	f002 fb0f 	bl	80035c0 <HAL_ADCEx_InjectedConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8000fa8:	f000 fb06 	bl	80015b8 <Error_Handler>
  }
  /** Configure Injected Channel
   */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_ADC1_Init+0x1d0>)
 8000fae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000fb0:	f240 2315 	movw	r3, #533	; 0x215
 8000fb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_ADC1_Init+0x1c4>)
 8000fbc:	f002 fb00 	bl	80035c0 <HAL_ADCEx_InjectedConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
 8000fc6:	f000 faf7 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3768      	adds	r7, #104	; 0x68
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000002c 	.word	0x2000002c
 8000fd8:	08600004 	.word	0x08600004
 8000fdc:	3ac04000 	.word	0x3ac04000
 8000fe0:	04300002 	.word	0x04300002

08000fe4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b098      	sub	sp, #96	; 0x60
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fee:	2220      	movs	r2, #32
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 ff26 	bl	8009e44 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	223c      	movs	r2, #60	; 0x3c
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 ff20 	bl	8009e44 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
   */
  hadc2.Instance = ADC2;
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <MX_ADC2_Init+0x124>)
 8001006:	4a41      	ldr	r2, [pc, #260]	; (800110c <MX_ADC2_Init+0x128>)
 8001008:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <MX_ADC2_Init+0x124>)
 800100c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001010:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <MX_ADC2_Init+0x124>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_ADC2_Init+0x124>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <MX_ADC2_Init+0x124>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <MX_ADC2_Init+0x124>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <MX_ADC2_Init+0x124>)
 800102c:	2204      	movs	r2, #4
 800102e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <MX_ADC2_Init+0x124>)
 8001032:	2200      	movs	r2, #0
 8001034:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <MX_ADC2_Init+0x124>)
 8001038:	2200      	movs	r2, #0
 800103a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <MX_ADC2_Init+0x124>)
 800103e:	2201      	movs	r2, #1
 8001040:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <MX_ADC2_Init+0x124>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <MX_ADC2_Init+0x124>)
 800104c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_ADC2_Init+0x124>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_ADC2_Init+0x124>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <MX_ADC2_Init+0x124>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_ADC2_Init+0x124>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <MX_ADC2_Init+0x124>)
 8001072:	f001 f811 	bl	8002098 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC2_Init+0x9c>
  {
    Error_Handler();
 800107c:	f000 fa9c 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_ADC2_Init+0x12c>)
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2306      	movs	r3, #6
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001088:	2304      	movs	r3, #4
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108c:	237f      	movs	r3, #127	; 0x7f
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001090:	2304      	movs	r3, #4
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001098:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800109c:	4619      	mov	r1, r3
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <MX_ADC2_Init+0x124>)
 80010a0:	f001 fbba 	bl	8002818 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80010aa:	f000 fa85 	bl	80015b8 <Error_Handler>
  }
  /** Configure Injected Channel
   */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_ADC2_Init+0x12c>)
 80010b0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010b2:	2309      	movs	r3, #9
 80010b4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80010ba:	237f      	movs	r3, #127	; 0x7f
 80010bc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80010dc:	2384      	movs	r3, #132	; 0x84
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_ADC2_Init+0x124>)
 80010f0:	f002 fa66 	bl	80035c0 <HAL_ADCEx_InjectedConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 80010fa:	f000 fa5d 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 80010fe:	bf00      	nop
 8001100:	3760      	adds	r7, #96	; 0x60
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000098 	.word	0x20000098
 800110c:	50000100 	.word	0x50000100
 8001110:	10c00010 	.word	0x10c00010

08001114 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b09e      	sub	sp, #120	; 0x78
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001134:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2234      	movs	r2, #52	; 0x34
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f008 fe72 	bl	8009e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001160:	4b68      	ldr	r3, [pc, #416]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001162:	4a69      	ldr	r2, [pc, #420]	; (8001308 <MX_TIM1_Init+0x1f4>)
 8001164:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800116c:	4b65      	ldr	r3, [pc, #404]	; (8001304 <MX_TIM1_Init+0x1f0>)
 800116e:	2220      	movs	r2, #32
 8001170:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM_CLK_MHz * 1000000 / PWM_FREQUENCY / 2;
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001174:	f640 3211 	movw	r2, #2833	; 0xb11
 8001178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <MX_TIM1_Init+0x1f0>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001180:	4b60      	ldr	r3, [pc, #384]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001186:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118c:	485d      	ldr	r0, [pc, #372]	; (8001304 <MX_TIM1_Init+0x1f0>)
 800118e:	f004 fa99 	bl	80056c4 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001198:	f000 fa0e 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011a6:	4619      	mov	r1, r3
 80011a8:	4856      	ldr	r0, [pc, #344]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80011aa:	f005 f969 	bl	8006480 <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011b4:	f000 fa00 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b8:	4852      	ldr	r0, [pc, #328]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80011ba:	f004 fb3d 	bl	8005838 <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80011c4:	f000 f9f8 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80011c8:	2370      	movs	r3, #112	; 0x70
 80011ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011d8:	4619      	mov	r1, r3
 80011da:	484a      	ldr	r0, [pc, #296]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80011dc:	f006 f9ce 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011e6:	f000 f9e7 	bl	80015b8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80011ea:	2301      	movs	r3, #1
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80011f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011fa:	461a      	mov	r2, r3
 80011fc:	2102      	movs	r1, #2
 80011fe:	4841      	ldr	r0, [pc, #260]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001200:	f006 fade 	bl	80077c0 <HAL_TIMEx_ConfigBreakInput>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800120a:	f000 f9d5 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	4833      	ldr	r0, [pc, #204]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001236:	f005 f813 	bl	8006260 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001240:	f000 f9ba 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	2204      	movs	r2, #4
 800124e:	4619      	mov	r1, r3
 8001250:	482c      	ldr	r0, [pc, #176]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001252:	f005 f805 	bl	8006260 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800125c:	f000 f9ac 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001264:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4825      	ldr	r0, [pc, #148]	; (8001304 <MX_TIM1_Init+0x1f0>)
 800126e:	f004 fff7 	bl	8006260 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8001278:	f000 f99e 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	220c      	movs	r2, #12
 800128e:	4619      	mov	r1, r3
 8001290:	481c      	ldr	r0, [pc, #112]	; (8001304 <MX_TIM1_Init+0x1f0>)
 8001292:	f004 ffe5 	bl	8006260 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800129c:	f000 f98c 	bl	80015b8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80012a0:	4818      	ldr	r0, [pc, #96]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80012a2:	f006 fb5f 	bl	8007964 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 5;
 80012b8:	2305      	movs	r3, #5
 80012ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 3;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80012dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80012e8:	f006 f9ca 	bl	8007680 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x1e2>
  {
    Error_Handler();
 80012f2:	f000 f961 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM1_Init+0x1f0>)
 80012f8:	f000 fabe 	bl	8001878 <HAL_TIM_MspPostInit>
}
 80012fc:	bf00      	nop
 80012fe:	3778      	adds	r7, #120	; 0x78
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000104 	.word	0x20000104
 8001308:	40012c00 	.word	0x40012c00

0800130c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001348:	4b3c      	ldr	r3, [pc, #240]	; (800143c <MX_TIM3_Init+0x130>)
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <MX_TIM3_Init+0x134>)
 800134c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17 - 1;
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MX_TIM3_Init+0x130>)
 8001350:	2210      	movs	r2, #16
 8001352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b39      	ldr	r3, [pc, #228]	; (800143c <MX_TIM3_Init+0x130>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <MX_TIM3_Init+0x130>)
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <MX_TIM3_Init+0x130>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <MX_TIM3_Init+0x130>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136e:	4833      	ldr	r0, [pc, #204]	; (800143c <MX_TIM3_Init+0x130>)
 8001370:	f004 f9a8 	bl	80056c4 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800137a:	f000 f91d 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001388:	4619      	mov	r1, r3
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <MX_TIM3_Init+0x130>)
 800138c:	f005 f878 	bl	8006480 <HAL_TIM_ConfigClockSource>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001396:	f000 f90f 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800139a:	4828      	ldr	r0, [pc, #160]	; (800143c <MX_TIM3_Init+0x130>)
 800139c:	f004 fbae 	bl	8005afc <HAL_TIM_IC_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80013a6:	f000 f907 	bl	80015b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013aa:	2304      	movs	r3, #4
 80013ac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013ae:	2350      	movs	r3, #80	; 0x50
 80013b0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <MX_TIM3_Init+0x130>)
 80013c2:	f005 f953 	bl	800666c <HAL_TIM_SlaveConfigSynchro>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80013cc:	f000 f8f4 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <MX_TIM3_Init+0x130>)
 80013e0:	f006 f8cc 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80013ea:	f000 f8e5 	bl	80015b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_TIM3_Init+0x130>)
 8001406:	f004 fe96 	bl	8006136 <HAL_TIM_IC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001410:	f000 f8d2 	bl	80015b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001414:	2302      	movs	r3, #2
 8001416:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001418:	2302      	movs	r3, #2
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2204      	movs	r2, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_TIM3_Init+0x130>)
 8001424:	f004 fe87 	bl	8006136 <HAL_TIM_IC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 800142e:	f000 f8c3 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001432:	bf00      	nop
 8001434:	3740      	adds	r7, #64	; 0x40
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000150 	.word	0x20000150
 8001440:	40000400 	.word	0x40000400

08001444 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART2_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 800148e:	f006 fae7 	bl	8007a60 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 f88e 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 80014a0:	f007 fe63 	bl	800916a <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 f885 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 80014b2:	f007 fe98 	bl	80091e6 <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 f87c 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART2_UART_Init+0x90>)
 80014c2:	f007 fe19 	bl	80090f8 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f874 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000019c 	.word	0x2000019c
 80014d8:	40004400 	.word	0x40004400

080014dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <MX_GPIO_Init+0xd4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <MX_GPIO_Init+0xd4>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <MX_GPIO_Init+0xd4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_GPIO_Init+0xd4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2120      	movs	r1, #32
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f003 f8a9 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <MX_GPIO_Init+0xd8>)
 8001566:	f003 f8a3 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800156a:	2320      	movs	r3, #32
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f002 ff12 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_GPIO_Init+0xd8>)
 80015a2:	f002 ff03 	bl	80043ac <HAL_GPIO_Init>
}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000800 	.word	0x48000800

080015b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x48>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x48>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x48>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x48>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_MspInit+0x48>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_MspInit+0x48>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015fa:	2004      	movs	r0, #4
 80015fc:	f002 fe30 	bl	8004260 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001600:	f003 f92c 	bl	800485c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d14f      	bne.n	80016d2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_ADC_MspInit+0x140>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a45      	ldr	r2, [pc, #276]	; (8001750 <HAL_ADC_MspInit+0x140>)
 800163a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_ADC_MspInit+0x140>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d10b      	bne.n	800165c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a42      	ldr	r2, [pc, #264]	; (8001754 <HAL_ADC_MspInit+0x144>)
 800164a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_ADC_MspInit+0x144>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a3c      	ldr	r2, [pc, #240]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <HAL_ADC_MspInit+0x144>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	4a36      	ldr	r2, [pc, #216]	; (8001754 <HAL_ADC_MspInit+0x144>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = VBUS_ADC1_1_Pin|U_CURR_ADC1_2_Pin;
 800168c:	2303      	movs	r3, #3
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f002 fe83 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_CURR_ADC1_14_Pin;
 80016a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(V_CURR_ADC1_14_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4827      	ldr	r0, [pc, #156]	; (8001758 <HAL_ADC_MspInit+0x148>)
 80016bc:	f002 fe76 	bl	80043ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2101      	movs	r1, #1
 80016c4:	2012      	movs	r0, #18
 80016c6:	f002 fdd6 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016ca:	2012      	movs	r0, #18
 80016cc:	f002 fded 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016d0:	e03a      	b.n	8001748 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_ADC_MspInit+0x14c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d135      	bne.n	8001748 <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <HAL_ADC_MspInit+0x140>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_ADC_MspInit+0x140>)
 80016e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_ADC_MspInit+0x140>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10b      	bne.n	8001706 <HAL_ADC_MspInit+0xf6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_ADC_MspInit+0x144>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_ADC_MspInit+0x144>)
 80016f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_ADC_MspInit+0x144>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_ADC_MspInit+0x144>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_ADC_MspInit+0x144>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W_CURR_ADC2_4_Pin;
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_CURR_ADC2_4_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f002 fe3a 	bl	80043ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	2101      	movs	r1, #1
 800173c:	2012      	movs	r0, #18
 800173e:	f002 fd9a 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001742:	2012      	movs	r0, #18
 8001744:	f002 fdb1 	bl	80042aa <HAL_NVIC_EnableIRQ>
}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000022c 	.word	0x2000022c
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	50000100 	.word	0x50000100

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3b      	ldr	r2, [pc, #236]	; (800186c <HAL_TIM_Base_MspInit+0x10c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13a      	bne.n	80017f8 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a34      	ldr	r2, [pc, #208]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = TIM1_BRAKE_Pin;
 80017b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017bc:	2301      	movs	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80017c4:	230c      	movs	r3, #12
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_BRAKE_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f002 fdeb 	bl	80043ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2018      	movs	r0, #24
 80017dc:	f002 fd4b 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80017e0:	2018      	movs	r0, #24
 80017e2:	f002 fd62 	bl	80042aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2101      	movs	r1, #1
 80017ea:	2019      	movs	r0, #25
 80017ec:	f002 fd43 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017f0:	2019      	movs	r0, #25
 80017f2:	f002 fd5a 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f6:	e035      	b.n	8001864 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_TIM_Base_MspInit+0x114>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d130      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6593      	str	r3, [r2, #88]	; 0x58
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_TIM_Base_MspInit+0x110>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENCODER_IN_Pin;
 8001832:	2340      	movs	r3, #64	; 0x40
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001842:	2302      	movs	r3, #2
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_ENCODER_IN_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f002 fdac 	bl	80043ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2102      	movs	r1, #2
 8001858:	201d      	movs	r0, #29
 800185a:	f002 fd0c 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800185e:	201d      	movs	r0, #29
 8001860:	f002 fd23 	bl	80042aa <HAL_NVIC_EnableIRQ>
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40000400 	.word	0x40000400

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <HAL_TIM_MspPostInit+0xc4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d14b      	bne.n	8001932 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_TIM_MspPostInit+0xc8>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_H_DOWN_Pin|V_H_DOWN_Pin;
 80018ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018dc:	2306      	movs	r3, #6
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4817      	ldr	r0, [pc, #92]	; (8001944 <HAL_TIM_MspPostInit+0xcc>)
 80018e8:	f002 fd60 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_H_DOWN_Pin;
 80018ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80018fe:	2304      	movs	r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_H_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <HAL_TIM_MspPostInit+0xcc>)
 800190a:	f002 fd4f 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_H_UP_Pin|V_H_UP_Pin|W_H_UP_Pin;
 800190e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001920:	2306      	movs	r3, #6
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f002 fd3d 	bl	80043ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000
 8001944:	48000400 	.word	0x48000400

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d130      	bne.n	80019cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_UART_MspInit+0x90>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_UART_MspInit+0x90>)
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0x90>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_UART_MspInit+0x90>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0x90>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_UART_MspInit+0x90>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Debug_Tx_Pin|Debug_Rx_Pin;
 800199a:	230c      	movs	r3, #12
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019aa:	2307      	movs	r3, #7
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f002 fcf8 	bl	80043ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2103      	movs	r1, #3
 80019c0:	2026      	movs	r0, #38	; 0x26
 80019c2:	f002 fc58 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c6:	2026      	movs	r0, #38	; 0x26
 80019c8:	f002 fc6f 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f8ca 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <ADC1_2_IRQHandler+0x14>)
 8001a36:	f000 fcb7 	bl	80023a8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <ADC1_2_IRQHandler+0x18>)
 8001a3c:	f000 fcb4 	bl	80023a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000002c 	.word	0x2000002c
 8001a48:	20000098 	.word	0x20000098

08001a4c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001a52:	f004 f9f1 	bl	8005e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000104 	.word	0x20000104

08001a60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a66:	f004 f9e7 	bl	8005e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000104 	.word	0x20000104

08001a74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM3_IRQHandler+0x10>)
 8001a7a:	f004 f9dd 	bl	8005e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000150 	.word	0x20000150

08001a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <USART2_IRQHandler+0x10>)
 8001a8e:	f006 fa29 	bl	8007ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000019c 	.word	0x2000019c

08001a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <SystemInit+0x28>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <SystemInit+0x28>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SystemInit+0x28>)
 8001ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <LoopForever+0xe>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae4:	4c0b      	ldr	r4, [pc, #44]	; (8001b14 <LoopForever+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af2:	f7ff ffd3 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af6:	f008 f9ad 	bl	8009e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001afa:	f7ff f8f1 	bl	8000ce0 <main>

08001afe <LoopForever>:

LoopForever:
    b LoopForever
 8001afe:	e7fe      	b.n	8001afe <LoopForever>
  ldr   r0, =_estack
 8001b00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b0c:	0800b208 	.word	0x0800b208
  ldr r2, =_sbss
 8001b10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b14:	20000270 	.word	0x20000270

08001b18 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <COMP1_2_3_IRQHandler>

08001b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f002 fb9b 	bl	8004260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f80e 	bl	8001b4c <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e001      	b.n	8001b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3c:	f7ff fd42 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b40:	79fb      	ldrb	r3, [r7, #7]

}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_InitTick+0x68>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d022      	beq.n	8001ba6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_InitTick+0x6c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_InitTick+0x68>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fba6 	bl	80042c6 <HAL_SYSTICK_Config>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d809      	bhi.n	8001b9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b86:	2200      	movs	r2, #0
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8e:	f002 fb72 	bl	8004276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_InitTick+0x70>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e007      	b.n	8001baa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e004      	b.n	8001baa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e001      	b.n	8001baa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x20>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x1c>)
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000230 	.word	0x20000230
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000230 	.word	0x20000230

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d004      	beq.n	8001c20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_Delay+0x40>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c20:	bf00      	nop
 8001c22:	f7ff ffdf 	bl	8001be4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d8f7      	bhi.n	8001c22 <HAL_Delay+0x26>
  {
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000008 	.word	0x20000008

08001c40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3360      	adds	r3, #96	; 0x60
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <LL_ADC_SetOffset+0x44>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	03fff000 	.word	0x03fff000

08001cf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3360      	adds	r3, #96	; 0x60
 8001cfe:	461a      	mov	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3360      	adds	r3, #96	; 0x60
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3360      	adds	r3, #96	; 0x60
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	615a      	str	r2, [r3, #20]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b087      	sub	sp, #28
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3330      	adds	r3, #48	; 0x30
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	4413      	add	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	211f      	movs	r1, #31
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	f003 011f 	and.w	r1, r3, #31
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3314      	adds	r3, #20
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	0e5b      	lsrs	r3, r3, #25
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0d1b      	lsrs	r3, r3, #20
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	0d1b      	lsrs	r3, r3, #20
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0318 	and.w	r3, r3, #24
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	400b      	ands	r3, r1
 8001f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	0007ffff 	.word	0x0007ffff

08001f28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 031f 	and.w	r3, r3, #31
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6093      	str	r3, [r2, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800200c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <LL_ADC_IsEnabled+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_ADC_IsEnabled+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b04      	cmp	r3, #4
 800205c:	d101      	bne.n	8002062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b08      	cmp	r3, #8
 8002082:	d101      	bne.n	8002088 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e175      	b.n	800239e <HAL_ADC_Init+0x306>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff faa5 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff53 	bl	8001f84 <LL_ADC_IsDeepPowerDownEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff39 	bl	8001f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff6e 	bl	8001fd4 <LL_ADC_IsInternalRegulatorEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d113      	bne.n	8002126 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff52 	bl	8001fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002108:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <HAL_ADC_Init+0x2e0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	4a9b      	ldr	r2, [pc, #620]	; (800237c <HAL_ADC_Init+0x2e4>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002118:	e002      	b.n	8002120 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff52 	bl	8001fd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff77 	bl	800204a <LL_ADC_REG_IsConversionOngoing>
 800215c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8110 	bne.w	800238c <HAL_ADC_Init+0x2f4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 810c 	bne.w	800238c <HAL_ADC_Init+0x2f4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff4b 	bl	8002024 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002194:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002198:	f7ff ff44 	bl	8002024 <LL_ADC_IsEnabled>
 800219c:	4604      	mov	r4, r0
 800219e:	4878      	ldr	r0, [pc, #480]	; (8002380 <HAL_ADC_Init+0x2e8>)
 80021a0:	f7ff ff40 	bl	8002024 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4323      	orrs	r3, r4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4874      	ldr	r0, [pc, #464]	; (8002384 <HAL_ADC_Init+0x2ec>)
 80021b4:	f7ff fd44 	bl	8001c40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f5b      	ldrb	r3, [r3, #29]
 80021bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d106      	bne.n	80021f4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	045b      	lsls	r3, r3, #17
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <HAL_ADC_Init+0x2f0>)
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	430b      	orrs	r3, r1
 8002222:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff03 	bl	800204a <LL_ADC_REG_IsConversionOngoing>
 8002244:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff10 	bl	8002070 <LL_ADC_INJ_IsConversionOngoing>
 8002250:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d16d      	bne.n	8002334 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d16a      	bne.n	8002334 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002262:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800226a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800227a:	f023 0302 	bic.w	r3, r3, #2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	430b      	orrs	r3, r1
 8002286:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d017      	beq.n	80022c0 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800229e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6911      	ldr	r1, [r2, #16]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80022be:	e013      	b.n	80022e8 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d118      	bne.n	8002324 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002314:	430a      	orrs	r2, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	e007      	b.n	8002334 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10c      	bne.n	8002356 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f023 010f 	bic.w	r1, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
 8002354:	e007      	b.n	8002366 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 020f 	bic.w	r2, r2, #15
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	; 0x5c
 8002376:	e011      	b.n	800239c <HAL_ADC_Init+0x304>
 8002378:	20000000 	.word	0x20000000
 800237c:	053e2d63 	.word	0x053e2d63
 8002380:	50000100 	.word	0x50000100
 8002384:	50000300 	.word	0x50000300
 8002388:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f043 0210 	orr.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800239c:	7ffb      	ldrb	r3, [r7, #31]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	bf00      	nop

080023a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c4:	4883      	ldr	r0, [pc, #524]	; (80025d4 <HAL_ADC_IRQHandler+0x22c>)
 80023c6:	f7ff fdaf 	bl	8001f28 <LL_ADC_GetMultimode>
 80023ca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d017      	beq.n	8002406 <HAL_ADC_IRQHandler+0x5e>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f001 f8d7 	bl	80035ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_ADC_IRQHandler+0x72>
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8085 	beq.w	8002530 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d07f      	beq.n	8002530 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fcc9 	bl	8001de4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d064      	beq.n	8002522 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5e      	ldr	r2, [pc, #376]	; (80025d8 <HAL_ADC_IRQHandler+0x230>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d002      	beq.n	8002468 <HAL_ADC_IRQHandler+0xc0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e001      	b.n	800246c <HAL_ADC_IRQHandler+0xc4>
 8002468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4293      	cmp	r3, r2
 8002472:	d008      	beq.n	8002486 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d002      	beq.n	8002486 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b09      	cmp	r3, #9
 8002484:	d104      	bne.n	8002490 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	623b      	str	r3, [r7, #32]
 800248e:	e00d      	b.n	80024ac <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <HAL_ADC_IRQHandler+0x230>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d002      	beq.n	80024a0 <HAL_ADC_IRQHandler+0xf8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	e001      	b.n	80024a4 <HAL_ADC_IRQHandler+0xfc>
 80024a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d135      	bne.n	8002522 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d12e      	bne.n	8002522 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fdbe 	bl	800204a <LL_ADC_REG_IsConversionOngoing>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d11a      	bne.n	800250a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020c 	bic.w	r2, r2, #12
 80024e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d112      	bne.n	8002522 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c
 8002508:	e00b      	b.n	8002522 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	f043 0210 	orr.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f95a 	bl	80027dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	220c      	movs	r2, #12
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_ADC_IRQHandler+0x19c>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 809e 	beq.w	800268c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8098 	beq.w	800268c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fc72 	bl	8001e62 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800257e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fc2d 	bl	8001de4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800258a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_ADC_IRQHandler+0x230>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d002      	beq.n	800259c <HAL_ADC_IRQHandler+0x1f4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e001      	b.n	80025a0 <HAL_ADC_IRQHandler+0x1f8>
 800259c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d008      	beq.n	80025ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d002      	beq.n	80025ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	d104      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	e011      	b.n	80025e8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <HAL_ADC_IRQHandler+0x230>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d006      	beq.n	80025dc <HAL_ADC_IRQHandler+0x234>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e005      	b.n	80025e0 <HAL_ADC_IRQHandler+0x238>
 80025d4:	50000300 	.word	0x50000300
 80025d8:	50000100 	.word	0x50000100
 80025dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025e0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d142      	bne.n	800267e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03f      	beq.n	800267e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d13a      	bne.n	800267e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d133      	bne.n	800267e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12e      	bne.n	800267e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd23 	bl	8002070 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11a      	bne.n	8002666 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800263e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d112      	bne.n	800267e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c
 8002664:	e00b      	b.n	800267e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f006 ff08 	bl	8009494 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2260      	movs	r2, #96	; 0x60
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d011      	beq.n	80026ba <HAL_ADC_IRQHandler+0x312>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f89f 	bl	80027f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <HAL_ADC_IRQHandler+0x342>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 ff52 	bl	8003584 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d012      	beq.n	800271a <HAL_ADC_IRQHandler+0x372>
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 ff44 	bl	8003598 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d036      	beq.n	8002792 <HAL_ADC_IRQHandler+0x3ea>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d031      	beq.n	8002792 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002736:	2301      	movs	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	e014      	b.n	8002766 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002742:	4825      	ldr	r0, [pc, #148]	; (80027d8 <HAL_ADC_IRQHandler+0x430>)
 8002744:	f7ff fbfe 	bl	8001f44 <LL_ADC_GetMultiDMATransfer>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800274e:	2301      	movs	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e008      	b.n	8002766 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002762:	2301      	movs	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10e      	bne.n	800278a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	f043 0202 	orr.w	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f83d 	bl	8002804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_ADC_IRQHandler+0x426>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d013      	beq.n	80027ce <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	f043 0208 	orr.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fed1 	bl	8003570 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3728      	adds	r7, #40	; 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	50000300 	.word	0x50000300

080027dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0b6      	sub	sp, #216	; 0xd8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x22>
 8002836:	2302      	movs	r3, #2
 8002838:	e3c7      	b.n	8002fca <HAL_ADC_ConfigChannel+0x7b2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fbff 	bl	800204a <LL_ADC_REG_IsConversionOngoing>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 83ac 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	f7ff fad2 	bl	8001e0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fbed 	bl	800204a <LL_ADC_REG_IsConversionOngoing>
 8002870:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fbf9 	bl	8002070 <LL_ADC_INJ_IsConversionOngoing>
 800287e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002882:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 81d9 	bne.w	8002c3e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81d4 	bne.w	8002c3e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800289e:	d10f      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7ff faec 	bl	8001e88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fa80 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonConfig>
 80028be:	e00e      	b.n	80028de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff fadb 	bl	8001e88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fa70 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d022      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002910:	f7ff f9ca 	bl	8001ca8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6919      	ldr	r1, [r3, #16]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	461a      	mov	r2, r3
 8002922:	f7ff fa16 	bl	8001d52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	7f1b      	ldrb	r3, [r3, #28]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_ADC_ConfigChannel+0x124>
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	e000      	b.n	800293e <HAL_ADC_ConfigChannel+0x126>
 800293c:	2300      	movs	r3, #0
 800293e:	461a      	mov	r2, r3
 8002940:	f7ff fa22 	bl	8001d88 <LL_ADC_SetOffsetSaturation>
 8002944:	e17b      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f9cf 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x15a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f9c4 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	e01e      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x198>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f9b9 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e004      	b.n	80029ae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1b0>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	e018      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1e2>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80029f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f988 	bl	8001d1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f96c 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x220>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f961 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	e01e      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x25e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f956 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e004      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x276>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	e018      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x2a8>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f925 	bl	8001d1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f909 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x2e6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2102      	movs	r1, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8fe 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	e01e      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f8f3 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e004      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x33c>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	e016      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x36a>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e004      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f8c4 	bl	8001d1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2103      	movs	r1, #3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f8a8 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x3a8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f89d 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	e017      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x3d8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f892 	bl	8001cf0 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bda:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e003      	b.n	8002bee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x3f0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e011      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x414>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2103      	movs	r1, #3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f86f 	bl	8001d1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f9ee 	bl	8002024 <LL_ADC_IsEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8140 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f7ff f93f 	bl	8001ee0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a8f      	ldr	r2, [pc, #572]	; (8002ea4 <HAL_ADC_ConfigChannel+0x68c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	f040 8131 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x47e>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	bf94      	ite	ls
 8002c8e:	2301      	movls	r3, #1
 8002c90:	2300      	movhi	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e019      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4b2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e003      	b.n	8002cba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d079      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x4d2>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce8:	e015      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x4fe>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x51e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	e017      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x54e>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	ea42 0103 	orr.w	r1, r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x574>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 021f 	and.w	r2, r3, #31
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	051b      	lsls	r3, r3, #20
 8002d8a:	e018      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x5a6>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 021f 	and.w	r2, r3, #31
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	e081      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x5c6>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	069b      	lsls	r3, r3, #26
 8002dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ddc:	e015      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x5f2>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e003      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	069b      	lsls	r3, r3, #26
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x612>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0e9b      	lsrs	r3, r3, #26
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	e017      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x642>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
  return result;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	ea42 0103 	orr.w	r1, r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x66e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e84:	e01e      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x6ac>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	613b      	str	r3, [r7, #16]
  return result;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e006      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x698>
 8002ea2:	bf00      	nop
 8002ea4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 021f 	and.w	r2, r3, #31
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b1e      	subs	r3, #30
 8002ebe:	051b      	lsls	r3, r3, #20
 8002ec0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fe ffdc 	bl	8001e88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d070      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002edc:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ede:	f7fe fed5 	bl	8001c8c <LL_ADC_GetCommonPathInternalCh>
 8002ee2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3c      	ldr	r2, [pc, #240]	; (8002fdc <HAL_ADC_ConfigChannel+0x7c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x6e2>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d126      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d120      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0e:	d156      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f18:	4619      	mov	r1, r3
 8002f1a:	482f      	ldr	r0, [pc, #188]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f1c:	f7fe fea3 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f20:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099a      	lsrs	r2, r3, #6
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f46:	e03a      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <HAL_ADC_ConfigChannel+0x7d4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d113      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x762>
 8002f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02a      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f70:	4619      	mov	r1, r3
 8002f72:	4819      	ldr	r0, [pc, #100]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f74:	f7fe fe77 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f78:	e021      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11c      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d011      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fa6:	f7fe fe5e 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
 8002faa:	e008      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	37d8      	adds	r7, #216	; 0xd8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	80080000 	.word	0x80080000
 8002fd8:	50000300 	.word	0x50000300
 8002fdc:	c3210000 	.word	0xc3210000
 8002fe0:	90c00010 	.word	0x90c00010
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	c7520000 	.word	0xc7520000
 8002ff0:	50000100 	.word	0x50000100
 8002ff4:	cb840000 	.word	0xcb840000

08002ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f80d 	bl	8002024 <LL_ADC_IsEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d146      	bne.n	800309e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <ADC_Enable+0xb0>)
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e032      	b.n	80030a0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe ffdc 	bl	8001ffc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003044:	f7fe fdce 	bl	8001be4 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800304a:	e021      	b.n	8003090 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe ffe7 	bl	8002024 <LL_ADC_IsEnabled>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe ffcb 	bl	8001ffc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003066:	f7fe fdbd 	bl	8001be4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d90d      	bls.n	8003090 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d1d6      	bne.n	800304c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	8000003f 	.word	0x8000003f

080030ac <LL_ADC_SetCommonPathInternalCh>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_GetCommonPathInternalCh>:
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <LL_ADC_SetOffset>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <LL_ADC_SetOffset+0x44>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	03fff000 	.word	0x03fff000

08003138 <LL_ADC_GetOffsetChannel>:
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	461a      	mov	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_SetOffsetState>:
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3360      	adds	r3, #96	; 0x60
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_SetOffsetSign>:
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	431a      	orrs	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_SetOffsetSaturation>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_INJ_GetTrigAuto>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_SetChannelSamplingTime>:
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3314      	adds	r3, #20
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	0e5b      	lsrs	r3, r3, #25
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0d1b      	lsrs	r3, r3, #20
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2107      	movs	r1, #7
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	401a      	ands	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0d1b      	lsrs	r3, r3, #20
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <LL_ADC_SetChannelSingleDiff>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0318 	and.w	r3, r3, #24
 80032c2:	4908      	ldr	r1, [pc, #32]	; (80032e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032c4:	40d9      	lsrs	r1, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	400b      	ands	r3, r1
 80032ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	0007ffff 	.word	0x0007ffff

080032e8 <LL_ADC_GetMultimode>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 031f 	and.w	r3, r3, #31
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_IsEnabled>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <LL_ADC_IsEnabled+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_IsEnabled+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_REG_IsConversionOngoing>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d101      	bne.n	8003342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_INJ_StartConversion>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003364:	f043 0208 	orr.w	r2, r3, #8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d101      	bne.n	8003390 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a8:	4853      	ldr	r0, [pc, #332]	; (80034f8 <HAL_ADCEx_InjectedStart+0x158>)
 80033aa:	f7ff ff9d 	bl	80032e8 <LL_ADC_GetMultimode>
 80033ae:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ffdf 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	e094      	b.n	80034ee <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ce:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e07c      	b.n	80034ee <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADCEx_InjectedStart+0x62>
 80033fe:	2302      	movs	r3, #2
 8003400:	e075      	b.n	80034ee <HAL_ADCEx_InjectedStart+0x14e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fdf4 	bl	8002ff8 <ADC_Enable>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d164      	bne.n	80034e4 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f023 0208 	bic.w	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	661a      	str	r2, [r3, #96]	; 0x60
 8003432:	e002      	b.n	800343a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <HAL_ADCEx_InjectedStart+0x15c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_ADCEx_InjectedStart+0xbe>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e001      	b.n	8003462 <HAL_ADCEx_InjectedStart+0xc2>
 800345e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4293      	cmp	r3, r2
 8003468:	d002      	beq.n	8003470 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2260      	movs	r2, #96	; 0x60
 8003482:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_ADCEx_InjectedStart+0x15c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d002      	beq.n	800349c <HAL_ADCEx_InjectedStart+0xfc>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e001      	b.n	80034a0 <HAL_ADCEx_InjectedStart+0x100>
 800349c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d008      	beq.n	80034ba <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d002      	beq.n	80034ba <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b07      	cmp	r3, #7
 80034b8:	d10d      	bne.n	80034d6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff feb4 	bl	800322c <LL_ADC_INJ_GetTrigAuto>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d110      	bne.n	80034ec <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff3e 	bl	8003350 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80034d4:	e00a      	b.n	80034ec <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034e2:	e003      	b.n	80034ec <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	50000300 	.word	0x50000300
 80034fc:	50000100 	.word	0x50000100

08003500 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f240 321b 	movw	r2, #795	; 0x31b
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_ADCEx_InjectedGetValue+0x32>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 800351a:	d21c      	bcs.n	8003556 <HAL_ADCEx_InjectedGetValue+0x56>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f240 120f 	movw	r2, #271	; 0x10f
 8003522:	4293      	cmp	r3, r2
 8003524:	d011      	beq.n	800354a <HAL_ADCEx_InjectedGetValue+0x4a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f240 2215 	movw	r2, #533	; 0x215
 800352c:	4293      	cmp	r3, r2
 800352e:	d006      	beq.n	800353e <HAL_ADCEx_InjectedGetValue+0x3e>
 8003530:	e011      	b.n	8003556 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353a:	60fb      	str	r3, [r7, #12]
      break;
 800353c:	e011      	b.n	8003562 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	60fb      	str	r3, [r7, #12]
      break;
 8003548:	e00b      	b.n	8003562 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003552:	60fb      	str	r3, [r7, #12]
      break;
 8003554:	e005      	b.n	8003562 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355e:	60fb      	str	r3, [r7, #12]
      break;
 8003560:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0b6      	sub	sp, #216	; 0xd8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d102      	bne.n	80035ea <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f000 bcb4 	b.w	8003f52 <HAL_ADCEx_InjectedConfigChannel+0x992>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d130      	bne.n	8003664 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b09      	cmp	r3, #9
 8003608:	d179      	bne.n	80036fe <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	025b      	lsls	r3, r3, #9
 800361a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003626:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003632:	e007      	b.n	8003644 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	025b      	lsls	r3, r3, #9
 800363c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800364a:	4b84      	ldr	r3, [pc, #528]	; (800385c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003656:	430b      	orrs	r3, r1
 8003658:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003660:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003662:	e04c      	b.n	80036fe <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11d      	bne.n	80036a8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003690:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800369c:	e004      	b.n	80036a8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fe38 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d124      	bne.n	8003758 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003714:	2b00      	cmp	r3, #0
 8003716:	d112      	bne.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003728:	055a      	lsls	r2, r3, #21
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	e00c      	b.n	8003758 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800374e:	055a      	lsls	r2, r3, #21
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fde4 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 8003762:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fe04 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 8003770:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 822e 	bne.w	8003bda <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800377e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 8229 	bne.w	8003bda <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80037b0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037b2:	e01f      	b.n	80037f4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80037c2:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037c4:	e016      	b.n	80037f4 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d109      	bne.n	80037e4 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037e2:	e007      	b.n	80037f4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80037f2:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d110      	bne.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	430b      	orrs	r3, r1
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0202 	orr.w	r2, r2, #2
 800381c:	611a      	str	r2, [r3, #16]
 800381e:	e007      	b.n	8003830 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0202 	bic.w	r2, r2, #2
 800382e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003838:	d112      	bne.n	8003860 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	4619      	mov	r1, r3
 8003846:	f7ff fcff 	bl	8003248 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fcd7 	bl	8003206 <LL_ADC_SetSamplingTimeCommonConfig>
 8003858:	e011      	b.n	800387e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800385a:	bf00      	nop
 800385c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	461a      	mov	r2, r3
 800386e:	f7ff fceb 	bl	8003248 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fcc4 	bl	8003206 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d022      	beq.n	80038e6 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6919      	ldr	r1, [r3, #16]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b0:	f7ff fc1e 	bl	80030f0 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6919      	ldr	r1, [r3, #16]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f7ff fc6a 	bl	800319a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d102      	bne.n	80038dc <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80038d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038da:	e000      	b.n	80038de <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80038dc:	2300      	movs	r3, #0
 80038de:	461a      	mov	r2, r3
 80038e0:	f7ff fc76 	bl	80031d0 <LL_ADC_SetOffsetSaturation>
 80038e4:	e179      	b.n	8003bda <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fc23 	bl	8003138 <LL_ADC_GetOffsetChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fc18 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	0e9b      	lsrs	r3, r3, #26
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	e01e      	b.n	8003950 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fc0d 	bl	8003138 <LL_ADC_GetOffsetChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e004      	b.n	800394e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	e018      	b.n	800399a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800397c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e004      	b.n	800399a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	429a      	cmp	r2, r3
 800399c:	d106      	bne.n	80039ac <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fbdc 	bl	8003164 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fbc0 	bl	8003138 <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fbb5 	bl	8003138 <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	f003 021f 	and.w	r2, r3, #31
 80039d6:	e01e      	b.n	8003a16 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fbaa 	bl	8003138 <LL_ADC_GetOffsetChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80039f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80039fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e004      	b.n	8003a14 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	0e9b      	lsrs	r3, r3, #26
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	e018      	b.n	8003a60 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e004      	b.n	8003a60 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d106      	bne.n	8003a72 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb79 	bl	8003164 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fb5d 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fb52 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	e01e      	b.n	8003adc <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fb47 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e004      	b.n	8003ada <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0e9b      	lsrs	r3, r3, #26
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	e014      	b.n	8003b1e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e004      	b.n	8003b1e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d106      	bne.n	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fb1a 	bl	8003164 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2103      	movs	r1, #3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fafe 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff faf3 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	f003 021f 	and.w	r2, r3, #31
 8003b5a:	e017      	b.n	8003b8c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2103      	movs	r1, #3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fae8 	bl	8003138 <LL_ADC_GetOffsetChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003b7e:	2320      	movs	r3, #32
 8003b80:	e003      	b.n	8003b8a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	e011      	b.n	8003bc8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2103      	movs	r1, #3
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fac5 	bl	8003164 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fb90 	bl	8003304 <LL_ADC_IsEnabled>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8140 	bne.w	8003e6c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f7ff fb51 	bl	80032a0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a8f      	ldr	r2, [pc, #572]	; (8003e40 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	f040 8131 	bne.w	8003e6c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	0e9b      	lsrs	r3, r3, #26
 8003c20:	3301      	adds	r3, #1
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	bf94      	ite	ls
 8003c2a:	2301      	movls	r3, #1
 8003c2c:	2300      	movhi	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e019      	b.n	8003c66 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e003      	b.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d079      	beq.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x79e>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d107      	bne.n	8003c86 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	069b      	lsls	r3, r3, #26
 8003c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c84:	e015      	b.n	8003cb2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c96:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	e003      	b.n	8003caa <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	069b      	lsls	r3, r3, #26
 8003cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	e017      	b.n	8003d02 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003cea:	2320      	movs	r3, #32
 8003cec:	e003      	b.n	8003cf6 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	ea42 0103 	orr.w	r1, r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	0e9b      	lsrs	r3, r3, #26
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 021f 	and.w	r2, r3, #31
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	051b      	lsls	r3, r3, #20
 8003d26:	e018      	b.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f003 021f 	and.w	r2, r3, #31
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	051b      	lsls	r3, r3, #20
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	e081      	b.n	8003e62 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0e9b      	lsrs	r3, r3, #26
 8003d70:	3301      	adds	r3, #1
 8003d72:	069b      	lsls	r3, r3, #26
 8003d74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d78:	e015      	b.n	8003da6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e003      	b.n	8003d9e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	069b      	lsls	r3, r3, #26
 8003da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	e017      	b.n	8003df6 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	61bb      	str	r3, [r7, #24]
  return result;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e003      	b.n	8003dea <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	ea42 0103 	orr.w	r1, r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f003 021f 	and.w	r2, r3, #31
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	3b1e      	subs	r3, #30
 8003e1a:	051b      	lsls	r3, r3, #20
 8003e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e20:	e01e      	b.n	8003e60 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
  return result;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	e006      	b.n	8003e4c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8003e3e:	bf00      	nop
 8003e40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f003 021f 	and.w	r2, r3, #31
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	3b1e      	subs	r3, #30
 8003e5a:	051b      	lsls	r3, r3, #20
 8003e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e60:	430b      	orrs	r3, r1
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7ff f9ee 	bl	8003248 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d066      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e78:	4839      	ldr	r0, [pc, #228]	; (8003f60 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003e7a:	f7ff f92a 	bl	80030d2 <LL_ADC_GetCommonPathInternalCh>
 8003e7e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d126      	bne.n	8003ee4 <HAL_ADCEx_InjectedConfigChannel+0x924>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d120      	bne.n	8003ee4 <HAL_ADCEx_InjectedConfigChannel+0x924>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eaa:	d14c      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	482a      	ldr	r0, [pc, #168]	; (8003f60 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003eb8:	f7ff f8f8 	bl	80030ac <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099a      	lsrs	r2, r3, #6
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003ed4:	e002      	b.n	8003edc <HAL_ADCEx_InjectedConfigChannel+0x91c>
        {
          wait_loop_index--;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f9      	bne.n	8003ed6 <HAL_ADCEx_InjectedConfigChannel+0x916>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee2:	e030      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d113      	bne.n	8003f16 <HAL_ADCEx_InjectedConfigChannel+0x956>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_ADCEx_InjectedConfigChannel+0x956>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d020      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4814      	ldr	r0, [pc, #80]	; (8003f60 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003f10:	f7ff f8cc 	bl	80030ac <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f14:	e017      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d112      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10c      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x986>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4807      	ldr	r0, [pc, #28]	; (8003f60 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8003f42:	f7ff f8b3 	bl	80030ac <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	37d8      	adds	r7, #216	; 0xd8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	80080000 	.word	0x80080000
 8003f60:	50000300 	.word	0x50000300
 8003f64:	c3210000 	.word	0xc3210000
 8003f68:	90c00010 	.word	0x90c00010
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	053e2d63 	.word	0x053e2d63
 8003f74:	c7520000 	.word	0xc7520000
 8003f78:	50000100 	.word	0x50000100
 8003f7c:	cb840000 	.word	0xcb840000

08003f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b0a1      	sub	sp, #132	; 0x84
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e087      	b.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fae:	d102      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003fb0:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	e001      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e06a      	b.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f9a5 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff f99f 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d14c      	bne.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d149      	bne.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ff8:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003ffa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d028      	beq.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004016:	035b      	lsls	r3, r3, #13
 8004018:	430b      	orrs	r3, r1
 800401a:	431a      	orrs	r2, r3
 800401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004020:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004024:	f7ff f96e 	bl	8003304 <LL_ADC_IsEnabled>
 8004028:	4604      	mov	r4, r0
 800402a:	4823      	ldr	r0, [pc, #140]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800402c:	f7ff f96a 	bl	8003304 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	4323      	orrs	r3, r4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d133      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	6811      	ldr	r1, [r2, #0]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	6892      	ldr	r2, [r2, #8]
 800404c:	430a      	orrs	r2, r1
 800404e:	431a      	orrs	r2, r3
 8004050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004052:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004054:	e024      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004062:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004066:	f7ff f94d 	bl	8003304 <LL_ADC_IsEnabled>
 800406a:	4604      	mov	r4, r0
 800406c:	4812      	ldr	r0, [pc, #72]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800406e:	f7ff f949 	bl	8003304 <LL_ADC_IsEnabled>
 8004072:	4603      	mov	r3, r0
 8004074:	4323      	orrs	r3, r4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d112      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800407a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004082:	f023 030f 	bic.w	r3, r3, #15
 8004086:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004088:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408a:	e009      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800409e:	e000      	b.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3784      	adds	r7, #132	; 0x84
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	50000100 	.word	0x50000100
 80040bc:	50000300 	.word	0x50000300

080040c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <__NVIC_SetPriorityGrouping+0x44>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040dc:	4013      	ands	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <__NVIC_SetPriorityGrouping+0x44>)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	60d3      	str	r3, [r2, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <__NVIC_GetPriorityGrouping+0x18>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	f003 0307 	and.w	r3, r3, #7
}
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	2b00      	cmp	r3, #0
 8004134:	db0b      	blt.n	800414e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	f003 021f 	and.w	r2, r3, #31
 800413c:	4907      	ldr	r1, [pc, #28]	; (800415c <__NVIC_EnableIRQ+0x38>)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2001      	movs	r0, #1
 8004146:	fa00 f202 	lsl.w	r2, r0, r2
 800414a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000e100 	.word	0xe000e100

08004160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	6039      	str	r1, [r7, #0]
 800416a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db0a      	blt.n	800418a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	490c      	ldr	r1, [pc, #48]	; (80041ac <__NVIC_SetPriority+0x4c>)
 800417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417e:	0112      	lsls	r2, r2, #4
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	440b      	add	r3, r1
 8004184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004188:	e00a      	b.n	80041a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <__NVIC_SetPriority+0x50>)
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3b04      	subs	r3, #4
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	440b      	add	r3, r1
 800419e:	761a      	strb	r2, [r3, #24]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f1c3 0307 	rsb	r3, r3, #7
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	bf28      	it	cs
 80041d2:	2304      	movcs	r3, #4
 80041d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3304      	adds	r3, #4
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d902      	bls.n	80041e4 <NVIC_EncodePriority+0x30>
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3b03      	subs	r3, #3
 80041e2:	e000      	b.n	80041e6 <NVIC_EncodePriority+0x32>
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43da      	mvns	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	401a      	ands	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	43d9      	mvns	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800420c:	4313      	orrs	r3, r2
         );
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800422c:	d301      	bcc.n	8004232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800422e:	2301      	movs	r3, #1
 8004230:	e00f      	b.n	8004252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <SysTick_Config+0x40>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423a:	210f      	movs	r1, #15
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	f7ff ff8e 	bl	8004160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <SysTick_Config+0x40>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <SysTick_Config+0x40>)
 800424c:	2207      	movs	r2, #7
 800424e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	e000e010 	.word	0xe000e010

08004260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff29 	bl	80040c0 <__NVIC_SetPriorityGrouping>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004284:	f7ff ff40 	bl	8004108 <__NVIC_GetPriorityGrouping>
 8004288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff ff90 	bl	80041b4 <NVIC_EncodePriority>
 8004294:	4602      	mov	r2, r0
 8004296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff5f 	bl	8004160 <__NVIC_SetPriority>
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff33 	bl	8004124 <__NVIC_EnableIRQ>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffa4 	bl	800421c <SysTick_Config>
 80042d4:	4603      	mov	r3, r0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d00d      	beq.n	8004312 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2204      	movs	r2, #4
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e047      	b.n	80043a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 020e 	bic.w	r2, r2, #14
 8004320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f003 021f 	and.w	r2, r3, #31
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800435e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004380:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    }
  }
  return status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043ba:	e15a      	b.n	8004672 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 814c 	beq.w	800466c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d00b      	beq.n	80043f4 <HAL_GPIO_Init+0x48>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d007      	beq.n	80043f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043e8:	2b11      	cmp	r3, #17
 80043ea:	d003      	beq.n	80043f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b12      	cmp	r3, #18
 80043f2:	d130      	bne.n	8004456 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2203      	movs	r2, #3
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4013      	ands	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800442a:	2201      	movs	r2, #1
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f003 0201 	and.w	r2, r3, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0xea>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b12      	cmp	r3, #18
 8004494:	d123      	bne.n	80044de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	6939      	ldr	r1, [r7, #16]
 80044da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80a6 	beq.w	800466c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004520:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <HAL_GPIO_Init+0x2e4>)
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	4a5a      	ldr	r2, [pc, #360]	; (8004690 <HAL_GPIO_Init+0x2e4>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6613      	str	r3, [r2, #96]	; 0x60
 800452c:	4b58      	ldr	r3, [pc, #352]	; (8004690 <HAL_GPIO_Init+0x2e4>)
 800452e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004538:	4a56      	ldr	r2, [pc, #344]	; (8004694 <HAL_GPIO_Init+0x2e8>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	3302      	adds	r3, #2
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	220f      	movs	r2, #15
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004562:	d01f      	beq.n	80045a4 <HAL_GPIO_Init+0x1f8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a4c      	ldr	r2, [pc, #304]	; (8004698 <HAL_GPIO_Init+0x2ec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d019      	beq.n	80045a0 <HAL_GPIO_Init+0x1f4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_GPIO_Init+0x2f0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_GPIO_Init+0x1f0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_GPIO_Init+0x2f4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00d      	beq.n	8004598 <HAL_GPIO_Init+0x1ec>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a49      	ldr	r2, [pc, #292]	; (80046a4 <HAL_GPIO_Init+0x2f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <HAL_GPIO_Init+0x1e8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <HAL_GPIO_Init+0x2fc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <HAL_GPIO_Init+0x1e4>
 800458c:	2305      	movs	r3, #5
 800458e:	e00a      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 8004590:	2306      	movs	r3, #6
 8004592:	e008      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 8004594:	2304      	movs	r3, #4
 8004596:	e006      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 8004598:	2303      	movs	r3, #3
 800459a:	e004      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 800459c:	2302      	movs	r3, #2
 800459e:	e002      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_GPIO_Init+0x1fa>
 80045a4:	2300      	movs	r3, #0
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	f002 0203 	and.w	r2, r2, #3
 80045ac:	0092      	lsls	r2, r2, #2
 80045ae:	4093      	lsls	r3, r2
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b6:	4937      	ldr	r1, [pc, #220]	; (8004694 <HAL_GPIO_Init+0x2e8>)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	3302      	adds	r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045c4:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_GPIO_Init+0x300>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045e8:	4a30      	ldr	r2, [pc, #192]	; (80046ac <HAL_GPIO_Init+0x300>)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_GPIO_Init+0x300>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <HAL_GPIO_Init+0x300>)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_GPIO_Init+0x300>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_GPIO_Init+0x300>)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_GPIO_Init+0x300>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <HAL_GPIO_Init+0x300>)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3301      	adds	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f ae9d 	bne.w	80043bc <HAL_GPIO_Init+0x10>
  }
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40021000 	.word	0x40021000
 8004694:	40010000 	.word	0x40010000
 8004698:	48000400 	.word	0x48000400
 800469c:	48000800 	.word	0x48000800
 80046a0:	48000c00 	.word	0x48000c00
 80046a4:	48001000 	.word	0x48001000
 80046a8:	48001400 	.word	0x48001400
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046cc:	e002      	b.n	80046d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4013      	ands	r3, r2
 80046f8:	041a      	lsls	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43d9      	mvns	r1, r3
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	400b      	ands	r3, r1
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d141      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d131      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004730:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	4a46      	ldr	r2, [pc, #280]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004748:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004750:	4b40      	ldr	r3, [pc, #256]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2232      	movs	r2, #50	; 0x32
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004766:	e002      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800476e:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d102      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f2      	bne.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d158      	bne.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e057      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004794:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479a:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047a4:	e04d      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d141      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ae:	4b28      	ldr	r3, [pc, #160]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d131      	bne.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047cc:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2232      	movs	r2, #50	; 0x32
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f2:	e002      	b.n	80047fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d102      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f2      	bne.n	80047f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d112      	bne.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e011      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004830:	e007      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004840:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40007000 	.word	0x40007000
 8004854:	20000000 	.word	0x20000000
 8004858:	431bde83 	.word	0x431bde83

0800485c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486a:	6093      	str	r3, [r2, #8]
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40007000 	.word	0x40007000

0800487c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e306      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4b97      	ldr	r3, [pc, #604]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4b94      	ldr	r3, [pc, #592]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_OscConfig+0x3e>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4b8d      	ldr	r3, [pc, #564]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <HAL_RCC_OscConfig+0x108>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d157      	bne.n	8004984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e2e1      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x74>
 80048e2:	4b85      	ldr	r3, [pc, #532]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a84      	ldr	r2, [pc, #528]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b7f      	ldr	r3, [pc, #508]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7e      	ldr	r2, [pc, #504]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b7c      	ldr	r3, [pc, #496]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7b      	ldr	r2, [pc, #492]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 8004914:	4b78      	ldr	r3, [pc, #480]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a77      	ldr	r2, [pc, #476]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a74      	ldr	r2, [pc, #464]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd f956 	bl	8001be4 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd f952 	bl	8001be4 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2a6      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494e:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xc0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd f942 	bl	8001be4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd f93e 	bl	8001be4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e292      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004976:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0xe8>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	4b56      	ldr	r3, [pc, #344]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x136>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_OscConfig+0x13c>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d11f      	bne.n	80049f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_OscConfig+0x154>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e265      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d0:	4b49      	ldr	r3, [pc, #292]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	4946      	ldr	r1, [pc, #280]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049e4:	4b45      	ldr	r3, [pc, #276]	; (8004afc <HAL_RCC_OscConfig+0x280>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd f8af 	bl	8001b4c <HAL_InitTick>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d043      	beq.n	8004a7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e251      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a00:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd f8ea 	bl	8001be4 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fd f8e6 	bl	8001be4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e23a      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a26:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	492d      	ldr	r1, [pc, #180]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
 8004a46:	e01a      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd f8c6 	bl	8001be4 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fd f8c2 	bl	8001be4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e216      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1e0>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d041      	beq.n	8004b0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01c      	beq.n	8004acc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fd f89f 	bl	8001be4 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fd f89b 	bl	8001be4 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e1ef      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <HAL_RCC_OscConfig+0x22e>
 8004aca:	e020      	b.n	8004b0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_RCC_OscConfig+0x27c>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fd f882 	bl	8001be4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae2:	e00d      	b.n	8004b00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fd f87e 	bl	8001be4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d906      	bls.n	8004b00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1d2      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
 8004afc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b00:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1ea      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80a6 	beq.w	8004c68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b20:	4b84      	ldr	r3, [pc, #528]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2b4>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x2b6>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6593      	str	r3, [r2, #88]	; 0x58
 8004b42:	4b7c      	ldr	r3, [pc, #496]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b52:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCC_OscConfig+0x4bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x4bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x4bc>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fd f83b 	bl	8001be4 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fd f837 	bl	8001be4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e18b      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x4bc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d108      	bne.n	8004baa <HAL_RCC_OscConfig+0x32e>
 8004b98:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a65      	ldr	r2, [pc, #404]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba8:	e024      	b.n	8004bf4 <HAL_RCC_OscConfig+0x378>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d110      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x358>
 8004bb2:	4b60      	ldr	r3, [pc, #384]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc2:	4b5c      	ldr	r3, [pc, #368]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	4a5a      	ldr	r2, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd2:	e00f      	b.n	8004bf4 <HAL_RCC_OscConfig+0x378>
 8004bd4:	4b57      	ldr	r3, [pc, #348]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a56      	ldr	r2, [pc, #344]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be4:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	f023 0304 	bic.w	r3, r3, #4
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fc fff2 	bl	8001be4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fc ffee 	bl	8001be4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e140      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ed      	beq.n	8004c04 <HAL_RCC_OscConfig+0x388>
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fc ffdb 	bl	8001be4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fc ffd7 	bl	8001be4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e129      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c48:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ed      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03c      	beq.n	8004cee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fc ffaa 	bl	8001be4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c94:	f7fc ffa6 	bl	8001be4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0fa      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ef      	beq.n	8004c94 <HAL_RCC_OscConfig+0x418>
 8004cb4:	e01b      	b.n	8004cee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fc ff8d 	bl	8001be4 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cce:	f7fc ff89 	bl	8001be4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0dd      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ce0:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ef      	bne.n	8004cce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80d1 	beq.w	8004e9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	f000 808b 	beq.w	8004e1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d15e      	bne.n	8004dcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fc ff63 	bl	8001be4 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d20:	e00c      	b.n	8004d3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc ff5f 	bl	8001be4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d905      	bls.n	8004d3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0b3      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3c:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ec      	bne.n	8004d22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d48:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	4b56      	ldr	r3, [pc, #344]	; (8004ea8 <HAL_RCC_OscConfig+0x62c>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6a11      	ldr	r1, [r2, #32]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0112      	lsls	r2, r2, #4
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d62:	0212      	lsls	r2, r2, #8
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d6a:	0852      	lsrs	r2, r2, #1
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0552      	lsls	r2, r2, #21
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d76:	0852      	lsrs	r2, r2, #1
 8004d78:	3a01      	subs	r2, #1
 8004d7a:	0652      	lsls	r2, r2, #25
 8004d7c:	4311      	orrs	r1, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d82:	06d2      	lsls	r2, r2, #27
 8004d84:	430a      	orrs	r2, r1
 8004d86:	4947      	ldr	r1, [pc, #284]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8c:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a44      	ldr	r2, [pc, #272]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d98:	4b42      	ldr	r3, [pc, #264]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a41      	ldr	r2, [pc, #260]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004da2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fc ff1e 	bl	8001be4 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fc ff1a 	bl	8001be4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e06e      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x530>
 8004dca:	e066      	b.n	8004e9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b35      	ldr	r3, [pc, #212]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004de4:	4b2f      	ldr	r3, [pc, #188]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a2e      	ldr	r2, [pc, #184]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004dea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fc fef6 	bl	8001be4 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fc fef2 	bl	8001be4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e046      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e0e:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x580>
 8004e1a:	e03e      	b.n	8004e9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e039      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e28:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <HAL_RCC_OscConfig+0x628>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0203 	and.w	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d12c      	bne.n	8004e96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	3b01      	subs	r3, #1
 8004e48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d123      	bne.n	8004e96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d11b      	bne.n	8004e96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d113      	bne.n	8004e96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	085b      	lsrs	r3, r3, #1
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d109      	bne.n	8004e96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	019f800c 	.word	0x019f800c

08004eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e11e      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b91      	ldr	r3, [pc, #580]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b8e      	ldr	r3, [pc, #568]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	498c      	ldr	r1, [pc, #560]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b8a      	ldr	r3, [pc, #552]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e106      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d073      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d129      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f08:	4b81      	ldr	r3, [pc, #516]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0f4      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f18:	f000 f99e 	bl	8005258 <RCC_GetSysClockFreqFromPLLSource>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4a7c      	ldr	r2, [pc, #496]	; (8005114 <HAL_RCC_ClockConfig+0x268>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d93f      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f26:	4b7a      	ldr	r3, [pc, #488]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d033      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12f      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f46:	4b72      	ldr	r3, [pc, #456]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	4a70      	ldr	r2, [pc, #448]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e024      	b.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f64:	4b6a      	ldr	r3, [pc, #424]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0c6      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0be      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f84:	f000 f8ce 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4a61      	ldr	r2, [pc, #388]	; (8005114 <HAL_RCC_ClockConfig+0x268>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d909      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	4a5d      	ldr	r2, [pc, #372]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b5a      	ldr	r3, [pc, #360]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4957      	ldr	r1, [pc, #348]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb8:	f7fc fe14 	bl	8001be4 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fc fe10 	bl	8001be4 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e095      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b4e      	ldr	r3, [pc, #312]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800500a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005018:	4b3d      	ldr	r3, [pc, #244]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005020:	4a3b      	ldr	r2, [pc, #236]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4936      	ldr	r1, [pc, #216]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
 800503a:	e008      	b.n	800504e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d105      	bne.n	800504e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a32      	ldr	r2, [pc, #200]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d21d      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505c:	4b2b      	ldr	r3, [pc, #172]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 020f 	bic.w	r2, r3, #15
 8005064:	4929      	ldr	r1, [pc, #164]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800506c:	f7fc fdba 	bl	8001be4 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fc fdb6 	bl	8001be4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e03b      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d1ed      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4917      	ldr	r1, [pc, #92]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490f      	ldr	r1, [pc, #60]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050d6:	f000 f825 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490c      	ldr	r1, [pc, #48]	; (8005118 <HAL_RCC_ClockConfig+0x26c>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_RCC_ClockConfig+0x270>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x274>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fd26 	bl	8001b4c <HAL_InitTick>
 8005100:	4603      	mov	r3, r0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000
 8005110:	40021000 	.word	0x40021000
 8005114:	04c4b400 	.word	0x04c4b400
 8005118:	0800aff0 	.word	0x0800aff0
 800511c:	20000000 	.word	0x20000000
 8005120:	20000004 	.word	0x20000004

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800512a:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b04      	cmp	r3, #4
 8005134:	d102      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e047      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b08      	cmp	r3, #8
 8005146:	d102      	bne.n	800514e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e03e      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d136      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d10c      	bne.n	8005192 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005182:	68d2      	ldr	r2, [r2, #12]
 8005184:	0a12      	lsrs	r2, r2, #8
 8005186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	617b      	str	r3, [r7, #20]
      break;
 8005190:	e00c      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800519c:	68d2      	ldr	r2, [r2, #12]
 800519e:	0a12      	lsrs	r2, r2, #8
 80051a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
      break;
 80051aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0e5b      	lsrs	r3, r3, #25
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e001      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051cc:	693b      	ldr	r3, [r7, #16]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	016e3600 	.word	0x016e3600

080051e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000000 	.word	0x20000000

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4904      	ldr	r1, [pc, #16]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	0800b000 	.word	0x0800b000

0800522c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005230:	f7ff ffda 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0adb      	lsrs	r3, r3, #11
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800b000 	.word	0x0800b000

08005258 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d10c      	bne.n	8005296 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800527c:	4a17      	ldr	r2, [pc, #92]	; (80052dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005286:	68d2      	ldr	r2, [r2, #12]
 8005288:	0a12      	lsrs	r2, r2, #8
 800528a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	617b      	str	r3, [r7, #20]
    break;
 8005294:	e00c      	b.n	80052b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a0:	68d2      	ldr	r2, [r2, #12]
 80052a2:	0a12      	lsrs	r2, r2, #8
 80052a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]
    break;
 80052ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	0e5b      	lsrs	r3, r3, #25
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	3301      	adds	r3, #1
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052ca:	687b      	ldr	r3, [r7, #4]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40021000 	.word	0x40021000
 80052dc:	016e3600 	.word	0x016e3600
 80052e0:	00f42400 	.word	0x00f42400

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052ec:	2300      	movs	r3, #0
 80052ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f0:	2300      	movs	r3, #0
 80052f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8098 	beq.w	8005432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005306:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	4a3f      	ldr	r2, [pc, #252]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531c:	6593      	str	r3, [r2, #88]	; 0x58
 800531e:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800532a:	2301      	movs	r3, #1
 800532c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532e:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a39      	ldr	r2, [pc, #228]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800533a:	f7fc fc53 	bl	8001be4 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005340:	e009      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fc fc4f 	bl	8001be4 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d902      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	74fb      	strb	r3, [r7, #19]
        break;
 8005354:	e005      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005356:	4b30      	ldr	r3, [pc, #192]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ef      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d159      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005368:	4b2a      	ldr	r3, [pc, #168]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005372:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01e      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d019      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a0:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fc fc0f 	bl	8001be4 <HAL_GetTick>
 80053c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c8:	e00b      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc fc0b 	bl	8001be4 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d902      	bls.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	74fb      	strb	r3, [r7, #19]
            break;
 80053e0:	e006      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ec      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f6:	4b07      	ldr	r3, [pc, #28]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	74bb      	strb	r3, [r7, #18]
 8005412:	e005      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005420:	7c7b      	ldrb	r3, [r7, #17]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4ba6      	ldr	r3, [pc, #664]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	4aa5      	ldr	r2, [pc, #660]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800543e:	4ba0      	ldr	r3, [pc, #640]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f023 0203 	bic.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	499c      	ldr	r1, [pc, #624]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005460:	4b97      	ldr	r3, [pc, #604]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 020c 	bic.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	4994      	ldr	r1, [pc, #592]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005482:	4b8f      	ldr	r3, [pc, #572]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	498b      	ldr	r1, [pc, #556]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054a4:	4b86      	ldr	r3, [pc, #536]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4983      	ldr	r1, [pc, #524]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c6:	4b7e      	ldr	r3, [pc, #504]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	497a      	ldr	r1, [pc, #488]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e8:	4b75      	ldr	r3, [pc, #468]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	4972      	ldr	r1, [pc, #456]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800550a:	4b6d      	ldr	r3, [pc, #436]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4969      	ldr	r1, [pc, #420]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800552c:	4b64      	ldr	r3, [pc, #400]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	4961      	ldr	r1, [pc, #388]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800554e:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4958      	ldr	r1, [pc, #352]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	4950      	ldr	r1, [pc, #320]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d015      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055a8:	4b45      	ldr	r3, [pc, #276]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	4942      	ldr	r1, [pc, #264]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d105      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a3c      	ldr	r2, [pc, #240]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055e0:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	4934      	ldr	r1, [pc, #208]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055fe:	d105      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005600:	4b2f      	ldr	r3, [pc, #188]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a2e      	ldr	r2, [pc, #184]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005618:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	4926      	ldr	r1, [pc, #152]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005636:	d105      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005638:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005642:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	4918      	ldr	r1, [pc, #96]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	490a      	ldr	r1, [pc, #40]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a6:	d105      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000

080056c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e049      	b.n	800576a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc f838 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f001 f860 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e042      	b.n	8005812 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_TIM_Base_Start+0xac>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_TIM_Base_Start+0x5c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d013      	beq.n	80057d0 <HAL_TIM_Base_Start+0x5c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <HAL_TIM_Base_Start+0xb0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_TIM_Base_Start+0x5c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIM_Base_Start+0xb4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_TIM_Base_Start+0x5c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	; (800582c <HAL_TIM_Base_Start+0xb8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIM_Base_Start+0x5c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_Base_Start+0xbc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d115      	bne.n	80057fc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	4b17      	ldr	r3, [pc, #92]	; (8005834 <HAL_TIM_Base_Start+0xc0>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d015      	beq.n	800580e <HAL_TIM_Base_Start+0x9a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d011      	beq.n	800580e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e008      	b.n	800580e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e000      	b.n	8005810 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40013400 	.word	0x40013400
 8005830:	40014000 	.word	0x40014000
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e049      	b.n	80058de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f841 	bl	80058e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 ffa6 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x24>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e03c      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d109      	bne.n	800593a <HAL_TIM_PWM_Start+0x3e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e02f      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d109      	bne.n	8005954 <HAL_TIM_PWM_Start+0x58>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e022      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d109      	bne.n	800596e <HAL_TIM_PWM_Start+0x72>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b01      	cmp	r3, #1
 8005964:	bf14      	ite	ne
 8005966:	2301      	movne	r3, #1
 8005968:	2300      	moveq	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	e015      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b10      	cmp	r3, #16
 8005972:	d109      	bne.n	8005988 <HAL_TIM_PWM_Start+0x8c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e008      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e097      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xb6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b0:	e023      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Start+0xc6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c0:	e01b      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xd6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	e013      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xe6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059e0:	e00b      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xf6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f0:	e003      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fce0 	bl	80073c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a33      	ldr	r2, [pc, #204]	; (8005adc <HAL_TIM_PWM_Start+0x1e0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a32      	ldr	r2, [pc, #200]	; (8005ae0 <HAL_TIM_PWM_Start+0x1e4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a30      	ldr	r2, [pc, #192]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <HAL_TIM_PWM_Start+0x1f0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_Start+0x142>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_TIM_PWM_Start+0x144>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <HAL_TIM_PWM_Start+0x1e0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x194>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d013      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x194>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <HAL_TIM_PWM_Start+0x1f4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x194>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1f      	ldr	r2, [pc, #124]	; (8005af4 <HAL_TIM_PWM_Start+0x1f8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x194>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_TIM_PWM_Start+0x1e4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x194>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d115      	bne.n	8005abc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d015      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1d2>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d011      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e008      	b.n	8005ace <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e000      	b.n	8005ad0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	00010007 	.word	0x00010007

08005afc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e049      	b.n	8005ba2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f841 	bl	8005baa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f000 fe44 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_IC_Start_IT+0x1a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e023      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x62>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_IC_Start_IT+0x2a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e01b      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x62>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_IC_Start_IT+0x3a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e013      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x62>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_IC_Start_IT+0x4a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	e00b      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x62>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_IC_Start_IT+0x5a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e003      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <HAL_TIM_IC_Start_IT+0x74>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e013      	b.n	8005c5c <HAL_TIM_IC_Start_IT+0x9c>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d104      	bne.n	8005c44 <HAL_TIM_IC_Start_IT+0x84>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e00b      	b.n	8005c5c <HAL_TIM_IC_Start_IT+0x9c>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d104      	bne.n	8005c54 <HAL_TIM_IC_Start_IT+0x94>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e003      	b.n	8005c5c <HAL_TIM_IC_Start_IT+0x9c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e0d3      	b.n	8005e16 <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_IC_Start_IT+0xbe>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c7c:	e023      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0x106>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_IC_Start_IT+0xce>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8c:	e01b      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0x106>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_IC_Start_IT+0xde>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c9c:	e013      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0x106>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_IC_Start_IT+0xee>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cac:	e00b      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0x106>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_IC_Start_IT+0xfe>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cbc:	e003      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0x106>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_IC_Start_IT+0x116>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x13e>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_IC_Start_IT+0x126>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x13e>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0x136>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x13e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d841      	bhi.n	8005d88 <HAL_TIM_IC_Start_IT+0x1c8>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_TIM_IC_Start_IT+0x14c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d77 	.word	0x08005d77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0202 	orr.w	r2, r2, #2
 8005d4e:	60da      	str	r2, [r3, #12]
      break;
 8005d50:	e01b      	b.n	8005d8a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0204 	orr.w	r2, r2, #4
 8005d60:	60da      	str	r2, [r3, #12]
      break;
 8005d62:	e012      	b.n	8005d8a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	60da      	str	r2, [r3, #12]
      break;
 8005d74:	e009      	b.n	8005d8a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0210 	orr.w	r2, r2, #16
 8005d84:	60da      	str	r2, [r3, #12]
      break;
 8005d86:	e000      	b.n	8005d8a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005d88:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fb18 	bl	80073c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <HAL_TIM_IC_Start_IT+0x260>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_IC_Start_IT+0x214>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_IC_Start_IT+0x214>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <HAL_TIM_IC_Start_IT+0x264>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_IC_Start_IT+0x214>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_TIM_IC_Start_IT+0x268>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_IC_Start_IT+0x214>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_TIM_IC_Start_IT+0x26c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_IC_Start_IT+0x214>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <HAL_TIM_IC_Start_IT+0x270>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d115      	bne.n	8005e00 <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <HAL_TIM_IC_Start_IT+0x274>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d015      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x252>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dec:	d011      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	00010007 	.word	0x00010007

08005e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d122      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d11b      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0202 	mvn.w	r2, #2
 8005e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f003 fa64 	bl	8009348 <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fc82 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fc89 	bl	80067a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d122      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d11b      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0204 	mvn.w	r2, #4
 8005eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f003 fa3a 	bl	8009348 <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fc58 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fc5f 	bl	80067a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d122      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d11b      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0208 	mvn.w	r2, #8
 8005f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2204      	movs	r2, #4
 8005f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f003 fa10 	bl	8009348 <HAL_TIM_IC_CaptureCallback>
 8005f28:	e005      	b.n	8005f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc2e 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fc35 	bl	80067a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d122      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d11b      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0210 	mvn.w	r2, #16
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2208      	movs	r2, #8
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f003 f9e6 	bl	8009348 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fc04 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fc0b 	bl	80067a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10e      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0201 	mvn.w	r2, #1
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fbde 	bl	8006778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fcdb 	bl	800799e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	d10e      	bne.n	8006016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d107      	bne.n	8006016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fcce 	bl	80079b2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d10e      	bne.n	8006042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d107      	bne.n	8006042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800603a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fbb9 	bl	80067b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b20      	cmp	r3, #32
 800604e:	d10e      	bne.n	800606e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b20      	cmp	r3, #32
 800605c:	d107      	bne.n	800606e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f06f 0220 	mvn.w	r2, #32
 8006066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fc8e 	bl	800798a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607c:	d10f      	bne.n	800609e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608c:	d107      	bne.n	800609e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fc94 	bl	80079c6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ac:	d10f      	bne.n	80060ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 fc86 	bl	80079da <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060dc:	d10f      	bne.n	80060fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ec:	d107      	bne.n	80060fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 fc78 	bl	80079ee <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800610c:	d10f      	bne.n	800612e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800611c:	d107      	bne.n	800612e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fc6a 	bl	8007a02 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIM_IC_ConfigChannel+0x1a>
 800614c:	2302      	movs	r3, #2
 800614e:	e082      	b.n	8006256 <HAL_TIM_IC_ConfigChannel+0x120>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11b      	bne.n	8006196 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f000 ff71 	bl	8007054 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 020c 	bic.w	r2, r2, #12
 8006180:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6999      	ldr	r1, [r3, #24]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	619a      	str	r2, [r3, #24]
 8006194:	e05a      	b.n	800624c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d11c      	bne.n	80061d6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 ffe9 	bl	8007182 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
 80061d4:	e03a      	b.n	800624c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d11b      	bne.n	8006214 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f001 f836 	bl	800725c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 020c 	bic.w	r2, r2, #12
 80061fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69d9      	ldr	r1, [r3, #28]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	61da      	str	r2, [r3, #28]
 8006212:	e01b      	b.n	800624c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f001 f856 	bl	80072d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006236:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69d9      	ldr	r1, [r3, #28]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006276:	2302      	movs	r3, #2
 8006278:	e0fd      	b.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x216>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b14      	cmp	r3, #20
 8006286:	f200 80f0 	bhi.w	800646a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062e5 	.word	0x080062e5
 8006294:	0800646b 	.word	0x0800646b
 8006298:	0800646b 	.word	0x0800646b
 800629c:	0800646b 	.word	0x0800646b
 80062a0:	08006325 	.word	0x08006325
 80062a4:	0800646b 	.word	0x0800646b
 80062a8:	0800646b 	.word	0x0800646b
 80062ac:	0800646b 	.word	0x0800646b
 80062b0:	08006367 	.word	0x08006367
 80062b4:	0800646b 	.word	0x0800646b
 80062b8:	0800646b 	.word	0x0800646b
 80062bc:	0800646b 	.word	0x0800646b
 80062c0:	080063a7 	.word	0x080063a7
 80062c4:	0800646b 	.word	0x0800646b
 80062c8:	0800646b 	.word	0x0800646b
 80062cc:	0800646b 	.word	0x0800646b
 80062d0:	080063e9 	.word	0x080063e9
 80062d4:	0800646b 	.word	0x0800646b
 80062d8:	0800646b 	.word	0x0800646b
 80062dc:	0800646b 	.word	0x0800646b
 80062e0:	08006429 	.word	0x08006429
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fafc 	bl	80068e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0208 	orr.w	r2, r2, #8
 80062fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6999      	ldr	r1, [r3, #24]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	619a      	str	r2, [r3, #24]
      break;
 8006322:	e0a3      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb6c 	bl	8006a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6999      	ldr	r1, [r3, #24]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	021a      	lsls	r2, r3, #8
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	619a      	str	r2, [r3, #24]
      break;
 8006364:	e082      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fbd5 	bl	8006b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0208 	orr.w	r2, r2, #8
 8006380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0204 	bic.w	r2, r2, #4
 8006390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69d9      	ldr	r1, [r3, #28]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	61da      	str	r2, [r3, #28]
      break;
 80063a4:	e062      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fc3d 	bl	8006c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69d9      	ldr	r1, [r3, #28]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	021a      	lsls	r2, r3, #8
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	61da      	str	r2, [r3, #28]
      break;
 80063e6:	e041      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fca6 	bl	8006d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0208 	orr.w	r2, r2, #8
 8006402:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006426:	e021      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fcea 	bl	8006e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006442:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006452:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	021a      	lsls	r2, r3, #8
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006468:	e000      	b.n	800646c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800646a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop

08006480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIM_ConfigClockSource+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e0dd      	b.n	8006654 <HAL_TIM_ConfigClockSource+0x1d4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80064b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a62      	ldr	r2, [pc, #392]	; (800665c <HAL_TIM_ConfigClockSource+0x1dc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	f000 80a9 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 80064d8:	4a60      	ldr	r2, [pc, #384]	; (800665c <HAL_TIM_ConfigClockSource+0x1dc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	f200 80ae 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 80064e0:	4a5f      	ldr	r2, [pc, #380]	; (8006660 <HAL_TIM_ConfigClockSource+0x1e0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	f000 80a1 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 80064e8:	4a5d      	ldr	r2, [pc, #372]	; (8006660 <HAL_TIM_ConfigClockSource+0x1e0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	f200 80a6 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 80064f0:	4a5c      	ldr	r2, [pc, #368]	; (8006664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	f000 8099 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 80064f8:	4a5a      	ldr	r2, [pc, #360]	; (8006664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	f200 809e 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006500:	4a59      	ldr	r2, [pc, #356]	; (8006668 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	f000 8091 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 8006508:	4a57      	ldr	r2, [pc, #348]	; (8006668 <HAL_TIM_ConfigClockSource+0x1e8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f200 8096 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006510:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006514:	f000 8089 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 8006518:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800651c:	f200 808e 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006524:	d03e      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0x124>
 8006526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652a:	f200 8087 	bhi.w	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	f000 8085 	beq.w	8006640 <HAL_TIM_ConfigClockSource+0x1c0>
 8006536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653a:	d87f      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 800653c:	2b70      	cmp	r3, #112	; 0x70
 800653e:	d01a      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0xf6>
 8006540:	2b70      	cmp	r3, #112	; 0x70
 8006542:	d87b      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006544:	2b60      	cmp	r3, #96	; 0x60
 8006546:	d050      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x16a>
 8006548:	2b60      	cmp	r3, #96	; 0x60
 800654a:	d877      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 800654c:	2b50      	cmp	r3, #80	; 0x50
 800654e:	d03c      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x14a>
 8006550:	2b50      	cmp	r3, #80	; 0x50
 8006552:	d873      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d058      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x18a>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d86f      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d064      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 8006560:	2b30      	cmp	r3, #48	; 0x30
 8006562:	d86b      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 8006564:	2b20      	cmp	r3, #32
 8006566:	d060      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 8006568:	2b20      	cmp	r3, #32
 800656a:	d867      	bhi.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d05c      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x1aa>
 8006570:	2b10      	cmp	r3, #16
 8006572:	d05a      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006574:	e062      	b.n	800663c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6899      	ldr	r1, [r3, #8]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f000 feff 	bl	8007388 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006598:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	609a      	str	r2, [r3, #8]
      break;
 80065a2:	e04e      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	6899      	ldr	r1, [r3, #8]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f000 fee8 	bl	8007388 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065c6:	609a      	str	r2, [r3, #8]
      break;
 80065c8:	e03b      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f000 fda4 	bl	8007124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2150      	movs	r1, #80	; 0x50
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 feb3 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 80065e8:	e02b      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6859      	ldr	r1, [r3, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 fe00 	bl	80071fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2160      	movs	r1, #96	; 0x60
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fea3 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006608:	e01b      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6859      	ldr	r1, [r3, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	461a      	mov	r2, r3
 8006618:	f000 fd84 	bl	8007124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fe93 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8006628:	e00b      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f000 fe8a 	bl	800734e <TIM_ITRx_SetConfig>
        break;
 800663a:	e002      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8006640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	00100070 	.word	0x00100070
 8006660:	00100040 	.word	0x00100040
 8006664:	00100030 	.word	0x00100030
 8006668:	00100020 	.word	0x00100020

0800666c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e031      	b.n	80066e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fc1c 	bl	8006ed4 <TIM_SlaveTimer_SetConfig>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e018      	b.n	80066e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b0c      	cmp	r3, #12
 8006702:	d831      	bhi.n	8006768 <HAL_TIM_ReadCapturedValue+0x78>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006741 	.word	0x08006741
 8006710:	08006769 	.word	0x08006769
 8006714:	08006769 	.word	0x08006769
 8006718:	08006769 	.word	0x08006769
 800671c:	0800674b 	.word	0x0800674b
 8006720:	08006769 	.word	0x08006769
 8006724:	08006769 	.word	0x08006769
 8006728:	08006769 	.word	0x08006769
 800672c:	08006755 	.word	0x08006755
 8006730:	08006769 	.word	0x08006769
 8006734:	08006769 	.word	0x08006769
 8006738:	08006769 	.word	0x08006769
 800673c:	0800675f 	.word	0x0800675f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	60fb      	str	r3, [r7, #12]

      break;
 8006748:	e00f      	b.n	800676a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	60fb      	str	r3, [r7, #12]

      break;
 8006752:	e00a      	b.n	800676a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	60fb      	str	r3, [r7, #12]

      break;
 800675c:	e005      	b.n	800676a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	60fb      	str	r3, [r7, #12]

      break;
 8006766:	e000      	b.n	800676a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006768:	bf00      	nop
  }

  return tmpreg;
 800676a:	68fb      	ldr	r3, [r7, #12]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <TIM_Base_SetConfig+0x104>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a39      	ldr	r2, [pc, #228]	; (80068d0 <TIM_Base_SetConfig+0x108>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <TIM_Base_SetConfig+0x10c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2d      	ldr	r2, [pc, #180]	; (80068cc <TIM_Base_SetConfig+0x104>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <TIM_Base_SetConfig+0x108>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <TIM_Base_SetConfig+0x10c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a28      	ldr	r2, [pc, #160]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a27      	ldr	r2, [pc, #156]	; (80068dc <TIM_Base_SetConfig+0x114>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <TIM_Base_SetConfig+0x104>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0xe8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0xe8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a10      	ldr	r2, [pc, #64]	; (80068dc <TIM_Base_SetConfig+0x114>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0xe8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xe8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0e      	ldr	r2, [pc, #56]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40013400 	.word	0x40013400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800

080068e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0302 	bic.w	r3, r3, #2
 8006934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <TIM_OC1_SetConfig+0x10c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00f      	beq.n	8006968 <TIM_OC1_SetConfig+0x80>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <TIM_OC1_SetConfig+0x110>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00b      	beq.n	8006968 <TIM_OC1_SetConfig+0x80>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <TIM_OC1_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <TIM_OC1_SetConfig+0x80>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a29      	ldr	r2, [pc, #164]	; (8006a00 <TIM_OC1_SetConfig+0x118>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_OC1_SetConfig+0x80>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <TIM_OC1_SetConfig+0x11c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10c      	bne.n	8006982 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0308 	bic.w	r3, r3, #8
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f023 0304 	bic.w	r3, r3, #4
 8006980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <TIM_OC1_SetConfig+0x10c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00f      	beq.n	80069aa <TIM_OC1_SetConfig+0xc2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <TIM_OC1_SetConfig+0x110>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00b      	beq.n	80069aa <TIM_OC1_SetConfig+0xc2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <TIM_OC1_SetConfig+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d007      	beq.n	80069aa <TIM_OC1_SetConfig+0xc2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <TIM_OC1_SetConfig+0x118>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_OC1_SetConfig+0xc2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <TIM_OC1_SetConfig+0x11c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d111      	bne.n	80069ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40013400 	.word	0x40013400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800

08006a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f023 0210 	bic.w	r2, r3, #16
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a28      	ldr	r2, [pc, #160]	; (8006b08 <TIM_OC2_SetConfig+0x100>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC2_SetConfig+0x6c>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a27      	ldr	r2, [pc, #156]	; (8006b0c <TIM_OC2_SetConfig+0x104>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10d      	bne.n	8006a90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <TIM_OC2_SetConfig+0x100>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_OC2_SetConfig+0xb0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1c      	ldr	r2, [pc, #112]	; (8006b0c <TIM_OC2_SetConfig+0x104>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_OC2_SetConfig+0xb0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <TIM_OC2_SetConfig+0x108>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_OC2_SetConfig+0xb0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a1a      	ldr	r2, [pc, #104]	; (8006b14 <TIM_OC2_SetConfig+0x10c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC2_SetConfig+0xb0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <TIM_OC2_SetConfig+0x110>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d113      	bne.n	8006ae0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40013400 	.word	0x40013400
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800

08006b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a27      	ldr	r2, [pc, #156]	; (8006c18 <TIM_OC3_SetConfig+0xfc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_OC3_SetConfig+0x6a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <TIM_OC3_SetConfig+0x100>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10d      	bne.n	8006ba2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <TIM_OC3_SetConfig+0xfc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_OC3_SetConfig+0xae>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <TIM_OC3_SetConfig+0x100>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_OC3_SetConfig+0xae>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1a      	ldr	r2, [pc, #104]	; (8006c20 <TIM_OC3_SetConfig+0x104>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_OC3_SetConfig+0xae>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <TIM_OC3_SetConfig+0x108>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC3_SetConfig+0xae>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <TIM_OC3_SetConfig+0x10c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d113      	bne.n	8006bf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	031b      	lsls	r3, r3, #12
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <TIM_OC4_SetConfig+0x100>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC4_SetConfig+0x6c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <TIM_OC4_SetConfig+0x104>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d10d      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <TIM_OC4_SetConfig+0x100>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00f      	beq.n	8006cdc <TIM_OC4_SetConfig+0xb0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <TIM_OC4_SetConfig+0x104>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <TIM_OC4_SetConfig+0xb0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <TIM_OC4_SetConfig+0x108>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d007      	beq.n	8006cdc <TIM_OC4_SetConfig+0xb0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <TIM_OC4_SetConfig+0x10c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC4_SetConfig+0xb0>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <TIM_OC4_SetConfig+0x110>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	019b      	lsls	r3, r3, #6
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40014400 	.word	0x40014400
 8006d3c:	40014800 	.word	0x40014800

08006d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <TIM_OC5_SetConfig+0xb4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00f      	beq.n	8006dba <TIM_OC5_SetConfig+0x7a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a16      	ldr	r2, [pc, #88]	; (8006df8 <TIM_OC5_SetConfig+0xb8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00b      	beq.n	8006dba <TIM_OC5_SetConfig+0x7a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <TIM_OC5_SetConfig+0xbc>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d007      	beq.n	8006dba <TIM_OC5_SetConfig+0x7a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a14      	ldr	r2, [pc, #80]	; (8006e00 <TIM_OC5_SetConfig+0xc0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_OC5_SetConfig+0x7a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <TIM_OC5_SetConfig+0xc4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d109      	bne.n	8006dce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40013400 	.word	0x40013400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <TIM_OC6_SetConfig+0xb8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_OC6_SetConfig+0x7c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_OC6_SetConfig+0xbc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_OC6_SetConfig+0x7c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <TIM_OC6_SetConfig+0xc0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_OC6_SetConfig+0x7c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <TIM_OC6_SetConfig+0xc4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC6_SetConfig+0x7c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <TIM_OC6_SetConfig+0xc8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d109      	bne.n	8006e98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	029b      	lsls	r3, r3, #10
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40013400 	.word	0x40013400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4a49      	ldr	r2, [pc, #292]	; (8007044 <TIM_SlaveTimer_SetConfig+0x170>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	f000 8086 	beq.w	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f26:	4a47      	ldr	r2, [pc, #284]	; (8007044 <TIM_SlaveTimer_SetConfig+0x170>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	f200 8084 	bhi.w	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f2e:	4a46      	ldr	r2, [pc, #280]	; (8007048 <TIM_SlaveTimer_SetConfig+0x174>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d07e      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f34:	4a44      	ldr	r2, [pc, #272]	; (8007048 <TIM_SlaveTimer_SetConfig+0x174>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d87d      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f3a:	4a44      	ldr	r2, [pc, #272]	; (800704c <TIM_SlaveTimer_SetConfig+0x178>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d078      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f40:	4a42      	ldr	r2, [pc, #264]	; (800704c <TIM_SlaveTimer_SetConfig+0x178>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d877      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f46:	4a42      	ldr	r2, [pc, #264]	; (8007050 <TIM_SlaveTimer_SetConfig+0x17c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d072      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f4c:	4a40      	ldr	r2, [pc, #256]	; (8007050 <TIM_SlaveTimer_SetConfig+0x17c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d871      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f56:	d06c      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f5c:	d86b      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f5e:	2b70      	cmp	r3, #112	; 0x70
 8006f60:	d01a      	beq.n	8006f98 <TIM_SlaveTimer_SetConfig+0xc4>
 8006f62:	2b70      	cmp	r3, #112	; 0x70
 8006f64:	d867      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f66:	2b60      	cmp	r3, #96	; 0x60
 8006f68:	d059      	beq.n	800701e <TIM_SlaveTimer_SetConfig+0x14a>
 8006f6a:	2b60      	cmp	r3, #96	; 0x60
 8006f6c:	d863      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f6e:	2b50      	cmp	r3, #80	; 0x50
 8006f70:	d04b      	beq.n	800700a <TIM_SlaveTimer_SetConfig+0x136>
 8006f72:	2b50      	cmp	r3, #80	; 0x50
 8006f74:	d85f      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d019      	beq.n	8006fae <TIM_SlaveTimer_SetConfig+0xda>
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d85b      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f7e:	2b30      	cmp	r3, #48	; 0x30
 8006f80:	d057      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f82:	2b30      	cmp	r3, #48	; 0x30
 8006f84:	d857      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d053      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d853      	bhi.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04f      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d04d      	beq.n	8007032 <TIM_SlaveTimer_SetConfig+0x15e>
        assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
        break;
      }

    default:
      break;
 8006f96:	e04e      	b.n	8007036 <TIM_SlaveTimer_SetConfig+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68d9      	ldr	r1, [r3, #12]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f000 f9ee 	bl	8007388 <TIM_ETR_SetConfig>
      break;
 8006fac:	e044      	b.n	8007038 <TIM_SlaveTimer_SetConfig+0x164>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d004      	beq.n	8006fc0 <TIM_SlaveTimer_SetConfig+0xec>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006fbe:	d101      	bne.n	8006fc4 <TIM_SlaveTimer_SetConfig+0xf0>
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e03a      	b.n	800703a <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6a1a      	ldr	r2, [r3, #32]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fea:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	621a      	str	r2, [r3, #32]
      break;
 8007008:	e016      	b.n	8007038 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6899      	ldr	r1, [r3, #8]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	461a      	mov	r2, r3
 8007018:	f000 f884 	bl	8007124 <TIM_TI1_ConfigInputStage>
      break;
 800701c:	e00c      	b.n	8007038 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6899      	ldr	r1, [r3, #8]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 f8e6 	bl	80071fc <TIM_TI2_ConfigInputStage>
      break;
 8007030:	e002      	b.n	8007038 <TIM_SlaveTimer_SetConfig+0x164>
        break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8007036:	bf00      	nop
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	00100070 	.word	0x00100070
 8007048:	00100040 	.word	0x00100040
 800704c:	00100030 	.word	0x00100030
 8007050:	00100020 	.word	0x00100020

08007054 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a24      	ldr	r2, [pc, #144]	; (8007110 <TIM_TI1_SetConfig+0xbc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <TIM_TI1_SetConfig+0x56>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007088:	d00f      	beq.n	80070aa <TIM_TI1_SetConfig+0x56>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4a21      	ldr	r2, [pc, #132]	; (8007114 <TIM_TI1_SetConfig+0xc0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_TI1_SetConfig+0x56>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a20      	ldr	r2, [pc, #128]	; (8007118 <TIM_TI1_SetConfig+0xc4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_TI1_SetConfig+0x56>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <TIM_TI1_SetConfig+0xc8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_TI1_SetConfig+0x56>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <TIM_TI1_SetConfig+0xcc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d101      	bne.n	80070ae <TIM_TI1_SetConfig+0x5a>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <TIM_TI1_SetConfig+0x5c>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0303 	bic.w	r3, r3, #3
 80070ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e003      	b.n	80070ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 030a 	bic.w	r3, r3, #10
 80070e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f003 030a 	and.w	r3, r3, #10
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40013400 	.word	0x40013400
 8007120:	40014000 	.word	0x40014000

08007124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0201 	bic.w	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800714e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f023 030a 	bic.w	r3, r3, #10
 8007160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007182:	b480      	push	{r7}
 8007184:	b087      	sub	sp, #28
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f023 0210 	bic.w	r2, r3, #16
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	031b      	lsls	r3, r3, #12
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f023 0210 	bic.w	r2, r3, #16
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	031b      	lsls	r3, r3, #12
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	621a      	str	r2, [r3, #32]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80072ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	621a      	str	r2, [r3, #32]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007300:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007312:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	031b      	lsls	r3, r3, #12
 8007318:	b29b      	uxth	r3, r3
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007326:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	031b      	lsls	r3, r3, #12
 800732c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	f043 0307 	orr.w	r3, r3, #7
 8007374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	021a      	lsls	r2, r3, #8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	2201      	movs	r2, #1
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1a      	ldr	r2, [r3, #32]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d109      	bne.n	8007438 <HAL_TIMEx_PWMN_Start+0x24>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e022      	b.n	800747e <HAL_TIMEx_PWMN_Start+0x6a>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d109      	bne.n	8007452 <HAL_TIMEx_PWMN_Start+0x3e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	bf14      	ite	ne
 800744a:	2301      	movne	r3, #1
 800744c:	2300      	moveq	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e015      	b.n	800747e <HAL_TIMEx_PWMN_Start+0x6a>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d109      	bne.n	800746c <HAL_TIMEx_PWMN_Start+0x58>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e008      	b.n	800747e <HAL_TIMEx_PWMN_Start+0x6a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e069      	b.n	800755a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_TIMEx_PWMN_Start+0x82>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007494:	e013      	b.n	80074be <HAL_TIMEx_PWMN_Start+0xaa>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_TIMEx_PWMN_Start+0x92>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a4:	e00b      	b.n	80074be <HAL_TIMEx_PWMN_Start+0xaa>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d104      	bne.n	80074b6 <HAL_TIMEx_PWMN_Start+0xa2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b4:	e003      	b.n	80074be <HAL_TIMEx_PWMN_Start+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2204      	movs	r2, #4
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 faa5 	bl	8007a16 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a20      	ldr	r2, [pc, #128]	; (8007564 <HAL_TIMEx_PWMN_Start+0x150>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d018      	beq.n	8007518 <HAL_TIMEx_PWMN_Start+0x104>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d013      	beq.n	8007518 <HAL_TIMEx_PWMN_Start+0x104>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <HAL_TIMEx_PWMN_Start+0x154>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00e      	beq.n	8007518 <HAL_TIMEx_PWMN_Start+0x104>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1b      	ldr	r2, [pc, #108]	; (800756c <HAL_TIMEx_PWMN_Start+0x158>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_TIMEx_PWMN_Start+0x104>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a19      	ldr	r2, [pc, #100]	; (8007570 <HAL_TIMEx_PWMN_Start+0x15c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_TIMEx_PWMN_Start+0x104>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a18      	ldr	r2, [pc, #96]	; (8007574 <HAL_TIMEx_PWMN_Start+0x160>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d115      	bne.n	8007544 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	4b16      	ldr	r3, [pc, #88]	; (8007578 <HAL_TIMEx_PWMN_Start+0x164>)
 8007520:	4013      	ands	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b06      	cmp	r3, #6
 8007528:	d015      	beq.n	8007556 <HAL_TIMEx_PWMN_Start+0x142>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007530:	d011      	beq.n	8007556 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	e008      	b.n	8007556 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e000      	b.n	8007558 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40012c00 	.word	0x40012c00
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40013400 	.word	0x40013400
 8007574:	40014000 	.word	0x40014000
 8007578:	00010007 	.word	0x00010007

0800757c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007590:	2302      	movs	r3, #2
 8007592:	e065      	b.n	8007660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2c      	ldr	r2, [pc, #176]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2b      	ldr	r2, [pc, #172]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80075e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760a:	d013      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a12      	ldr	r2, [pc, #72]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a13      	ldr	r2, [pc, #76]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10c      	bne.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	4313      	orrs	r3, r2
 8007644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	40012c00 	.word	0x40012c00
 8007670:	40013400 	.word	0x40013400
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40014000 	.word	0x40014000

08007680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007698:	2302      	movs	r3, #2
 800769a:	e087      	b.n	80077ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a27      	ldr	r2, [pc, #156]	; (80077b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a25      	ldr	r2, [pc, #148]	; (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d106      	bne.n	8007738 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1e      	ldr	r2, [pc, #120]	; (80077b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d126      	bne.n	800779a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	051b      	lsls	r3, r3, #20
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a0d      	ldr	r2, [pc, #52]	; (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d106      	bne.n	800779a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400

080077c0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80077c0:	b480      	push	{r7}
 80077c2:	b08b      	sub	sp, #44	; 0x2c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_TIMEx_ConfigBreakInput+0x1a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e0bd      	b.n	8007956 <HAL_TIMEx_ConfigBreakInput+0x196>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d855      	bhi.n	8007898 <HAL_TIMEx_ConfigBreakInput+0xd8>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <HAL_TIMEx_ConfigBreakInput+0x34>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007835 	.word	0x08007835
 80077f8:	08007849 	.word	0x08007849
 80077fc:	08007899 	.word	0x08007899
 8007800:	0800785d 	.word	0x0800785d
 8007804:	08007899 	.word	0x08007899
 8007808:	08007899 	.word	0x08007899
 800780c:	08007899 	.word	0x08007899
 8007810:	08007871 	.word	0x08007871
 8007814:	08007899 	.word	0x08007899
 8007818:	08007899 	.word	0x08007899
 800781c:	08007899 	.word	0x08007899
 8007820:	08007899 	.word	0x08007899
 8007824:	08007899 	.word	0x08007899
 8007828:	08007899 	.word	0x08007899
 800782c:	08007899 	.word	0x08007899
 8007830:	08007885 	.word	0x08007885
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8007834:	2301      	movs	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800783c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007840:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8007842:	2309      	movs	r3, #9
 8007844:	61bb      	str	r3, [r7, #24]
      break;
 8007846:	e030      	b.n	80078aa <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8007848:	2302      	movs	r3, #2
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800784c:	2301      	movs	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8007850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007854:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8007856:	230a      	movs	r3, #10
 8007858:	61bb      	str	r3, [r7, #24]
      break;
 800785a:	e026      	b.n	80078aa <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800785c:	2304      	movs	r3, #4
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8007860:	2302      	movs	r3, #2
 8007862:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8007864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007868:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800786a:	230b      	movs	r3, #11
 800786c:	61bb      	str	r3, [r7, #24]
      break;
 800786e:	e01c      	b.n	80078aa <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8007870:	2308      	movs	r3, #8
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8007874:	2303      	movs	r3, #3
 8007876:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8007878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800787c:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800787e:	230c      	movs	r3, #12
 8007880:	61bb      	str	r3, [r7, #24]
      break;
 8007882:	e012      	b.n	80078aa <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8007884:	2310      	movs	r3, #16
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8007888:	2304      	movs	r3, #4
 800788a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800788c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007890:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8007892:	230d      	movs	r3, #13
 8007894:	61bb      	str	r3, [r7, #24]
      break;
 8007896:	e008      	b.n	80078aa <HAL_TIMEx_ConfigBreakInput+0xea>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
      break;
 80078a8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <HAL_TIMEx_ConfigBreakInput+0xf8>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d025      	beq.n	8007902 <HAL_TIMEx_ConfigBreakInput+0x142>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 80078b6:	e049      	b.n	800794c <HAL_TIMEx_ConfigBreakInput+0x18c>
      tmporx = htim->Instance->AF1;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078be:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	43db      	mvns	r3, r3
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4013      	ands	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	409a      	lsls	r2, r3
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	4013      	ands	r3, r2
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	43db      	mvns	r3, r3
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4013      	ands	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	409a      	lsls	r2, r3
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	4013      	ands	r3, r2
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8007900:	e024      	b.n	800794c <HAL_TIMEx_ConfigBreakInput+0x18c>
      tmporx = htim->Instance->AF2;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	43db      	mvns	r3, r3
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4013      	ands	r3, r2
 8007912:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	409a      	lsls	r2, r3
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	4013      	ands	r3, r2
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	43db      	mvns	r3, r3
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4013      	ands	r3, r2
 800792e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	409a      	lsls	r2, r3
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	4013      	ands	r3, r2
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800794a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	372c      	adds	r7, #44	; 0x2c
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2204      	movs	r2, #4
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	43db      	mvns	r3, r3
 8007a38:	401a      	ands	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1a      	ldr	r2, [r3, #32]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e042      	b.n	8007af8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7f9 ff5f 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2224      	movs	r2, #36	; 0x24
 8007a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbb0 	bl	8008208 <UART_SetConfig>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e022      	b.n	8007af8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fe76 	bl	80087ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fefd 	bl	80088f0 <UART_CheckIdleState>
 8007af6:	4603      	mov	r3, r0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	f040 8083 	bne.w	8007c22 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_UART_Transmit+0x28>
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e07b      	b.n	8007c24 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Transmit+0x3a>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e074      	b.n	8007c24 <HAL_UART_Transmit+0x124>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2221      	movs	r2, #33	; 0x21
 8007b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b52:	f7fa f847 	bl	8001be4 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b70:	d108      	bne.n	8007b84 <HAL_UART_Transmit+0x84>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	e003      	b.n	8007b8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007b94:	e02c      	b.n	8007bf0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2180      	movs	r1, #128	; 0x80
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 feed 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e039      	b.n	8007c24 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	3302      	adds	r3, #2
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e007      	b.n	8007bde <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1cc      	bne.n	8007b96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	2140      	movs	r1, #64	; 0x40
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 feba 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e006      	b.n	8007c24 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e000      	b.n	8007c24 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d168      	bne.n	8007d16 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_UART_Transmit_IT+0x24>
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e061      	b.n	8007d18 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Transmit_IT+0x36>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e05a      	b.n	8007d18 <HAL_UART_Transmit_IT+0xec>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2221      	movs	r2, #33	; 0x21
 8007c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d11c      	bne.n	8007cda <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca8:	d107      	bne.n	8007cba <HAL_UART_Transmit_IT+0x8e>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <HAL_UART_Transmit_IT+0xf8>)
 8007cb6:	671a      	str	r2, [r3, #112]	; 0x70
 8007cb8:	e002      	b.n	8007cc0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <HAL_UART_Transmit_IT+0xfc>)
 8007cbe:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	e01b      	b.n	8007d12 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	d107      	bne.n	8007cf4 <HAL_UART_Transmit_IT+0xc8>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a0f      	ldr	r2, [pc, #60]	; (8007d2c <HAL_UART_Transmit_IT+0x100>)
 8007cf0:	671a      	str	r2, [r3, #112]	; 0x70
 8007cf2:	e002      	b.n	8007cfa <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a0e      	ldr	r2, [pc, #56]	; (8007d30 <HAL_UART_Transmit_IT+0x104>)
 8007cf8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d10:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e000      	b.n	8007d18 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
  }
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	08008c7f 	.word	0x08008c7f
 8007d28:	08008be5 	.word	0x08008be5
 8007d2c:	08008b67 	.word	0x08008b67
 8007d30:	08008af3 	.word	0x08008af3

08007d34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 80bc 	bne.w	8007ec6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_UART_Receive_IT+0x26>
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e0b4      	b.n	8007ec8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Receive_IT+0x38>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e0ad      	b.n	8007ec8 <HAL_UART_Receive_IT+0x194>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d98:	d10e      	bne.n	8007db8 <HAL_UART_Receive_IT+0x84>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <HAL_UART_Receive_IT+0x7a>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007da8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dac:	e02d      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007db6:	e028      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10d      	bne.n	8007ddc <HAL_UART_Receive_IT+0xa8>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_UART_Receive_IT+0x9e>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dd0:	e01b      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	227f      	movs	r2, #127	; 0x7f
 8007dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dda:	e016      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de4:	d10d      	bne.n	8007e02 <HAL_UART_Receive_IT+0xce>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <HAL_UART_Receive_IT+0xc4>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	227f      	movs	r2, #127	; 0x7f
 8007df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007df6:	e008      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	223f      	movs	r2, #63	; 0x3f
 8007dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e00:	e003      	b.n	8007e0a <HAL_UART_Receive_IT+0xd6>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2222      	movs	r2, #34	; 0x22
 8007e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0201 	orr.w	r2, r2, #1
 8007e28:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e32:	d12a      	bne.n	8007e8a <HAL_UART_Receive_IT+0x156>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d324      	bcc.n	8007e8a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e48:	d107      	bne.n	8007e5a <HAL_UART_Receive_IT+0x126>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a1f      	ldr	r2, [pc, #124]	; (8007ed4 <HAL_UART_Receive_IT+0x1a0>)
 8007e56:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e58:	e002      	b.n	8007e60 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a1e      	ldr	r2, [pc, #120]	; (8007ed8 <HAL_UART_Receive_IT+0x1a4>)
 8007e5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e76:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	e01b      	b.n	8007ec2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e92:	d107      	bne.n	8007ea4 <HAL_UART_Receive_IT+0x170>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a0f      	ldr	r2, [pc, #60]	; (8007edc <HAL_UART_Receive_IT+0x1a8>)
 8007ea0:	66da      	str	r2, [r3, #108]	; 0x6c
 8007ea2:	e002      	b.n	8007eaa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4a0e      	ldr	r2, [pc, #56]	; (8007ee0 <HAL_UART_Receive_IT+0x1ac>)
 8007ea8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007ec0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e000      	b.n	8007ec8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	08008fb5 	.word	0x08008fb5
 8007ed8:	08008ead 	.word	0x08008ead
 8007edc:	08008e01 	.word	0x08008e01
 8007ee0:	08008d57 	.word	0x08008d57

08007ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d118      	bne.n	8007f46 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d013      	beq.n	8007f46 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8144 	beq.w	80081c4 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
      }
      return;
 8007f44:	e13e      	b.n	80081c4 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80e8 	beq.w	800811e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4b9e      	ldr	r3, [pc, #632]	; (80081cc <HAL_UART_IRQHandler+0x2e8>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4b9d      	ldr	r3, [pc, #628]	; (80081d0 <HAL_UART_IRQHandler+0x2ec>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80dd 	beq.w	800811e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d010      	beq.n	8007f90 <HAL_UART_IRQHandler+0xac>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	f043 0201 	orr.w	r2, r3, #1
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d010      	beq.n	8007fbc <HAL_UART_IRQHandler+0xd8>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb2:	f043 0204 	orr.w	r2, r3, #4
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d010      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x104>
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fde:	f043 0202 	orr.w	r2, r3, #2
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d015      	beq.n	800801e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4b73      	ldr	r3, [pc, #460]	; (80081cc <HAL_UART_IRQHandler+0x2e8>)
 8008000:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2208      	movs	r2, #8
 800800c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	f043 0208 	orr.w	r2, r3, #8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008024:	2b00      	cmp	r3, #0
 8008026:	d011      	beq.n	800804c <HAL_UART_IRQHandler+0x168>
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00c      	beq.n	800804c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800803a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	f043 0220 	orr.w	r2, r3, #32
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80b8 	beq.w	80081c8 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d004      	beq.n	80080a6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d031      	beq.n	800810a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fcea 	bl	8008a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d123      	bne.n	8008102 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d013      	beq.n	80080fa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d6:	4a3f      	ldr	r2, [pc, #252]	; (80081d4 <HAL_UART_IRQHandler+0x2f0>)
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fc f8fd 	bl	80042de <HAL_DMA_Abort_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	e00f      	b.n	800811a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f87a 	bl	80081f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	e00b      	b.n	800811a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f876 	bl	80081f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	e007      	b.n	800811a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f872 	bl	80081f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008118:	e056      	b.n	80081c8 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811a:	bf00      	nop
    return;
 800811c:	e054      	b.n	80081c8 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00d      	beq.n	8008144 <HAL_UART_IRQHandler+0x260>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800813a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 ffbd 	bl	80090bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008142:	e04a      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d012      	beq.n	8008174 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d008      	beq.n	8008174 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	2b00      	cmp	r3, #0
 8008168:	d036      	beq.n	80081d8 <HAL_UART_IRQHandler+0x2f4>
    {
      huart->TxISR(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
    }
    return;
 8008172:	e031      	b.n	80081d8 <HAL_UART_IRQHandler+0x2f4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d008      	beq.n	8008190 <HAL_UART_IRQHandler+0x2ac>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fdca 	bl	8008d22 <UART_EndTransmit_IT>
    return;
 800818e:	e024      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <HAL_UART_IRQHandler+0x2c8>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 ff9d 	bl	80090e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081aa:	e016      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d011      	beq.n	80081da <HAL_UART_IRQHandler+0x2f6>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da0e      	bge.n	80081da <HAL_UART_IRQHandler+0x2f6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 ff87 	bl	80090d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081c2:	e00a      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
      return;
 80081c4:	bf00      	nop
 80081c6:	e008      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
    return;
 80081c8:	bf00      	nop
 80081ca:	e006      	b.n	80081da <HAL_UART_IRQHandler+0x2f6>
 80081cc:	10000001 	.word	0x10000001
 80081d0:	04000120 	.word	0x04000120
 80081d4:	08008ac7 	.word	0x08008ac7
    return;
 80081d8:	bf00      	nop
  }
}
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800820c:	b08c      	sub	sp, #48	; 0x30
 800820e:	af00      	add	r7, sp, #0
 8008210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	431a      	orrs	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	431a      	orrs	r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	4313      	orrs	r3, r2
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008236:	4313      	orrs	r3, r2
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	4bab      	ldr	r3, [pc, #684]	; (80084f0 <UART_SetConfig+0x2e8>)
 8008242:	4013      	ands	r3, r2
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800824a:	430b      	orrs	r3, r1
 800824c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4aa1      	ldr	r2, [pc, #644]	; (80084f4 <UART_SetConfig+0x2ec>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d004      	beq.n	800827e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	4313      	orrs	r3, r2
 800827c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008288:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008292:	430b      	orrs	r3, r1
 8008294:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	f023 010f 	bic.w	r1, r3, #15
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a91      	ldr	r2, [pc, #580]	; (80084f8 <UART_SetConfig+0x2f0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d126      	bne.n	8008304 <UART_SetConfig+0xfc>
 80082b6:	4b91      	ldr	r3, [pc, #580]	; (80084fc <UART_SetConfig+0x2f4>)
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d81b      	bhi.n	80082fc <UART_SetConfig+0xf4>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0xc4>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e0d6      	b.n	8008492 <UART_SetConfig+0x28a>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e0d2      	b.n	8008492 <UART_SetConfig+0x28a>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e0ce      	b.n	8008492 <UART_SetConfig+0x28a>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e0ca      	b.n	8008492 <UART_SetConfig+0x28a>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e0c6      	b.n	8008492 <UART_SetConfig+0x28a>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a7d      	ldr	r2, [pc, #500]	; (8008500 <UART_SetConfig+0x2f8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d138      	bne.n	8008380 <UART_SetConfig+0x178>
 800830e:	4b7b      	ldr	r3, [pc, #492]	; (80084fc <UART_SetConfig+0x2f4>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008314:	f003 030c 	and.w	r3, r3, #12
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d82d      	bhi.n	8008378 <UART_SetConfig+0x170>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <UART_SetConfig+0x11c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008359 	.word	0x08008359
 8008328:	08008379 	.word	0x08008379
 800832c:	08008379 	.word	0x08008379
 8008330:	08008379 	.word	0x08008379
 8008334:	08008369 	.word	0x08008369
 8008338:	08008379 	.word	0x08008379
 800833c:	08008379 	.word	0x08008379
 8008340:	08008379 	.word	0x08008379
 8008344:	08008361 	.word	0x08008361
 8008348:	08008379 	.word	0x08008379
 800834c:	08008379 	.word	0x08008379
 8008350:	08008379 	.word	0x08008379
 8008354:	08008371 	.word	0x08008371
 8008358:	2300      	movs	r3, #0
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e098      	b.n	8008492 <UART_SetConfig+0x28a>
 8008360:	2302      	movs	r3, #2
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e094      	b.n	8008492 <UART_SetConfig+0x28a>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e090      	b.n	8008492 <UART_SetConfig+0x28a>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e08c      	b.n	8008492 <UART_SetConfig+0x28a>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e088      	b.n	8008492 <UART_SetConfig+0x28a>
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a5f      	ldr	r2, [pc, #380]	; (8008504 <UART_SetConfig+0x2fc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d125      	bne.n	80083d6 <UART_SetConfig+0x1ce>
 800838a:	4b5c      	ldr	r3, [pc, #368]	; (80084fc <UART_SetConfig+0x2f4>)
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d016      	beq.n	80083c6 <UART_SetConfig+0x1be>
 8008398:	2b30      	cmp	r3, #48	; 0x30
 800839a:	d818      	bhi.n	80083ce <UART_SetConfig+0x1c6>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d00a      	beq.n	80083b6 <UART_SetConfig+0x1ae>
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d814      	bhi.n	80083ce <UART_SetConfig+0x1c6>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <UART_SetConfig+0x1a6>
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d008      	beq.n	80083be <UART_SetConfig+0x1b6>
 80083ac:	e00f      	b.n	80083ce <UART_SetConfig+0x1c6>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b4:	e06d      	b.n	8008492 <UART_SetConfig+0x28a>
 80083b6:	2302      	movs	r3, #2
 80083b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083bc:	e069      	b.n	8008492 <UART_SetConfig+0x28a>
 80083be:	2304      	movs	r3, #4
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c4:	e065      	b.n	8008492 <UART_SetConfig+0x28a>
 80083c6:	2308      	movs	r3, #8
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083cc:	e061      	b.n	8008492 <UART_SetConfig+0x28a>
 80083ce:	2310      	movs	r3, #16
 80083d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d4:	e05d      	b.n	8008492 <UART_SetConfig+0x28a>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a4b      	ldr	r2, [pc, #300]	; (8008508 <UART_SetConfig+0x300>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d125      	bne.n	800842c <UART_SetConfig+0x224>
 80083e0:	4b46      	ldr	r3, [pc, #280]	; (80084fc <UART_SetConfig+0x2f4>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083ea:	2bc0      	cmp	r3, #192	; 0xc0
 80083ec:	d016      	beq.n	800841c <UART_SetConfig+0x214>
 80083ee:	2bc0      	cmp	r3, #192	; 0xc0
 80083f0:	d818      	bhi.n	8008424 <UART_SetConfig+0x21c>
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d00a      	beq.n	800840c <UART_SetConfig+0x204>
 80083f6:	2b80      	cmp	r3, #128	; 0x80
 80083f8:	d814      	bhi.n	8008424 <UART_SetConfig+0x21c>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <UART_SetConfig+0x1fc>
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d008      	beq.n	8008414 <UART_SetConfig+0x20c>
 8008402:	e00f      	b.n	8008424 <UART_SetConfig+0x21c>
 8008404:	2300      	movs	r3, #0
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e042      	b.n	8008492 <UART_SetConfig+0x28a>
 800840c:	2302      	movs	r3, #2
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008412:	e03e      	b.n	8008492 <UART_SetConfig+0x28a>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e03a      	b.n	8008492 <UART_SetConfig+0x28a>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008422:	e036      	b.n	8008492 <UART_SetConfig+0x28a>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842a:	e032      	b.n	8008492 <UART_SetConfig+0x28a>
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a30      	ldr	r2, [pc, #192]	; (80084f4 <UART_SetConfig+0x2ec>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d12a      	bne.n	800848c <UART_SetConfig+0x284>
 8008436:	4b31      	ldr	r3, [pc, #196]	; (80084fc <UART_SetConfig+0x2f4>)
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008444:	d01a      	beq.n	800847c <UART_SetConfig+0x274>
 8008446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800844a:	d81b      	bhi.n	8008484 <UART_SetConfig+0x27c>
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008450:	d00c      	beq.n	800846c <UART_SetConfig+0x264>
 8008452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008456:	d815      	bhi.n	8008484 <UART_SetConfig+0x27c>
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <UART_SetConfig+0x25c>
 800845c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008460:	d008      	beq.n	8008474 <UART_SetConfig+0x26c>
 8008462:	e00f      	b.n	8008484 <UART_SetConfig+0x27c>
 8008464:	2300      	movs	r3, #0
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e012      	b.n	8008492 <UART_SetConfig+0x28a>
 800846c:	2302      	movs	r3, #2
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e00e      	b.n	8008492 <UART_SetConfig+0x28a>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800847a:	e00a      	b.n	8008492 <UART_SetConfig+0x28a>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008482:	e006      	b.n	8008492 <UART_SetConfig+0x28a>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800848a:	e002      	b.n	8008492 <UART_SetConfig+0x28a>
 800848c:	2310      	movs	r3, #16
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a17      	ldr	r2, [pc, #92]	; (80084f4 <UART_SetConfig+0x2ec>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f040 80a8 	bne.w	80085ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800849e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d834      	bhi.n	8008510 <UART_SetConfig+0x308>
 80084a6:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <UART_SetConfig+0x2a4>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	08008511 	.word	0x08008511
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	08008511 	.word	0x08008511
 80084bc:	080084df 	.word	0x080084df
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008511 	.word	0x08008511
 80084cc:	080084e7 	.word	0x080084e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d0:	f7fc fe96 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 80084d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d6:	e021      	b.n	800851c <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <UART_SetConfig+0x304>)
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084dc:	e01e      	b.n	800851c <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084de:	f7fc fe21 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084e4:	e01a      	b.n	800851c <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084ec:	e016      	b.n	800851c <UART_SetConfig+0x314>
 80084ee:	bf00      	nop
 80084f0:	cfff69f3 	.word	0xcfff69f3
 80084f4:	40008000 	.word	0x40008000
 80084f8:	40013800 	.word	0x40013800
 80084fc:	40021000 	.word	0x40021000
 8008500:	40004400 	.word	0x40004400
 8008504:	40004800 	.word	0x40004800
 8008508:	40004c00 	.word	0x40004c00
 800850c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800851a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 812a 	beq.w	8008778 <UART_SetConfig+0x570>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	4a9e      	ldr	r2, [pc, #632]	; (80087a4 <UART_SetConfig+0x59c>)
 800852a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800852e:	461a      	mov	r2, r3
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	fbb3 f3f2 	udiv	r3, r3, r2
 8008536:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	4413      	add	r3, r2
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	429a      	cmp	r2, r3
 8008546:	d305      	bcc.n	8008554 <UART_SetConfig+0x34c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	429a      	cmp	r2, r3
 8008552:	d903      	bls.n	800855c <UART_SetConfig+0x354>
      {
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800855a:	e10d      	b.n	8008778 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2200      	movs	r2, #0
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	60fa      	str	r2, [r7, #12]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	4a8e      	ldr	r2, [pc, #568]	; (80087a4 <UART_SetConfig+0x59c>)
 800856a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800856e:	b29b      	uxth	r3, r3
 8008570:	2200      	movs	r2, #0
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800857e:	f7f8 fa31 	bl	80009e4 <__aeabi_uldivmod>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	f04f 0200 	mov.w	r2, #0
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	020b      	lsls	r3, r1, #8
 8008594:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008598:	0202      	lsls	r2, r0, #8
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	6849      	ldr	r1, [r1, #4]
 800859e:	0849      	lsrs	r1, r1, #1
 80085a0:	2000      	movs	r0, #0
 80085a2:	460c      	mov	r4, r1
 80085a4:	4605      	mov	r5, r0
 80085a6:	eb12 0804 	adds.w	r8, r2, r4
 80085aa:	eb43 0905 	adc.w	r9, r3, r5
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	469a      	mov	sl, r3
 80085b6:	4693      	mov	fp, r2
 80085b8:	4652      	mov	r2, sl
 80085ba:	465b      	mov	r3, fp
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f8 fa10 	bl	80009e4 <__aeabi_uldivmod>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4613      	mov	r3, r2
 80085ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085d2:	d308      	bcc.n	80085e6 <UART_SetConfig+0x3de>
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085da:	d204      	bcs.n	80085e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a3a      	ldr	r2, [r7, #32]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e0c8      	b.n	8008778 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085ec:	e0c4      	b.n	8008778 <UART_SetConfig+0x570>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f6:	d168      	bne.n	80086ca <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 80085f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d828      	bhi.n	8008652 <UART_SetConfig+0x44a>
 8008600:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x400>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008635 	.word	0x08008635
 8008610:	0800863d 	.word	0x0800863d
 8008614:	08008653 	.word	0x08008653
 8008618:	08008643 	.word	0x08008643
 800861c:	08008653 	.word	0x08008653
 8008620:	08008653 	.word	0x08008653
 8008624:	08008653 	.word	0x08008653
 8008628:	0800864b 	.word	0x0800864b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800862c:	f7fc fde8 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8008630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008632:	e014      	b.n	800865e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008634:	f7fc fdfa 	bl	800522c <HAL_RCC_GetPCLK2Freq>
 8008638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800863a:	e010      	b.n	800865e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800863c:	4b5a      	ldr	r3, [pc, #360]	; (80087a8 <UART_SetConfig+0x5a0>)
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008640:	e00d      	b.n	800865e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008642:	f7fc fd6f 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8008646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008648:	e009      	b.n	800865e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008650:	e005      	b.n	800865e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800865c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8089 	beq.w	8008778 <UART_SetConfig+0x570>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	4a4e      	ldr	r2, [pc, #312]	; (80087a4 <UART_SetConfig+0x59c>)
 800866c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008670:	461a      	mov	r2, r3
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	fbb3 f3f2 	udiv	r3, r3, r2
 8008678:	005a      	lsls	r2, r3, #1
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	441a      	add	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	fbb2 f3f3 	udiv	r3, r2, r3
 800868a:	b29b      	uxth	r3, r3
 800868c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	2b0f      	cmp	r3, #15
 8008692:	d916      	bls.n	80086c2 <UART_SetConfig+0x4ba>
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869a:	d212      	bcs.n	80086c2 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f023 030f 	bic.w	r3, r3, #15
 80086a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	8bfb      	ldrh	r3, [r7, #30]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	8bfa      	ldrh	r2, [r7, #30]
 80086be:	60da      	str	r2, [r3, #12]
 80086c0:	e05a      	b.n	8008778 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086c8:	e056      	b.n	8008778 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d827      	bhi.n	8008722 <UART_SetConfig+0x51a>
 80086d2:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <UART_SetConfig+0x4d0>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	08008705 	.word	0x08008705
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	08008723 	.word	0x08008723
 80086e8:	08008713 	.word	0x08008713
 80086ec:	08008723 	.word	0x08008723
 80086f0:	08008723 	.word	0x08008723
 80086f4:	08008723 	.word	0x08008723
 80086f8:	0800871b 	.word	0x0800871b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086fc:	f7fc fd80 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8008700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008702:	e014      	b.n	800872e <UART_SetConfig+0x526>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008704:	f7fc fd92 	bl	800522c <HAL_RCC_GetPCLK2Freq>
 8008708:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800870a:	e010      	b.n	800872e <UART_SetConfig+0x526>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800870c:	4b26      	ldr	r3, [pc, #152]	; (80087a8 <UART_SetConfig+0x5a0>)
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008710:	e00d      	b.n	800872e <UART_SetConfig+0x526>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008712:	f7fc fd07 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8008716:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008718:	e009      	b.n	800872e <UART_SetConfig+0x526>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800871a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008720:	e005      	b.n	800872e <UART_SetConfig+0x526>
      default:
        pclk = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800872c:	bf00      	nop
    }

    if (pclk != 0U)
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	2b00      	cmp	r3, #0
 8008732:	d021      	beq.n	8008778 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	4a1a      	ldr	r2, [pc, #104]	; (80087a4 <UART_SetConfig+0x59c>)
 800873a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800873e:	461a      	mov	r2, r3
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	fbb3 f2f2 	udiv	r2, r3, r2
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	441a      	add	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	fbb2 f3f3 	udiv	r3, r2, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	2b0f      	cmp	r3, #15
 800875e:	d908      	bls.n	8008772 <UART_SetConfig+0x56a>
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008766:	d204      	bcs.n	8008772 <UART_SetConfig+0x56a>
      {
        huart->Instance->BRR = usartdiv;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6a3a      	ldr	r2, [r7, #32]
 800876e:	60da      	str	r2, [r3, #12]
 8008770:	e002      	b.n	8008778 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2201      	movs	r2, #1
 800877c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2201      	movs	r2, #1
 8008784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2200      	movs	r2, #0
 800878c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2200      	movs	r2, #0
 8008792:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008794:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008798:	4618      	mov	r0, r3
 800879a:	3730      	adds	r7, #48	; 0x30
 800879c:	46bd      	mov	sp, r7
 800879e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087a2:	bf00      	nop
 80087a4:	0800b008 	.word	0x0800b008
 80087a8:	00f42400 	.word	0x00f42400

080087ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01a      	beq.n	80088c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088aa:	d10a      	bne.n	80088c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	605a      	str	r2, [r3, #4]
  }
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008900:	f7f9 f970 	bl	8001be4 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b08      	cmp	r3, #8
 8008912:	d10e      	bne.n	8008932 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f82c 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e022      	b.n	8008978 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b04      	cmp	r3, #4
 800893e:	d10e      	bne.n	800895e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f816 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e00c      	b.n	8008978 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008990:	e062      	b.n	8008a58 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d05e      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899a:	f7f9 f923 	bl	8001be4 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11d      	bne.n	80089ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e045      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d02e      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a08:	d126      	bne.n	8008a58 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a22:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0201 	bic.w	r2, r2, #1
 8008a32:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e00f      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69da      	ldr	r2, [r3, #28]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4013      	ands	r3, r2
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d08d      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aa6:	f023 0301 	bic.w	r3, r3, #1
 8008aaa:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fb85 	bl	80081f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b00:	2b21      	cmp	r3, #33	; 0x21
 8008b02:	d12a      	bne.n	8008b5a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d110      	bne.n	8008b32 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b1e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b2e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008b30:	e013      	b.n	8008b5a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b74:	2b21      	cmp	r3, #33	; 0x21
 8008b76:	d12f      	bne.n	8008bd8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d110      	bne.n	8008ba6 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b92:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008ba4:	e018      	b.n	8008bd8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc0:	1c9a      	adds	r2, r3, #2
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf2:	2b21      	cmp	r3, #33	; 0x21
 8008bf4:	d13d      	bne.n	8008c72 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bfc:	81fb      	strh	r3, [r7, #14]
 8008bfe:	e035      	b.n	8008c6c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d111      	bne.n	8008c30 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008c1a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c2a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008c2c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008c2e:	e020      	b.n	8008c72 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d013      	beq.n	8008c66 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	81fb      	strh	r3, [r7, #14]
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1c6      	bne.n	8008c00 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c8c:	2b21      	cmp	r3, #33	; 0x21
 8008c8e:	d142      	bne.n	8008d16 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c96:	81fb      	strh	r3, [r7, #14]
 8008c98:	e03a      	b.n	8008d10 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d111      	bne.n	8008cca <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008cb4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008cc6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008cc8:	e025      	b.n	8008d16 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d018      	beq.n	8008d0a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cdc:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf2:	1c9a      	adds	r2, r3, #2
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	3b01      	subs	r3, #1
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d0a:	89fb      	ldrh	r3, [r7, #14]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	81fb      	strh	r3, [r7, #14]
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1c1      	bne.n	8008c9a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d38:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fa49 	bl	80081e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d64:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6c:	2b22      	cmp	r3, #34	; 0x22
 8008d6e:	d13b      	bne.n	8008de8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d78:	89bb      	ldrh	r3, [r7, #12]
 8008d7a:	b2d9      	uxtb	r1, r3
 8008d7c:	89fb      	ldrh	r3, [r7, #14]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d84:	400a      	ands	r2, r1
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d122      	bne.n	8008df8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dc0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0201 	bic.w	r2, r2, #1
 8008dd0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fbad 	bl	8009540 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008de6:	e007      	b.n	8008df8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0208 	orr.w	r2, r2, #8
 8008df6:	619a      	str	r2, [r3, #24]
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e16:	2b22      	cmp	r3, #34	; 0x22
 8008e18:	d13b      	bne.n	8008e92 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e26:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e28:	89ba      	ldrh	r2, [r7, #12]
 8008e2a:	89fb      	ldrh	r3, [r7, #14]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	1c9a      	adds	r2, r3, #2
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d122      	bne.n	8008ea2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e6a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb58 	bl	8009540 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e90:	e007      	b.n	8008ea2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0208 	orr.w	r2, r2, #8
 8008ea0:	619a      	str	r2, [r3, #24]
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eba:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec2:	2b22      	cmp	r3, #34	; 0x22
 8008ec4:	d168      	bne.n	8008f98 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ecc:	81fb      	strh	r3, [r7, #14]
 8008ece:	e03f      	b.n	8008f50 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ed8:	893b      	ldrh	r3, [r7, #8]
 8008eda:	b2d9      	uxtb	r1, r3
 8008edc:	89bb      	ldrh	r3, [r7, #12]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee4:	400a      	ands	r2, r1
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d11b      	bne.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f20:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f30:	f023 0301 	bic.w	r3, r3, #1
 8008f34:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fafb 	bl	8009540 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008f4a:	89fb      	ldrh	r3, [r7, #14]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	81fb      	strh	r3, [r7, #14]
 8008f50:	89fb      	ldrh	r3, [r7, #14]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1bc      	bne.n	8008ed0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f5c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f5e:	897b      	ldrh	r3, [r7, #10]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d021      	beq.n	8008fa8 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f6a:	897a      	ldrh	r2, [r7, #10]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d21b      	bcs.n	8008fa8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f7e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a0b      	ldr	r2, [pc, #44]	; (8008fb0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008f84:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0220 	orr.w	r2, r2, #32
 8008f94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f96:	e007      	b.n	8008fa8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0208 	orr.w	r2, r2, #8
 8008fa6:	619a      	str	r2, [r3, #24]
}
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	08008d57 	.word	0x08008d57

08008fb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fc2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fca:	2b22      	cmp	r3, #34	; 0x22
 8008fcc:	d168      	bne.n	80090a0 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fd4:	82fb      	strh	r3, [r7, #22]
 8008fd6:	e03f      	b.n	8009058 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fe6:	8a3a      	ldrh	r2, [r7, #16]
 8008fe8:	8abb      	ldrh	r3, [r7, #20]
 8008fea:	4013      	ands	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff6:	1c9a      	adds	r2, r3, #2
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11b      	bne.n	8009052 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009028:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa77 	bl	8009540 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009052:	8afb      	ldrh	r3, [r7, #22]
 8009054:	3b01      	subs	r3, #1
 8009056:	82fb      	strh	r3, [r7, #22]
 8009058:	8afb      	ldrh	r3, [r7, #22]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1bc      	bne.n	8008fd8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009064:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009066:	8a7b      	ldrh	r3, [r7, #18]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d021      	beq.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009072:	8a7a      	ldrh	r2, [r7, #18]
 8009074:	429a      	cmp	r2, r3
 8009076:	d21b      	bcs.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009086:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a0b      	ldr	r2, [pc, #44]	; (80090b8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800908c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0220 	orr.w	r2, r2, #32
 800909c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800909e:	e007      	b.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0208 	orr.w	r2, r2, #8
 80090ae:	619a      	str	r2, [r3, #24]
}
 80090b0:	bf00      	nop
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	08008e01 	.word	0x08008e01

080090bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_UARTEx_DisableFifoMode+0x16>
 800910a:	2302      	movs	r3, #2
 800910c:	e027      	b.n	800915e <HAL_UARTEx_DisableFifoMode+0x66>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2224      	movs	r2, #36	; 0x24
 800911a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800913c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800917e:	2302      	movs	r3, #2
 8009180:	e02d      	b.n	80091de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2224      	movs	r2, #36	; 0x24
 800918e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f850 	bl	8009264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e02d      	b.n	800925a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2224      	movs	r2, #36	; 0x24
 800920a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f812 	bl	8009264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800926c:	4a2d      	ldr	r2, [pc, #180]	; (8009324 <UARTEx_SetNbDataToProcess+0xc0>)
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009276:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800927a:	4a2b      	ldr	r2, [pc, #172]	; (8009328 <UARTEx_SetNbDataToProcess+0xc4>)
 800927c:	f107 030c 	add.w	r3, r7, #12
 8009280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009284:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928c:	2b00      	cmp	r3, #0
 800928e:	d108      	bne.n	80092a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092a0:	e039      	b.n	8009316 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092a2:	2308      	movs	r3, #8
 80092a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092a6:	2308      	movs	r3, #8
 80092a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	0e5b      	lsrs	r3, r3, #25
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	0f5b      	lsrs	r3, r3, #29
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ca:	7fbb      	ldrb	r3, [r7, #30]
 80092cc:	7f3a      	ldrb	r2, [r7, #28]
 80092ce:	3220      	adds	r2, #32
 80092d0:	443a      	add	r2, r7
 80092d2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092da:	7f3a      	ldrb	r2, [r7, #28]
 80092dc:	3220      	adds	r2, #32
 80092de:	443a      	add	r2, r7
 80092e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092f0:	7ffb      	ldrb	r3, [r7, #31]
 80092f2:	7f7a      	ldrb	r2, [r7, #29]
 80092f4:	3220      	adds	r2, #32
 80092f6:	443a      	add	r2, r7
 80092f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80092fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009300:	7f7a      	ldrb	r2, [r7, #29]
 8009302:	3220      	adds	r2, #32
 8009304:	443a      	add	r2, r7
 8009306:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800930a:	fb93 f3f2 	sdiv	r3, r3, r2
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009316:	bf00      	nop
 8009318:	3724      	adds	r7, #36	; 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	0800afe0 	.word	0x0800afe0
 8009328:	0800afe8 	.word	0x0800afe8

0800932c <PWM_encoder_init>:
extern TIM_HandleTypeDef htim3;

PWM_ENCODER_Def pwm_encoder;

void PWM_encoder_init(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8009330:	2100      	movs	r1, #0
 8009332:	4804      	ldr	r0, [pc, #16]	; (8009344 <PWM_encoder_init+0x18>)
 8009334:	f7fc fc44 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8009338:	2104      	movs	r1, #4
 800933a:	4802      	ldr	r0, [pc, #8]	; (8009344 <PWM_encoder_init+0x18>)
 800933c:	f7fc fc40 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
}
 8009340:	bf00      	nop
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000150 	.word	0x20000150

08009348 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1f      	ldr	r2, [pc, #124]	; (80093d4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d137      	bne.n	80093ca <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7f1b      	ldrb	r3, [r3, #28]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d128      	bne.n	80093b4 <HAL_TIM_IC_CaptureCallback+0x6c>
		{
			pwm_encoder.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fd f9c3 	bl	80066f0 <HAL_TIM_ReadCapturedValue>
 800936a:	4603      	mov	r3, r0
 800936c:	4a1a      	ldr	r2, [pc, #104]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 800936e:	6013      	str	r3, [r2, #0]
			pwm_encoder.frq = pwm_encoder.period * 0.1f;
 8009370:	4b19      	ldr	r3, [pc, #100]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80093dc <HAL_TIM_IC_CaptureCallback+0x94>
 8009380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009388:	ee17 3a90 	vmov	r3, s15
 800938c:	b29a      	uxth	r2, r3
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8009390:	809a      	strh	r2, [r3, #4]
			pwm_encoder.duty = ((float)pwm_encoder.high_time / (float)pwm_encoder.period);
 8009392:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939e:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 80093b0:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7f1b      	ldrb	r3, [r3, #28]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d106      	bne.n	80093ca <HAL_TIM_IC_CaptureCallback+0x82>
		{
			pwm_encoder.high_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80093bc:	2104      	movs	r1, #4
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fd f996 	bl	80066f0 <HAL_TIM_ReadCapturedValue>
 80093c4:	4603      	mov	r3, r0
 80093c6:	4a04      	ldr	r2, [pc, #16]	; (80093d8 <HAL_TIM_IC_CaptureCallback+0x90>)
 80093c8:	6093      	str	r3, [r2, #8]
		}
	}
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40000400 	.word	0x40000400
 80093d8:	20000234 	.word	0x20000234
 80093dc:	3dcccccd 	.word	0x3dcccccd

080093e0 <Get_PWM_Encoder_Angles>:
}

// 获取编码器的机械角度，真实的物理角度
// 获取电角度角度，FOC电角度
void Get_PWM_Encoder_Angles(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
	pwm_encoder.angle = pwm_encoder.duty * 360.0f;
 80093e4:	4b26      	ldr	r3, [pc, #152]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 80093e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80093ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009484 <Get_PWM_Encoder_Angles+0xa4>
 80093ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093f2:	4b23      	ldr	r3, [pc, #140]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 80093f4:	edc3 7a04 	vstr	s15, [r3, #16]
	pwm_encoder.angle_rad = pwm_encoder.duty * 2 * PI;
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 80093fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80093fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009402:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009488 <Get_PWM_Encoder_Angles+0xa8>
 8009406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 800940c:	edc3 7a05 	vstr	s15, [r3, #20]
	pwm_encoder.angle_rad_offset = 6.045f;					   // 手动找到的零点，后续通过函数调用获得
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009412:	4a1e      	ldr	r2, [pc, #120]	; (800948c <Get_PWM_Encoder_Angles+0xac>)
 8009414:	61da      	str	r2, [r3, #28]
	if (pwm_encoder.angle_rad >= pwm_encoder.angle_rad_offset) // 减去零点偏置
 8009416:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009418:	ed93 7a05 	vldr	s14, [r3, #20]
 800941c:	4b18      	ldr	r3, [pc, #96]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 800941e:	edd3 7a07 	vldr	s15, [r3, #28]
 8009422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942a:	db0b      	blt.n	8009444 <Get_PWM_Encoder_Angles+0x64>
	{
		pwm_encoder.angle_rad = pwm_encoder.angle_rad - pwm_encoder.angle_rad_offset;
 800942c:	4b14      	ldr	r3, [pc, #80]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 800942e:	ed93 7a05 	vldr	s14, [r3, #20]
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009434:	edd3 7a07 	vldr	s15, [r3, #28]
 8009438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 800943e:	edc3 7a05 	vstr	s15, [r3, #20]
 8009442:	e00e      	b.n	8009462 <Get_PWM_Encoder_Angles+0x82>
	}
	else
	{
		pwm_encoder.angle_rad = 2 * PI - pwm_encoder.angle_rad_offset + pwm_encoder.angle_rad;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009446:	edd3 7a07 	vldr	s15, [r3, #28]
 800944a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009490 <Get_PWM_Encoder_Angles+0xb0>
 800944e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009452:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009454:	edd3 7a05 	vldr	s15, [r3, #20]
 8009458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800945c:	4b08      	ldr	r3, [pc, #32]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 800945e:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pwm_encoder.electronic_angle = pwm_encoder.angle_rad * MOTOR_POLE;
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009464:	edd3 7a05 	vldr	s15, [r3, #20]
 8009468:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800946c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009470:	4b03      	ldr	r3, [pc, #12]	; (8009480 <Get_PWM_Encoder_Angles+0xa0>)
 8009472:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8009476:	bf00      	nop
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000234 	.word	0x20000234
 8009484:	43b40000 	.word	0x43b40000
 8009488:	40490fdb 	.word	0x40490fdb
 800948c:	40c170a4 	.word	0x40c170a4
 8009490:	40c90fdb 	.word	0x40c90fdb

08009494 <HAL_ADCEx_InjectedConvCpltCallback>:
uint16_t PA1_adc_value, PB11_adc_value, PA0_adc_value, PA7_adc_value;
/* USER CODE BEGIN 4 */

/*重构回调函数*/
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a4:	d119      	bne.n	80094da <HAL_ADCEx_InjectedConvCpltCallback+0x46>
	{
		PA1_adc_value = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80094a6:	2109      	movs	r1, #9
 80094a8:	4814      	ldr	r0, [pc, #80]	; (80094fc <HAL_ADCEx_InjectedConvCpltCallback+0x68>)
 80094aa:	f7fa f829 	bl	8003500 <HAL_ADCEx_InjectedGetValue>
 80094ae:	4603      	mov	r3, r0
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	4b13      	ldr	r3, [pc, #76]	; (8009500 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>)
 80094b4:	801a      	strh	r2, [r3, #0]
		PB11_adc_value = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80094b6:	f240 110f 	movw	r1, #271	; 0x10f
 80094ba:	4810      	ldr	r0, [pc, #64]	; (80094fc <HAL_ADCEx_InjectedConvCpltCallback+0x68>)
 80094bc:	f7fa f820 	bl	8003500 <HAL_ADCEx_InjectedGetValue>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <HAL_ADCEx_InjectedConvCpltCallback+0x70>)
 80094c6:	801a      	strh	r2, [r3, #0]
		PA0_adc_value = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80094c8:	f240 2115 	movw	r1, #533	; 0x215
 80094cc:	480b      	ldr	r0, [pc, #44]	; (80094fc <HAL_ADCEx_InjectedConvCpltCallback+0x68>)
 80094ce:	f7fa f817 	bl	8003500 <HAL_ADCEx_InjectedGetValue>
 80094d2:	4603      	mov	r3, r0
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <HAL_ADCEx_InjectedConvCpltCallback+0x74>)
 80094d8:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == ADC2)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a0b      	ldr	r2, [pc, #44]	; (800950c <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d107      	bne.n	80094f4 <HAL_ADCEx_InjectedConvCpltCallback+0x60>
	{
		PA7_adc_value = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80094e4:	2109      	movs	r1, #9
 80094e6:	480a      	ldr	r0, [pc, #40]	; (8009510 <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 80094e8:	f7fa f80a 	bl	8003500 <HAL_ADCEx_InjectedGetValue>
 80094ec:	4603      	mov	r3, r0
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	4b08      	ldr	r3, [pc, #32]	; (8009514 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 80094f2:	801a      	strh	r2, [r3, #0]
	}
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	2000002c 	.word	0x2000002c
 8009500:	20000254 	.word	0x20000254
 8009504:	20000256 	.word	0x20000256
 8009508:	20000258 	.word	0x20000258
 800950c:	50000100 	.word	0x50000100
 8009510:	20000098 	.word	0x20000098
 8009514:	2000025a 	.word	0x2000025a

08009518 <uart_debug_init>:
  HAL_UART_Receive(&huart2, &ch, 1, 0xffff);
  return ch;
}

void uart_debug_init(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	af00      	add	r7, sp, #0

  HAL_UART_Transmit_IT(&huart2, (uint8_t *)StaMessages, sizeof(StaMessages));
 800951c:	2204      	movs	r2, #4
 800951e:	4905      	ldr	r1, [pc, #20]	; (8009534 <uart_debug_init+0x1c>)
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <uart_debug_init+0x20>)
 8009522:	f7fe fb83 	bl	8007c2c <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 8009526:	2201      	movs	r2, #1
 8009528:	4904      	ldr	r1, [pc, #16]	; (800953c <uart_debug_init+0x24>)
 800952a:	4803      	ldr	r0, [pc, #12]	; (8009538 <uart_debug_init+0x20>)
 800952c:	f7fe fc02 	bl	8007d34 <HAL_UART_Receive_IT>
}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}
 8009534:	2000000c 	.word	0x2000000c
 8009538:	2000019c 	.word	0x2000019c
 800953c:	2000025c 	.word	0x2000025c

08009540 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart2, (uint8_t *)RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 8009548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800954c:	2201      	movs	r2, #1
 800954e:	4906      	ldr	r1, [pc, #24]	; (8009568 <HAL_UART_RxCpltCallback+0x28>)
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <HAL_UART_RxCpltCallback+0x2c>)
 8009552:	f7fe fad5 	bl	8007b00 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 8009556:	2201      	movs	r2, #1
 8009558:	4903      	ldr	r1, [pc, #12]	; (8009568 <HAL_UART_RxCpltCallback+0x28>)
 800955a:	4804      	ldr	r0, [pc, #16]	; (800956c <HAL_UART_RxCpltCallback+0x2c>)
 800955c:	f7fe fbea 	bl	8007d34 <HAL_UART_Receive_IT>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	2000025c 	.word	0x2000025c
 800956c:	2000019c 	.word	0x2000019c

08009570 <FOC_hardware_init>:
#include "debug.h"
#include "PWM_Encoder.h"
FOC_Def FOC;

void FOC_hardware_init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
    PWM_ADC_init();
 8009574:	f000 fba4 	bl	8009cc0 <PWM_ADC_init>
}
 8009578:	bf00      	nop
 800957a:	bd80      	pop	{r7, pc}

0800957c <inverseParkTransform>:
park逆变换，输入Uq、Ud得到Ualpha、Ubeta
Uα = Ud · cosθ - Uq · sinθ
Uβ = Ud · sinθ + Uq · cosθ
**********************************************************************************************************/
void inverseParkTransform(DQ_Def *dq, AlphaBeta_Def *alphaBeta, float angle)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	ed87 0a01 	vstr	s0, [r7, #4]
    float cosAngle = cos(angle);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7f7 f8d2 	bl	8000734 <__aeabi_f2d>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	ec43 2b10 	vmov	d0, r2, r3
 8009598:	f000 fc82 	bl	8009ea0 <cos>
 800959c:	ec53 2b10 	vmov	r2, r3, d0
 80095a0:	4610      	mov	r0, r2
 80095a2:	4619      	mov	r1, r3
 80095a4:	f7f7 f9ce 	bl	8000944 <__aeabi_d2f>
 80095a8:	4603      	mov	r3, r0
 80095aa:	617b      	str	r3, [r7, #20]
    float sinAngle = sin(angle);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f7 f8c1 	bl	8000734 <__aeabi_f2d>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	ec43 2b10 	vmov	d0, r2, r3
 80095ba:	f000 fcc5 	bl	8009f48 <sin>
 80095be:	ec53 2b10 	vmov	r2, r3, d0
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	f7f7 f9bd 	bl	8000944 <__aeabi_d2f>
 80095ca:	4603      	mov	r3, r0
 80095cc:	613b      	str	r3, [r7, #16]

    alphaBeta->alpha = dq->d * cosAngle - dq->q * sinAngle;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	ed93 7a00 	vldr	s14, [r3]
 80095d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80095d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	edd3 6a01 	vldr	s13, [r3, #4]
 80095e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80095e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	edc3 7a00 	vstr	s15, [r3]
    alphaBeta->beta = dq->d * sinAngle + dq->q * cosAngle;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	ed93 7a00 	vldr	s14, [r3]
 80095fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80095fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	edd3 6a01 	vldr	s13, [r3, #4]
 8009608:	edd7 7a05 	vldr	s15, [r7, #20]
 800960c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <SVPWM>:
/**********************************************************************************************************
将坐标变换中的反Park变换得到的 Valpha 、Vbeta 转换六路PWM输出。

**********************************************************************************************************/
void SVPWM(AlphaBeta_Def *U_alphaBeta, SVPWM_Def *svpwm)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
    float sum;
    float k_svpwm;

    svpwm->Ts = 1.0f; // SVPWM的采样周期
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009634:	625a      	str	r2, [r3, #36]	; 0x24

    svpwm->U_alpha = U_alphaBeta->alpha;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	601a      	str	r2, [r3, #0]
    svpwm->U_beta = U_alphaBeta->beta;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	605a      	str	r2, [r3, #4]

    // step1 计算u1、u2和u3
    // 计算SVPWM算法中的三个控制电压u1、u2和u3
    svpwm->u1 = U_alphaBeta->beta;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	60da      	str	r2, [r3, #12]
    svpwm->u2 = -0.8660254f * U_alphaBeta->alpha - 0.5f * U_alphaBeta->beta; // sqrt(3)/2 ≈ 0.86603
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	edd3 7a00 	vldr	s15, [r3]
 8009654:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80098d4 <SVPWM+0x2b0>
 8009658:	ee27 7a87 	vmul.f32	s14, s15, s14
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009662:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009666:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800966a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	edc3 7a04 	vstr	s15, [r3, #16]
    svpwm->u3 = 0.8660254f * U_alphaBeta->alpha - 0.5f * U_alphaBeta->beta;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	edd3 7a00 	vldr	s15, [r3]
 800967a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80098d8 <SVPWM+0x2b4>
 800967e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	edd3 7a01 	vldr	s15, [r3, #4]
 8009688:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800968c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	edc3 7a05 	vstr	s15, [r3, #20]
    // step2：扇区判断
    // 根据u1、u2和u3的正负情况确定所处的扇区
    svpwm->sector = (svpwm->u1 > 0.0f) + ((svpwm->u2 > 0.0f) << 1) + ((svpwm->u3 > 0.0f) << 2); // N=4*C+2*B+A
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	edd3 7a03 	vldr	s15, [r3, #12]
 80096a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a8:	bfcc      	ite	gt
 80096aa:	2301      	movgt	r3, #1
 80096ac:	2300      	movle	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80096b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	dd01      	ble.n	80096c6 <SVPWM+0xa2>
 80096c2:	2302      	movs	r3, #2
 80096c4:	e000      	b.n	80096c8 <SVPWM+0xa4>
 80096c6:	2300      	movs	r3, #0
 80096c8:	4413      	add	r3, r2
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	edd2 7a05 	vldr	s15, [r2, #20]
 80096d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d8:	dd01      	ble.n	80096de <SVPWM+0xba>
 80096da:	2204      	movs	r2, #4
 80096dc:	e000      	b.n	80096e0 <SVPWM+0xbc>
 80096de:	2200      	movs	r2, #0
 80096e0:	441a      	add	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	609a      	str	r2, [r3, #8]

    // step3:计算基本矢量电压作用时间（占空比）
    // 根据扇区的不同，计算对应的t_a、t_b和t_c的值，表示生成的三相电压的时间
    switch (svpwm->sector)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	2b05      	cmp	r3, #5
 80096ee:	f200 82b9 	bhi.w	8009c64 <SVPWM+0x640>
 80096f2:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <SVPWM+0xd4>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	080097eb 	.word	0x080097eb
 80096fc:	080099b7 	.word	0x080099b7
 8009700:	080098dd 	.word	0x080098dd
 8009704:	08009b7b 	.word	0x08009b7b
 8009708:	08009711 	.word	0x08009711
 800970c:	08009aa1 	.word	0x08009aa1
    {
    case 5:
        // 扇区5
        svpwm->t4 = svpwm->u3;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695a      	ldr	r2, [r3, #20]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
        svpwm->t6 = svpwm->u1;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	641a      	str	r2, [r3, #64]	; 0x40
        sum = svpwm->t4 + svpwm->t6;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800972c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009730:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800973a:	ed97 7a03 	vldr	s14, [r7, #12]
 800973e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	dd1c      	ble.n	8009782 <SVPWM+0x15e>
        {
            k_svpwm = svpwm->Ts / sum; //
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800974e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009756:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t4 = k_svpwm * svpwm->t4;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009760:	edd7 7a02 	vldr	s15, [r7, #8]
 8009764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            svpwm->t6 = k_svpwm * svpwm->t6;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009774:	edd7 7a02 	vldr	s15, [r7, #8]
 8009778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t4 - svpwm->t6) / 2;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800978e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800979c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80097a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t4 + svpwm->t6 + svpwm->t7;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80097b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80097c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t6 + svpwm->t7;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80097d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t7;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	621a      	str	r2, [r3, #32]
        break;
 80097e8:	e23d      	b.n	8009c66 <SVPWM+0x642>
    case 1:
        // 扇区1
        svpwm->t2 = -svpwm->u3;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80097f0:	eef1 7a67 	vneg.f32	s15, s15
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        svpwm->t6 = -svpwm->u2;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8009800:	eef1 7a67 	vneg.f32	s15, s15
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        sum = svpwm->t2 + svpwm->t6;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800981a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009824:	ed97 7a03 	vldr	s14, [r7, #12]
 8009828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	dd1c      	ble.n	800986c <SVPWM+0x248>
        {
            k_svpwm = svpwm->Ts / sum; // 计算缩放系数
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009838:	ed97 7a03 	vldr	s14, [r7, #12]
 800983c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009840:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t2 = k_svpwm * svpwm->t2;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800984a:	edd7 7a02 	vldr	s15, [r7, #8]
 800984e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            svpwm->t6 = k_svpwm * svpwm->t6;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800985e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t2 - svpwm->t6) / 2;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009886:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800988a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t6 + svpwm->t7;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80098a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t2 + svpwm->t6 + svpwm->t7;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80098b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80098c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t7;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	621a      	str	r2, [r3, #32]
        break;
 80098d2:	e1c8      	b.n	8009c66 <SVPWM+0x642>
 80098d4:	bf5db3d7 	.word	0xbf5db3d7
 80098d8:	3f5db3d7 	.word	0x3f5db3d7
    case 3:
        // 扇区3
        svpwm->t2 = svpwm->u1;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	631a      	str	r2, [r3, #48]	; 0x30
        svpwm->t3 = svpwm->u2;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	635a      	str	r2, [r3, #52]	; 0x34
        sum = svpwm->t2 + svpwm->t3;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80098f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098fc:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009906:	ed97 7a03 	vldr	s14, [r7, #12]
 800990a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	dd1c      	ble.n	800994e <SVPWM+0x32a>
        {
            k_svpwm = svpwm->Ts / sum; //
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800991a:	ed97 7a03 	vldr	s14, [r7, #12]
 800991e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009922:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t2 = k_svpwm * svpwm->t2;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800992c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            svpwm->t3 = k_svpwm * svpwm->t3;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009940:	edd7 7a02 	vldr	s15, [r7, #8]
 8009944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t2 - svpwm->t3) / 2;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800995a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800996c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t7;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	619a      	str	r2, [r3, #24]
        svpwm->tb = svpwm->t2 + svpwm->t3 + svpwm->t7;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800998a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t3 + svpwm->t7;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80099aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 80099b4:	e157      	b.n	8009c66 <SVPWM+0x642>

    case 2:
        // 扇区2
        svpwm->t1 = -svpwm->u1;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80099bc:	eef1 7a67 	vneg.f32	s15, s15
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        svpwm->t3 = -svpwm->u3;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80099cc:	eef1 7a67 	vneg.f32	s15, s15
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        sum = svpwm->t1 + svpwm->t3;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80099e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099e6:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80099f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80099f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fc:	dd1c      	ble.n	8009a38 <SVPWM+0x414>
        {
            k_svpwm = svpwm->Ts / sum; //
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009a04:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a0c:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t1 = k_svpwm * svpwm->t1;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            svpwm->t3 = k_svpwm * svpwm->t3;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t1 - svpwm->t3) / 2;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t7;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	619a      	str	r2, [r3, #24]
        svpwm->tb = svpwm->t3 + svpwm->t7;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t1 + svpwm->t3 + svpwm->t7;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 8009a9e:	e0e2      	b.n	8009c66 <SVPWM+0x642>

    case 6:
        // 扇区6
        svpwm->t1 = svpwm->u2;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	62da      	str	r2, [r3, #44]	; 0x2c
        svpwm->t5 = svpwm->u3;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	695a      	ldr	r2, [r3, #20]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	63da      	str	r2, [r3, #60]	; 0x3c
        sum = svpwm->t1 + svpwm->t5;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ac0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009aca:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad6:	dd1c      	ble.n	8009b12 <SVPWM+0x4ee>
        {
            k_svpwm = svpwm->Ts / sum; //
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009ade:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae6:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t1 = k_svpwm * svpwm->t1;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8009af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            svpwm->t5 = k_svpwm * svpwm->t5;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009b04:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t1 - svpwm->t5) / 2;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009b28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t5 + svpwm->t7;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t7;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	61da      	str	r2, [r3, #28]
        svpwm->tc = svpwm->t1 + svpwm->t5 + svpwm->t7;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 8009b78:	e075      	b.n	8009c66 <SVPWM+0x642>

    case 4:
        // 扇区4
        svpwm->t4 = -svpwm->u2;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009b80:	eef1 7a67 	vneg.f32	s15, s15
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        svpwm->t5 = -svpwm->u1;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009b90:	eef1 7a67 	vneg.f32	s15, s15
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        sum = svpwm->t4 + svpwm->t5;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009baa:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8009bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc0:	dd1c      	ble.n	8009bfc <SVPWM+0x5d8>
        {
            k_svpwm = svpwm->Ts / sum; //
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8009bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd0:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t4 = k_svpwm * svpwm->t4;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            svpwm->t5 = k_svpwm * svpwm->t5;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t4 - svpwm->t5) / 2;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009c12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t4 + svpwm->t5 + svpwm->t7;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t7;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	61da      	str	r2, [r3, #28]
        svpwm->tc = svpwm->t5 + svpwm->t7;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 8009c62:	e000      	b.n	8009c66 <SVPWM+0x642>

    default:
        break;
 8009c64:	bf00      	nop
    }

    // step4：6路PWM输出
    set_PWM_value(PWM_PERIOD * svpwm->ta, PWM_PERIOD * svpwm->tb, PWM_PERIOD * svpwm->tc);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	edd3 7a06 	vldr	s15, [r3, #24]
 8009c6c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009cbc <SVPWM+0x698>
 8009c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c78:	ee17 3a90 	vmov	r3, s15
 8009c7c:	b298      	uxth	r0, r3
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	edd3 7a07 	vldr	s15, [r3, #28]
 8009c84:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009cbc <SVPWM+0x698>
 8009c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c90:	ee17 3a90 	vmov	r3, s15
 8009c94:	b299      	uxth	r1, r3
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8009c9c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009cbc <SVPWM+0x698>
 8009ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca8:	ee17 3a90 	vmov	r3, s15
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 f84a 	bl	8009d48 <set_PWM_value>
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	45311000 	.word	0x45311000

08009cc0 <PWM_ADC_init>:
extern TIM_HandleTypeDef htim1;
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;

void PWM_ADC_init(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8009cc4:	481d      	ldr	r0, [pc, #116]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cc6:	f7fb fd55 	bl	8005774 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8009cca:	2100      	movs	r1, #0
 8009ccc:	481b      	ldr	r0, [pc, #108]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cce:	f7fb fe15 	bl	80058fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8009cd2:	2104      	movs	r1, #4
 8009cd4:	4819      	ldr	r0, [pc, #100]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cd6:	f7fb fe11 	bl	80058fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8009cda:	2108      	movs	r1, #8
 8009cdc:	4817      	ldr	r0, [pc, #92]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cde:	f7fb fe0d 	bl	80058fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8009ce2:	210c      	movs	r1, #12
 8009ce4:	4815      	ldr	r0, [pc, #84]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009ce6:	f7fb fe09 	bl	80058fc <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8009cea:	2100      	movs	r1, #0
 8009cec:	4813      	ldr	r0, [pc, #76]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cee:	f7fd fb91 	bl	8007414 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4811      	ldr	r0, [pc, #68]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cf6:	f7fd fb8d 	bl	8007414 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8009cfa:	2108      	movs	r1, #8
 8009cfc:	480f      	ldr	r0, [pc, #60]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009cfe:	f7fd fb89 	bl	8007414 <HAL_TIMEx_PWMN_Start>

	HAL_ADCEx_InjectedStart(&hadc1);
 8009d02:	480f      	ldr	r0, [pc, #60]	; (8009d40 <PWM_ADC_init+0x80>)
 8009d04:	f7f9 fb4c 	bl	80033a0 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart(&hadc2);
 8009d08:	480e      	ldr	r0, [pc, #56]	; (8009d44 <PWM_ADC_init+0x84>)
 8009d0a:	f7f9 fb49 	bl	80033a0 <HAL_ADCEx_InjectedStart>
	__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_JEOC);
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <PWM_ADC_init+0x80>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <PWM_ADC_init+0x80>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0220 	orr.w	r2, r2, #32
 8009d1c:	605a      	str	r2, [r3, #4]
	__HAL_ADC_ENABLE_IT(&hadc2, ADC_IT_JEOC);
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <PWM_ADC_init+0x84>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <PWM_ADC_init+0x84>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0220 	orr.w	r2, r2, #32
 8009d2c:	605a      	str	r2, [r3, #4]

	//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, PWM_PERIOD - 1); // TIM1通道4的PWM配置  关联ADC采样时间 // 在PWM波的正中间采样
 8009d2e:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <PWM_ADC_init+0x7c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f44f 6231 	mov.w	r2, #2832	; 0xb10
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000104 	.word	0x20000104
 8009d40:	2000002c 	.word	0x2000002c
 8009d44:	20000098 	.word	0x20000098

08009d48 <set_PWM_value>:

void set_PWM_value(uint16_t pwm_u, uint16_t pwm_v, uint16_t pwm_w)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	80fb      	strh	r3, [r7, #6]
 8009d52:	460b      	mov	r3, r1
 8009d54:	80bb      	strh	r3, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_u);
 8009d5a:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <set_PWM_value+0x38>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	88fa      	ldrh	r2, [r7, #6]
 8009d60:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_v);
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <set_PWM_value+0x38>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	88ba      	ldrh	r2, [r7, #4]
 8009d68:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_w);
 8009d6a:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <set_PWM_value+0x38>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	887a      	ldrh	r2, [r7, #2]
 8009d70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	20000104 	.word	0x20000104

08009d84 <Motor_Align>:
#include "motor_function.h"
#include "PWM_Encoder.h"
#include "foc.h"

void Motor_Align(float ud) // 电机预定位，找电角度零点
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b09a      	sub	sp, #104	; 0x68
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	ed87 0a01 	vstr	s0, [r7, #4]
	float theta = 0;
 8009d8e:	f04f 0300 	mov.w	r3, #0
 8009d92:	667b      	str	r3, [r7, #100]	; 0x64
	DQ_Def align_dq;
	AlphaBeta_Def align_ab;
	SVPWM_Def svpwm_out;

	align_dq.d = ud;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	65fb      	str	r3, [r7, #92]	; 0x5c
	align_dq.q = 0.0f;
 8009d98:	f04f 0300 	mov.w	r3, #0
 8009d9c:	663b      	str	r3, [r7, #96]	; 0x60

	theta = 0;
 8009d9e:	f04f 0300 	mov.w	r3, #0
 8009da2:	667b      	str	r3, [r7, #100]	; 0x64
	inverseParkTransform(&align_dq, &align_ab, theta);
 8009da4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009da8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009dac:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8009db0:	4611      	mov	r1, r2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fbe2 	bl	800957c <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 8009db8:	f107 020c 	add.w	r2, r7, #12
 8009dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fc2e 	bl	8009624 <SVPWM>

	pwm_encoder.angle_rad_offset = pwm_encoder.duty * 2 * PI; // 获取当前机械角度
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <Motor_Align+0x64>)
 8009dca:	edd3 7a03 	vldr	s15, [r3, #12]
 8009dce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dd2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009dec <Motor_Align+0x68>
 8009dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dda:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <Motor_Align+0x64>)
 8009ddc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8009de0:	bf00      	nop
 8009de2:	3768      	adds	r7, #104	; 0x68
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000234 	.word	0x20000234
 8009dec:	40490fdb 	.word	0x40490fdb

08009df0 <motor_open_loop_control>:

void motor_open_loop_control(float uq) // 开环控制电机
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b09a      	sub	sp, #104	; 0x68
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	ed87 0a01 	vstr	s0, [r7, #4]

	float theta = 0.0f;
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	667b      	str	r3, [r7, #100]	; 0x64
	DQ_Def open_loop_dq;
	AlphaBeta_Def open_loop_ab;
	SVPWM_Def svpwm_out;

	open_loop_dq.d = 0.0f;
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	65fb      	str	r3, [r7, #92]	; 0x5c
	open_loop_dq.q = uq;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	663b      	str	r3, [r7, #96]	; 0x60

	Get_PWM_Encoder_Angles(); // 获取电角度
 8009e0a:	f7ff fae9 	bl	80093e0 <Get_PWM_Encoder_Angles>
	theta = pwm_encoder.electronic_angle;
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <motor_open_loop_control+0x50>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	667b      	str	r3, [r7, #100]	; 0x64
	inverseParkTransform(&open_loop_dq, &open_loop_ab, theta); // 电角度传入FOC SVPWM中
 8009e14:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009e18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e1c:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7ff fbaa 	bl	800957c <inverseParkTransform>
	SVPWM(&open_loop_ab, &svpwm_out);
 8009e28:	f107 020c 	add.w	r2, r7, #12
 8009e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fbf6 	bl	8009624 <SVPWM>
}
 8009e38:	bf00      	nop
 8009e3a:	3768      	adds	r7, #104	; 0x68
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000234 	.word	0x20000234

08009e44 <memset>:
 8009e44:	4402      	add	r2, r0
 8009e46:	4603      	mov	r3, r0
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d100      	bne.n	8009e4e <memset+0xa>
 8009e4c:	4770      	bx	lr
 8009e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e52:	e7f9      	b.n	8009e48 <memset+0x4>

08009e54 <__libc_init_array>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4d0d      	ldr	r5, [pc, #52]	; (8009e8c <__libc_init_array+0x38>)
 8009e58:	4c0d      	ldr	r4, [pc, #52]	; (8009e90 <__libc_init_array+0x3c>)
 8009e5a:	1b64      	subs	r4, r4, r5
 8009e5c:	10a4      	asrs	r4, r4, #2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	42a6      	cmp	r6, r4
 8009e62:	d109      	bne.n	8009e78 <__libc_init_array+0x24>
 8009e64:	4d0b      	ldr	r5, [pc, #44]	; (8009e94 <__libc_init_array+0x40>)
 8009e66:	4c0c      	ldr	r4, [pc, #48]	; (8009e98 <__libc_init_array+0x44>)
 8009e68:	f001 f8ae 	bl	800afc8 <_init>
 8009e6c:	1b64      	subs	r4, r4, r5
 8009e6e:	10a4      	asrs	r4, r4, #2
 8009e70:	2600      	movs	r6, #0
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	d105      	bne.n	8009e82 <__libc_init_array+0x2e>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7c:	4798      	blx	r3
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7ee      	b.n	8009e60 <__libc_init_array+0xc>
 8009e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e86:	4798      	blx	r3
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7f2      	b.n	8009e72 <__libc_init_array+0x1e>
 8009e8c:	0800b200 	.word	0x0800b200
 8009e90:	0800b200 	.word	0x0800b200
 8009e94:	0800b200 	.word	0x0800b200
 8009e98:	0800b204 	.word	0x0800b204
 8009e9c:	00000000 	.word	0x00000000

08009ea0 <cos>:
 8009ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ea2:	ec53 2b10 	vmov	r2, r3, d0
 8009ea6:	4826      	ldr	r0, [pc, #152]	; (8009f40 <cos+0xa0>)
 8009ea8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009eac:	4281      	cmp	r1, r0
 8009eae:	dc06      	bgt.n	8009ebe <cos+0x1e>
 8009eb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009f38 <cos+0x98>
 8009eb4:	b005      	add	sp, #20
 8009eb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eba:	f000 b89d 	b.w	8009ff8 <__kernel_cos>
 8009ebe:	4821      	ldr	r0, [pc, #132]	; (8009f44 <cos+0xa4>)
 8009ec0:	4281      	cmp	r1, r0
 8009ec2:	dd09      	ble.n	8009ed8 <cos+0x38>
 8009ec4:	ee10 0a10 	vmov	r0, s0
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f7f6 fad3 	bl	8000474 <__aeabi_dsub>
 8009ece:	ec41 0b10 	vmov	d0, r0, r1
 8009ed2:	b005      	add	sp, #20
 8009ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ed8:	4668      	mov	r0, sp
 8009eda:	f000 fa15 	bl	800a308 <__ieee754_rem_pio2>
 8009ede:	f000 0003 	and.w	r0, r0, #3
 8009ee2:	2801      	cmp	r0, #1
 8009ee4:	d00b      	beq.n	8009efe <cos+0x5e>
 8009ee6:	2802      	cmp	r0, #2
 8009ee8:	d016      	beq.n	8009f18 <cos+0x78>
 8009eea:	b9e0      	cbnz	r0, 8009f26 <cos+0x86>
 8009eec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ef0:	ed9d 0b00 	vldr	d0, [sp]
 8009ef4:	f000 f880 	bl	8009ff8 <__kernel_cos>
 8009ef8:	ec51 0b10 	vmov	r0, r1, d0
 8009efc:	e7e7      	b.n	8009ece <cos+0x2e>
 8009efe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f02:	ed9d 0b00 	vldr	d0, [sp]
 8009f06:	f000 f93f 	bl	800a188 <__kernel_sin>
 8009f0a:	ec53 2b10 	vmov	r2, r3, d0
 8009f0e:	ee10 0a10 	vmov	r0, s0
 8009f12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f16:	e7da      	b.n	8009ece <cos+0x2e>
 8009f18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f1c:	ed9d 0b00 	vldr	d0, [sp]
 8009f20:	f000 f86a 	bl	8009ff8 <__kernel_cos>
 8009f24:	e7f1      	b.n	8009f0a <cos+0x6a>
 8009f26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f2a:	ed9d 0b00 	vldr	d0, [sp]
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f000 f92a 	bl	800a188 <__kernel_sin>
 8009f34:	e7e0      	b.n	8009ef8 <cos+0x58>
 8009f36:	bf00      	nop
	...
 8009f40:	3fe921fb 	.word	0x3fe921fb
 8009f44:	7fefffff 	.word	0x7fefffff

08009f48 <sin>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	ec53 2b10 	vmov	r2, r3, d0
 8009f4e:	4828      	ldr	r0, [pc, #160]	; (8009ff0 <sin+0xa8>)
 8009f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f54:	4281      	cmp	r1, r0
 8009f56:	dc07      	bgt.n	8009f68 <sin+0x20>
 8009f58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009fe8 <sin+0xa0>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	b005      	add	sp, #20
 8009f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f64:	f000 b910 	b.w	800a188 <__kernel_sin>
 8009f68:	4822      	ldr	r0, [pc, #136]	; (8009ff4 <sin+0xac>)
 8009f6a:	4281      	cmp	r1, r0
 8009f6c:	dd09      	ble.n	8009f82 <sin+0x3a>
 8009f6e:	ee10 0a10 	vmov	r0, s0
 8009f72:	4619      	mov	r1, r3
 8009f74:	f7f6 fa7e 	bl	8000474 <__aeabi_dsub>
 8009f78:	ec41 0b10 	vmov	d0, r0, r1
 8009f7c:	b005      	add	sp, #20
 8009f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f82:	4668      	mov	r0, sp
 8009f84:	f000 f9c0 	bl	800a308 <__ieee754_rem_pio2>
 8009f88:	f000 0003 	and.w	r0, r0, #3
 8009f8c:	2801      	cmp	r0, #1
 8009f8e:	d00c      	beq.n	8009faa <sin+0x62>
 8009f90:	2802      	cmp	r0, #2
 8009f92:	d011      	beq.n	8009fb8 <sin+0x70>
 8009f94:	b9f0      	cbnz	r0, 8009fd4 <sin+0x8c>
 8009f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f9a:	ed9d 0b00 	vldr	d0, [sp]
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f000 f8f2 	bl	800a188 <__kernel_sin>
 8009fa4:	ec51 0b10 	vmov	r0, r1, d0
 8009fa8:	e7e6      	b.n	8009f78 <sin+0x30>
 8009faa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fae:	ed9d 0b00 	vldr	d0, [sp]
 8009fb2:	f000 f821 	bl	8009ff8 <__kernel_cos>
 8009fb6:	e7f5      	b.n	8009fa4 <sin+0x5c>
 8009fb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fbc:	ed9d 0b00 	vldr	d0, [sp]
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	f000 f8e1 	bl	800a188 <__kernel_sin>
 8009fc6:	ec53 2b10 	vmov	r2, r3, d0
 8009fca:	ee10 0a10 	vmov	r0, s0
 8009fce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fd2:	e7d1      	b.n	8009f78 <sin+0x30>
 8009fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fd8:	ed9d 0b00 	vldr	d0, [sp]
 8009fdc:	f000 f80c 	bl	8009ff8 <__kernel_cos>
 8009fe0:	e7f1      	b.n	8009fc6 <sin+0x7e>
 8009fe2:	bf00      	nop
 8009fe4:	f3af 8000 	nop.w
	...
 8009ff0:	3fe921fb 	.word	0x3fe921fb
 8009ff4:	7fefffff 	.word	0x7fefffff

08009ff8 <__kernel_cos>:
 8009ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	ec57 6b10 	vmov	r6, r7, d0
 800a000:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a004:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a008:	ed8d 1b00 	vstr	d1, [sp]
 800a00c:	da07      	bge.n	800a01e <__kernel_cos+0x26>
 800a00e:	ee10 0a10 	vmov	r0, s0
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 fc6e 	bl	80008f4 <__aeabi_d2iz>
 800a018:	2800      	cmp	r0, #0
 800a01a:	f000 8088 	beq.w	800a12e <__kernel_cos+0x136>
 800a01e:	4632      	mov	r2, r6
 800a020:	463b      	mov	r3, r7
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 f8f7 	bl	8000218 <__aeabi_dmul>
 800a02a:	4b51      	ldr	r3, [pc, #324]	; (800a170 <__kernel_cos+0x178>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	460d      	mov	r5, r1
 800a032:	f7f6 f8f1 	bl	8000218 <__aeabi_dmul>
 800a036:	a340      	add	r3, pc, #256	; (adr r3, 800a138 <__kernel_cos+0x140>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	4682      	mov	sl, r0
 800a03e:	468b      	mov	fp, r1
 800a040:	4620      	mov	r0, r4
 800a042:	4629      	mov	r1, r5
 800a044:	f7f6 f8e8 	bl	8000218 <__aeabi_dmul>
 800a048:	a33d      	add	r3, pc, #244	; (adr r3, 800a140 <__kernel_cos+0x148>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 fa13 	bl	8000478 <__adddf3>
 800a052:	4622      	mov	r2, r4
 800a054:	462b      	mov	r3, r5
 800a056:	f7f6 f8df 	bl	8000218 <__aeabi_dmul>
 800a05a:	a33b      	add	r3, pc, #236	; (adr r3, 800a148 <__kernel_cos+0x150>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 fa08 	bl	8000474 <__aeabi_dsub>
 800a064:	4622      	mov	r2, r4
 800a066:	462b      	mov	r3, r5
 800a068:	f7f6 f8d6 	bl	8000218 <__aeabi_dmul>
 800a06c:	a338      	add	r3, pc, #224	; (adr r3, 800a150 <__kernel_cos+0x158>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 fa01 	bl	8000478 <__adddf3>
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	f7f6 f8cd 	bl	8000218 <__aeabi_dmul>
 800a07e:	a336      	add	r3, pc, #216	; (adr r3, 800a158 <__kernel_cos+0x160>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f7f6 f9f6 	bl	8000474 <__aeabi_dsub>
 800a088:	4622      	mov	r2, r4
 800a08a:	462b      	mov	r3, r5
 800a08c:	f7f6 f8c4 	bl	8000218 <__aeabi_dmul>
 800a090:	a333      	add	r3, pc, #204	; (adr r3, 800a160 <__kernel_cos+0x168>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 f9ef 	bl	8000478 <__adddf3>
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 f8bb 	bl	8000218 <__aeabi_dmul>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	f7f6 f8b7 	bl	8000218 <__aeabi_dmul>
 800a0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 f8af 	bl	8000218 <__aeabi_dmul>
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4602      	mov	r2, r0
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7f6 f9d7 	bl	8000474 <__aeabi_dsub>
 800a0c6:	4b2b      	ldr	r3, [pc, #172]	; (800a174 <__kernel_cos+0x17c>)
 800a0c8:	4598      	cmp	r8, r3
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	dc10      	bgt.n	800a0f2 <__kernel_cos+0xfa>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	f7f6 f9cc 	bl	8000474 <__aeabi_dsub>
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4926      	ldr	r1, [pc, #152]	; (800a178 <__kernel_cos+0x180>)
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	f7f6 f9c6 	bl	8000474 <__aeabi_dsub>
 800a0e8:	ec41 0b10 	vmov	d0, r0, r1
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	4b22      	ldr	r3, [pc, #136]	; (800a17c <__kernel_cos+0x184>)
 800a0f4:	4920      	ldr	r1, [pc, #128]	; (800a178 <__kernel_cos+0x180>)
 800a0f6:	4598      	cmp	r8, r3
 800a0f8:	bfcc      	ite	gt
 800a0fa:	4d21      	ldrgt	r5, [pc, #132]	; (800a180 <__kernel_cos+0x188>)
 800a0fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a100:	2400      	movs	r4, #0
 800a102:	4622      	mov	r2, r4
 800a104:	462b      	mov	r3, r5
 800a106:	2000      	movs	r0, #0
 800a108:	f7f6 f9b4 	bl	8000474 <__aeabi_dsub>
 800a10c:	4622      	mov	r2, r4
 800a10e:	4680      	mov	r8, r0
 800a110:	4689      	mov	r9, r1
 800a112:	462b      	mov	r3, r5
 800a114:	4650      	mov	r0, sl
 800a116:	4659      	mov	r1, fp
 800a118:	f7f6 f9ac 	bl	8000474 <__aeabi_dsub>
 800a11c:	4632      	mov	r2, r6
 800a11e:	463b      	mov	r3, r7
 800a120:	f7f6 f9a8 	bl	8000474 <__aeabi_dsub>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	e7da      	b.n	800a0e4 <__kernel_cos+0xec>
 800a12e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a168 <__kernel_cos+0x170>
 800a132:	e7db      	b.n	800a0ec <__kernel_cos+0xf4>
 800a134:	f3af 8000 	nop.w
 800a138:	be8838d4 	.word	0xbe8838d4
 800a13c:	bda8fae9 	.word	0xbda8fae9
 800a140:	bdb4b1c4 	.word	0xbdb4b1c4
 800a144:	3e21ee9e 	.word	0x3e21ee9e
 800a148:	809c52ad 	.word	0x809c52ad
 800a14c:	3e927e4f 	.word	0x3e927e4f
 800a150:	19cb1590 	.word	0x19cb1590
 800a154:	3efa01a0 	.word	0x3efa01a0
 800a158:	16c15177 	.word	0x16c15177
 800a15c:	3f56c16c 	.word	0x3f56c16c
 800a160:	5555554c 	.word	0x5555554c
 800a164:	3fa55555 	.word	0x3fa55555
 800a168:	00000000 	.word	0x00000000
 800a16c:	3ff00000 	.word	0x3ff00000
 800a170:	3fe00000 	.word	0x3fe00000
 800a174:	3fd33332 	.word	0x3fd33332
 800a178:	3ff00000 	.word	0x3ff00000
 800a17c:	3fe90000 	.word	0x3fe90000
 800a180:	3fd20000 	.word	0x3fd20000
 800a184:	00000000 	.word	0x00000000

0800a188 <__kernel_sin>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b04 	vpush	{d8-d9}
 800a190:	eeb0 8a41 	vmov.f32	s16, s2
 800a194:	eef0 8a61 	vmov.f32	s17, s3
 800a198:	ec55 4b10 	vmov	r4, r5, d0
 800a19c:	b083      	sub	sp, #12
 800a19e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a1a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a1a6:	9001      	str	r0, [sp, #4]
 800a1a8:	da06      	bge.n	800a1b8 <__kernel_sin+0x30>
 800a1aa:	ee10 0a10 	vmov	r0, s0
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 fba0 	bl	80008f4 <__aeabi_d2iz>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d051      	beq.n	800a25c <__kernel_sin+0xd4>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 f82a 	bl	8000218 <__aeabi_dmul>
 800a1c4:	4682      	mov	sl, r0
 800a1c6:	468b      	mov	fp, r1
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7f6 f822 	bl	8000218 <__aeabi_dmul>
 800a1d4:	a341      	add	r3, pc, #260	; (adr r3, 800a2dc <__kernel_sin+0x154>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	4680      	mov	r8, r0
 800a1dc:	4689      	mov	r9, r1
 800a1de:	4650      	mov	r0, sl
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	f7f6 f819 	bl	8000218 <__aeabi_dmul>
 800a1e6:	a33f      	add	r3, pc, #252	; (adr r3, 800a2e4 <__kernel_sin+0x15c>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 f942 	bl	8000474 <__aeabi_dsub>
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	465b      	mov	r3, fp
 800a1f4:	f7f6 f810 	bl	8000218 <__aeabi_dmul>
 800a1f8:	a33c      	add	r3, pc, #240	; (adr r3, 800a2ec <__kernel_sin+0x164>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 f93b 	bl	8000478 <__adddf3>
 800a202:	4652      	mov	r2, sl
 800a204:	465b      	mov	r3, fp
 800a206:	f7f6 f807 	bl	8000218 <__aeabi_dmul>
 800a20a:	a33a      	add	r3, pc, #232	; (adr r3, 800a2f4 <__kernel_sin+0x16c>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f6 f930 	bl	8000474 <__aeabi_dsub>
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	f7f5 fffe 	bl	8000218 <__aeabi_dmul>
 800a21c:	a337      	add	r3, pc, #220	; (adr r3, 800a2fc <__kernel_sin+0x174>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f7f6 f929 	bl	8000478 <__adddf3>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	b9eb      	cbnz	r3, 800a26a <__kernel_sin+0xe2>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4650      	mov	r0, sl
 800a234:	4659      	mov	r1, fp
 800a236:	f7f5 ffef 	bl	8000218 <__aeabi_dmul>
 800a23a:	a325      	add	r3, pc, #148	; (adr r3, 800a2d0 <__kernel_sin+0x148>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f918 	bl	8000474 <__aeabi_dsub>
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	f7f5 ffe6 	bl	8000218 <__aeabi_dmul>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4620      	mov	r0, r4
 800a252:	4629      	mov	r1, r5
 800a254:	f7f6 f910 	bl	8000478 <__adddf3>
 800a258:	4604      	mov	r4, r0
 800a25a:	460d      	mov	r5, r1
 800a25c:	ec45 4b10 	vmov	d0, r4, r5
 800a260:	b003      	add	sp, #12
 800a262:	ecbd 8b04 	vpop	{d8-d9}
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <__kernel_sin+0x150>)
 800a26c:	ec51 0b18 	vmov	r0, r1, d8
 800a270:	2200      	movs	r2, #0
 800a272:	f7f5 ffd1 	bl	8000218 <__aeabi_dmul>
 800a276:	4632      	mov	r2, r6
 800a278:	ec41 0b19 	vmov	d9, r0, r1
 800a27c:	463b      	mov	r3, r7
 800a27e:	4640      	mov	r0, r8
 800a280:	4649      	mov	r1, r9
 800a282:	f7f5 ffc9 	bl	8000218 <__aeabi_dmul>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	ec51 0b19 	vmov	r0, r1, d9
 800a28e:	f7f6 f8f1 	bl	8000474 <__aeabi_dsub>
 800a292:	4652      	mov	r2, sl
 800a294:	465b      	mov	r3, fp
 800a296:	f7f5 ffbf 	bl	8000218 <__aeabi_dmul>
 800a29a:	ec53 2b18 	vmov	r2, r3, d8
 800a29e:	f7f6 f8e9 	bl	8000474 <__aeabi_dsub>
 800a2a2:	a30b      	add	r3, pc, #44	; (adr r3, 800a2d0 <__kernel_sin+0x148>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	f7f5 ffb2 	bl	8000218 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	f7f6 f8dc 	bl	8000478 <__adddf3>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 f8d4 	bl	8000474 <__aeabi_dsub>
 800a2cc:	e7c4      	b.n	800a258 <__kernel_sin+0xd0>
 800a2ce:	bf00      	nop
 800a2d0:	55555549 	.word	0x55555549
 800a2d4:	3fc55555 	.word	0x3fc55555
 800a2d8:	3fe00000 	.word	0x3fe00000
 800a2dc:	5acfd57c 	.word	0x5acfd57c
 800a2e0:	3de5d93a 	.word	0x3de5d93a
 800a2e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a2e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a2ec:	57b1fe7d 	.word	0x57b1fe7d
 800a2f0:	3ec71de3 	.word	0x3ec71de3
 800a2f4:	19c161d5 	.word	0x19c161d5
 800a2f8:	3f2a01a0 	.word	0x3f2a01a0
 800a2fc:	1110f8a6 	.word	0x1110f8a6
 800a300:	3f811111 	.word	0x3f811111
 800a304:	00000000 	.word	0x00000000

0800a308 <__ieee754_rem_pio2>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ed2d 8b02 	vpush	{d8}
 800a310:	ec55 4b10 	vmov	r4, r5, d0
 800a314:	4bca      	ldr	r3, [pc, #808]	; (800a640 <__ieee754_rem_pio2+0x338>)
 800a316:	b08b      	sub	sp, #44	; 0x2c
 800a318:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a31c:	4598      	cmp	r8, r3
 800a31e:	4682      	mov	sl, r0
 800a320:	9502      	str	r5, [sp, #8]
 800a322:	dc08      	bgt.n	800a336 <__ieee754_rem_pio2+0x2e>
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	ed80 0b00 	vstr	d0, [r0]
 800a32c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a330:	f04f 0b00 	mov.w	fp, #0
 800a334:	e028      	b.n	800a388 <__ieee754_rem_pio2+0x80>
 800a336:	4bc3      	ldr	r3, [pc, #780]	; (800a644 <__ieee754_rem_pio2+0x33c>)
 800a338:	4598      	cmp	r8, r3
 800a33a:	dc78      	bgt.n	800a42e <__ieee754_rem_pio2+0x126>
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	4ec2      	ldr	r6, [pc, #776]	; (800a648 <__ieee754_rem_pio2+0x340>)
 800a340:	2b00      	cmp	r3, #0
 800a342:	ee10 0a10 	vmov	r0, s0
 800a346:	a3b0      	add	r3, pc, #704	; (adr r3, 800a608 <__ieee754_rem_pio2+0x300>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	4629      	mov	r1, r5
 800a34e:	dd39      	ble.n	800a3c4 <__ieee754_rem_pio2+0xbc>
 800a350:	f7f6 f890 	bl	8000474 <__aeabi_dsub>
 800a354:	45b0      	cmp	r8, r6
 800a356:	4604      	mov	r4, r0
 800a358:	460d      	mov	r5, r1
 800a35a:	d01b      	beq.n	800a394 <__ieee754_rem_pio2+0x8c>
 800a35c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f6 f887 	bl	8000474 <__aeabi_dsub>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9ca 2300 	strd	r2, r3, [sl]
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f6 f87f 	bl	8000474 <__aeabi_dsub>
 800a376:	a3a6      	add	r3, pc, #664	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f6 f87a 	bl	8000474 <__aeabi_dsub>
 800a380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a384:	f04f 0b01 	mov.w	fp, #1
 800a388:	4658      	mov	r0, fp
 800a38a:	b00b      	add	sp, #44	; 0x2c
 800a38c:	ecbd 8b02 	vpop	{d8}
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	a3a0      	add	r3, pc, #640	; (adr r3, 800a618 <__ieee754_rem_pio2+0x310>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f6 f86b 	bl	8000474 <__aeabi_dsub>
 800a39e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a620 <__ieee754_rem_pio2+0x318>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	f7f6 f864 	bl	8000474 <__aeabi_dsub>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e9ca 2300 	strd	r2, r3, [sl]
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f6 f85c 	bl	8000474 <__aeabi_dsub>
 800a3bc:	a398      	add	r3, pc, #608	; (adr r3, 800a620 <__ieee754_rem_pio2+0x318>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	e7db      	b.n	800a37c <__ieee754_rem_pio2+0x74>
 800a3c4:	f7f6 f858 	bl	8000478 <__adddf3>
 800a3c8:	45b0      	cmp	r8, r6
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	d016      	beq.n	800a3fe <__ieee754_rem_pio2+0xf6>
 800a3d0:	a38f      	add	r3, pc, #572	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f84f 	bl	8000478 <__adddf3>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	e9ca 2300 	strd	r2, r3, [sl]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7f6 f845 	bl	8000474 <__aeabi_dsub>
 800a3ea:	a389      	add	r3, pc, #548	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f6 f842 	bl	8000478 <__adddf3>
 800a3f4:	f04f 3bff 	mov.w	fp, #4294967295
 800a3f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3fc:	e7c4      	b.n	800a388 <__ieee754_rem_pio2+0x80>
 800a3fe:	a386      	add	r3, pc, #536	; (adr r3, 800a618 <__ieee754_rem_pio2+0x310>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	f7f6 f838 	bl	8000478 <__adddf3>
 800a408:	a385      	add	r3, pc, #532	; (adr r3, 800a620 <__ieee754_rem_pio2+0x318>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	4604      	mov	r4, r0
 800a410:	460d      	mov	r5, r1
 800a412:	f7f6 f831 	bl	8000478 <__adddf3>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	e9ca 2300 	strd	r2, r3, [sl]
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f6 f827 	bl	8000474 <__aeabi_dsub>
 800a426:	a37e      	add	r3, pc, #504	; (adr r3, 800a620 <__ieee754_rem_pio2+0x318>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	e7e0      	b.n	800a3f0 <__ieee754_rem_pio2+0xe8>
 800a42e:	4b87      	ldr	r3, [pc, #540]	; (800a64c <__ieee754_rem_pio2+0x344>)
 800a430:	4598      	cmp	r8, r3
 800a432:	f300 80d8 	bgt.w	800a5e6 <__ieee754_rem_pio2+0x2de>
 800a436:	f000 f96d 	bl	800a714 <fabs>
 800a43a:	ec55 4b10 	vmov	r4, r5, d0
 800a43e:	ee10 0a10 	vmov	r0, s0
 800a442:	a379      	add	r3, pc, #484	; (adr r3, 800a628 <__ieee754_rem_pio2+0x320>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4629      	mov	r1, r5
 800a44a:	f7f5 fee5 	bl	8000218 <__aeabi_dmul>
 800a44e:	4b80      	ldr	r3, [pc, #512]	; (800a650 <__ieee754_rem_pio2+0x348>)
 800a450:	2200      	movs	r2, #0
 800a452:	f7f6 f811 	bl	8000478 <__adddf3>
 800a456:	f7f6 fa4d 	bl	80008f4 <__aeabi_d2iz>
 800a45a:	4683      	mov	fp, r0
 800a45c:	f7f6 f958 	bl	8000710 <__aeabi_i2d>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	ec43 2b18 	vmov	d8, r2, r3
 800a468:	a367      	add	r3, pc, #412	; (adr r3, 800a608 <__ieee754_rem_pio2+0x300>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f7f5 fed3 	bl	8000218 <__aeabi_dmul>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4620      	mov	r0, r4
 800a478:	4629      	mov	r1, r5
 800a47a:	f7f5 fffb 	bl	8000474 <__aeabi_dsub>
 800a47e:	a364      	add	r3, pc, #400	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	4606      	mov	r6, r0
 800a486:	460f      	mov	r7, r1
 800a488:	ec51 0b18 	vmov	r0, r1, d8
 800a48c:	f7f5 fec4 	bl	8000218 <__aeabi_dmul>
 800a490:	f1bb 0f1f 	cmp.w	fp, #31
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	dc0d      	bgt.n	800a4b6 <__ieee754_rem_pio2+0x1ae>
 800a49a:	4b6e      	ldr	r3, [pc, #440]	; (800a654 <__ieee754_rem_pio2+0x34c>)
 800a49c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a4:	4543      	cmp	r3, r8
 800a4a6:	d006      	beq.n	800a4b6 <__ieee754_rem_pio2+0x1ae>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f5 ffe0 	bl	8000474 <__aeabi_dsub>
 800a4b4:	e00e      	b.n	800a4d4 <__ieee754_rem_pio2+0x1cc>
 800a4b6:	462b      	mov	r3, r5
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f5 ffd9 	bl	8000474 <__aeabi_dsub>
 800a4c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a4cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a4d0:	2b10      	cmp	r3, #16
 800a4d2:	dc02      	bgt.n	800a4da <__ieee754_rem_pio2+0x1d2>
 800a4d4:	e9ca 0100 	strd	r0, r1, [sl]
 800a4d8:	e039      	b.n	800a54e <__ieee754_rem_pio2+0x246>
 800a4da:	a34f      	add	r3, pc, #316	; (adr r3, 800a618 <__ieee754_rem_pio2+0x310>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	ec51 0b18 	vmov	r0, r1, d8
 800a4e4:	f7f5 fe98 	bl	8000218 <__aeabi_dmul>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 ffbe 	bl	8000474 <__aeabi_dsub>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	4689      	mov	r9, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f5 ffb6 	bl	8000474 <__aeabi_dsub>
 800a508:	4622      	mov	r2, r4
 800a50a:	462b      	mov	r3, r5
 800a50c:	f7f5 ffb2 	bl	8000474 <__aeabi_dsub>
 800a510:	a343      	add	r3, pc, #268	; (adr r3, 800a620 <__ieee754_rem_pio2+0x318>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	4604      	mov	r4, r0
 800a518:	460d      	mov	r5, r1
 800a51a:	ec51 0b18 	vmov	r0, r1, d8
 800a51e:	f7f5 fe7b 	bl	8000218 <__aeabi_dmul>
 800a522:	4622      	mov	r2, r4
 800a524:	462b      	mov	r3, r5
 800a526:	f7f5 ffa5 	bl	8000474 <__aeabi_dsub>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	f7f5 ff9d 	bl	8000474 <__aeabi_dsub>
 800a53a:	9a03      	ldr	r2, [sp, #12]
 800a53c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	2b31      	cmp	r3, #49	; 0x31
 800a544:	dc24      	bgt.n	800a590 <__ieee754_rem_pio2+0x288>
 800a546:	e9ca 0100 	strd	r0, r1, [sl]
 800a54a:	4646      	mov	r6, r8
 800a54c:	464f      	mov	r7, r9
 800a54e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a552:	4630      	mov	r0, r6
 800a554:	4642      	mov	r2, r8
 800a556:	464b      	mov	r3, r9
 800a558:	4639      	mov	r1, r7
 800a55a:	f7f5 ff8b 	bl	8000474 <__aeabi_dsub>
 800a55e:	462b      	mov	r3, r5
 800a560:	4622      	mov	r2, r4
 800a562:	f7f5 ff87 	bl	8000474 <__aeabi_dsub>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a56e:	f6bf af0b 	bge.w	800a388 <__ieee754_rem_pio2+0x80>
 800a572:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a576:	f8ca 3004 	str.w	r3, [sl, #4]
 800a57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a57e:	f8ca 8000 	str.w	r8, [sl]
 800a582:	f8ca 0008 	str.w	r0, [sl, #8]
 800a586:	f8ca 300c 	str.w	r3, [sl, #12]
 800a58a:	f1cb 0b00 	rsb	fp, fp, #0
 800a58e:	e6fb      	b.n	800a388 <__ieee754_rem_pio2+0x80>
 800a590:	a327      	add	r3, pc, #156	; (adr r3, 800a630 <__ieee754_rem_pio2+0x328>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	ec51 0b18 	vmov	r0, r1, d8
 800a59a:	f7f5 fe3d 	bl	8000218 <__aeabi_dmul>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	460d      	mov	r5, r1
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	f7f5 ff63 	bl	8000474 <__aeabi_dsub>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	f7f5 ff5b 	bl	8000474 <__aeabi_dsub>
 800a5be:	4622      	mov	r2, r4
 800a5c0:	462b      	mov	r3, r5
 800a5c2:	f7f5 ff57 	bl	8000474 <__aeabi_dsub>
 800a5c6:	a31c      	add	r3, pc, #112	; (adr r3, 800a638 <__ieee754_rem_pio2+0x330>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	ec51 0b18 	vmov	r0, r1, d8
 800a5d4:	f7f5 fe20 	bl	8000218 <__aeabi_dmul>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	462b      	mov	r3, r5
 800a5dc:	f7f5 ff4a 	bl	8000474 <__aeabi_dsub>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	e760      	b.n	800a4a8 <__ieee754_rem_pio2+0x1a0>
 800a5e6:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <__ieee754_rem_pio2+0x350>)
 800a5e8:	4598      	cmp	r8, r3
 800a5ea:	dd37      	ble.n	800a65c <__ieee754_rem_pio2+0x354>
 800a5ec:	ee10 2a10 	vmov	r2, s0
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7f5 ff3d 	bl	8000474 <__aeabi_dsub>
 800a5fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5fe:	e9ca 0100 	strd	r0, r1, [sl]
 800a602:	e695      	b.n	800a330 <__ieee754_rem_pio2+0x28>
 800a604:	f3af 8000 	nop.w
 800a608:	54400000 	.word	0x54400000
 800a60c:	3ff921fb 	.word	0x3ff921fb
 800a610:	1a626331 	.word	0x1a626331
 800a614:	3dd0b461 	.word	0x3dd0b461
 800a618:	1a600000 	.word	0x1a600000
 800a61c:	3dd0b461 	.word	0x3dd0b461
 800a620:	2e037073 	.word	0x2e037073
 800a624:	3ba3198a 	.word	0x3ba3198a
 800a628:	6dc9c883 	.word	0x6dc9c883
 800a62c:	3fe45f30 	.word	0x3fe45f30
 800a630:	2e000000 	.word	0x2e000000
 800a634:	3ba3198a 	.word	0x3ba3198a
 800a638:	252049c1 	.word	0x252049c1
 800a63c:	397b839a 	.word	0x397b839a
 800a640:	3fe921fb 	.word	0x3fe921fb
 800a644:	4002d97b 	.word	0x4002d97b
 800a648:	3ff921fb 	.word	0x3ff921fb
 800a64c:	413921fb 	.word	0x413921fb
 800a650:	3fe00000 	.word	0x3fe00000
 800a654:	0800b020 	.word	0x0800b020
 800a658:	7fefffff 	.word	0x7fefffff
 800a65c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a660:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a664:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a668:	4620      	mov	r0, r4
 800a66a:	460d      	mov	r5, r1
 800a66c:	f7f6 f942 	bl	80008f4 <__aeabi_d2iz>
 800a670:	f7f6 f84e 	bl	8000710 <__aeabi_i2d>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a680:	f7f5 fef8 	bl	8000474 <__aeabi_dsub>
 800a684:	4b21      	ldr	r3, [pc, #132]	; (800a70c <__ieee754_rem_pio2+0x404>)
 800a686:	2200      	movs	r2, #0
 800a688:	f7f5 fdc6 	bl	8000218 <__aeabi_dmul>
 800a68c:	460d      	mov	r5, r1
 800a68e:	4604      	mov	r4, r0
 800a690:	f7f6 f930 	bl	80008f4 <__aeabi_d2iz>
 800a694:	f7f6 f83c 	bl	8000710 <__aeabi_i2d>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4620      	mov	r0, r4
 800a69e:	4629      	mov	r1, r5
 800a6a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a6a4:	f7f5 fee6 	bl	8000474 <__aeabi_dsub>
 800a6a8:	4b18      	ldr	r3, [pc, #96]	; (800a70c <__ieee754_rem_pio2+0x404>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f7f5 fdb4 	bl	8000218 <__aeabi_dmul>
 800a6b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a6b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a6b8:	2703      	movs	r7, #3
 800a6ba:	2400      	movs	r4, #0
 800a6bc:	2500      	movs	r5, #0
 800a6be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	46b9      	mov	r9, r7
 800a6c8:	3f01      	subs	r7, #1
 800a6ca:	f7f6 f8e1 	bl	8000890 <__aeabi_dcmpeq>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d1f5      	bne.n	800a6be <__ieee754_rem_pio2+0x3b6>
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <__ieee754_rem_pio2+0x408>)
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	4632      	mov	r2, r6
 800a6dc:	464b      	mov	r3, r9
 800a6de:	4651      	mov	r1, sl
 800a6e0:	a804      	add	r0, sp, #16
 800a6e2:	f000 f821 	bl	800a728 <__kernel_rem_pio2>
 800a6e6:	9b02      	ldr	r3, [sp, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	4683      	mov	fp, r0
 800a6ec:	f6bf ae4c 	bge.w	800a388 <__ieee754_rem_pio2+0x80>
 800a6f0:	e9da 2100 	ldrd	r2, r1, [sl]
 800a6f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6f8:	e9ca 2300 	strd	r2, r3, [sl]
 800a6fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a704:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a708:	e73f      	b.n	800a58a <__ieee754_rem_pio2+0x282>
 800a70a:	bf00      	nop
 800a70c:	41700000 	.word	0x41700000
 800a710:	0800b0a0 	.word	0x0800b0a0

0800a714 <fabs>:
 800a714:	ec51 0b10 	vmov	r0, r1, d0
 800a718:	ee10 2a10 	vmov	r2, s0
 800a71c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a720:	ec43 2b10 	vmov	d0, r2, r3
 800a724:	4770      	bx	lr
	...

0800a728 <__kernel_rem_pio2>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	ed2d 8b02 	vpush	{d8}
 800a730:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a734:	f112 0f14 	cmn.w	r2, #20
 800a738:	9306      	str	r3, [sp, #24]
 800a73a:	9104      	str	r1, [sp, #16]
 800a73c:	4bc2      	ldr	r3, [pc, #776]	; (800aa48 <__kernel_rem_pio2+0x320>)
 800a73e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a740:	9009      	str	r0, [sp, #36]	; 0x24
 800a742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	9b06      	ldr	r3, [sp, #24]
 800a74a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a74e:	bfa8      	it	ge
 800a750:	1ed4      	subge	r4, r2, #3
 800a752:	9305      	str	r3, [sp, #20]
 800a754:	bfb2      	itee	lt
 800a756:	2400      	movlt	r4, #0
 800a758:	2318      	movge	r3, #24
 800a75a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a75e:	f06f 0317 	mvn.w	r3, #23
 800a762:	fb04 3303 	mla	r3, r4, r3, r3
 800a766:	eb03 0a02 	add.w	sl, r3, r2
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	9a05      	ldr	r2, [sp, #20]
 800a76e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800aa38 <__kernel_rem_pio2+0x310>
 800a772:	eb03 0802 	add.w	r8, r3, r2
 800a776:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a778:	1aa7      	subs	r7, r4, r2
 800a77a:	ae20      	add	r6, sp, #128	; 0x80
 800a77c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a780:	2500      	movs	r5, #0
 800a782:	4545      	cmp	r5, r8
 800a784:	dd13      	ble.n	800a7ae <__kernel_rem_pio2+0x86>
 800a786:	9b06      	ldr	r3, [sp, #24]
 800a788:	aa20      	add	r2, sp, #128	; 0x80
 800a78a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a78e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	4598      	cmp	r8, r3
 800a79a:	dc31      	bgt.n	800a800 <__kernel_rem_pio2+0xd8>
 800a79c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800aa38 <__kernel_rem_pio2+0x310>
 800a7a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a7a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7a8:	462f      	mov	r7, r5
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	e01b      	b.n	800a7e6 <__kernel_rem_pio2+0xbe>
 800a7ae:	42ef      	cmn	r7, r5
 800a7b0:	d407      	bmi.n	800a7c2 <__kernel_rem_pio2+0x9a>
 800a7b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a7b6:	f7f5 ffab 	bl	8000710 <__aeabi_i2d>
 800a7ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a7be:	3501      	adds	r5, #1
 800a7c0:	e7df      	b.n	800a782 <__kernel_rem_pio2+0x5a>
 800a7c2:	ec51 0b18 	vmov	r0, r1, d8
 800a7c6:	e7f8      	b.n	800a7ba <__kernel_rem_pio2+0x92>
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a7d0:	f7f5 fd22 	bl	8000218 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7dc:	f7f5 fe4c 	bl	8000478 <__adddf3>
 800a7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7e4:	3601      	adds	r6, #1
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	429e      	cmp	r6, r3
 800a7ea:	f1a7 0708 	sub.w	r7, r7, #8
 800a7ee:	ddeb      	ble.n	800a7c8 <__kernel_rem_pio2+0xa0>
 800a7f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7f4:	f108 0801 	add.w	r8, r8, #1
 800a7f8:	ecab 7b02 	vstmia	fp!, {d7}
 800a7fc:	3508      	adds	r5, #8
 800a7fe:	e7ca      	b.n	800a796 <__kernel_rem_pio2+0x6e>
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	aa0c      	add	r2, sp, #48	; 0x30
 800a804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a808:	930b      	str	r3, [sp, #44]	; 0x2c
 800a80a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a80c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a810:	9c00      	ldr	r4, [sp, #0]
 800a812:	930a      	str	r3, [sp, #40]	; 0x28
 800a814:	00e3      	lsls	r3, r4, #3
 800a816:	9308      	str	r3, [sp, #32]
 800a818:	ab98      	add	r3, sp, #608	; 0x260
 800a81a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a81e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a822:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a826:	ab70      	add	r3, sp, #448	; 0x1c0
 800a828:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a82c:	46c3      	mov	fp, r8
 800a82e:	46a1      	mov	r9, r4
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	f1a5 0508 	sub.w	r5, r5, #8
 800a838:	dc77      	bgt.n	800a92a <__kernel_rem_pio2+0x202>
 800a83a:	ec47 6b10 	vmov	d0, r6, r7
 800a83e:	4650      	mov	r0, sl
 800a840:	f000 fac2 	bl	800adc8 <scalbn>
 800a844:	ec57 6b10 	vmov	r6, r7, d0
 800a848:	2200      	movs	r2, #0
 800a84a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a84e:	ee10 0a10 	vmov	r0, s0
 800a852:	4639      	mov	r1, r7
 800a854:	f7f5 fce0 	bl	8000218 <__aeabi_dmul>
 800a858:	ec41 0b10 	vmov	d0, r0, r1
 800a85c:	f000 fb34 	bl	800aec8 <floor>
 800a860:	4b7a      	ldr	r3, [pc, #488]	; (800aa4c <__kernel_rem_pio2+0x324>)
 800a862:	ec51 0b10 	vmov	r0, r1, d0
 800a866:	2200      	movs	r2, #0
 800a868:	f7f5 fcd6 	bl	8000218 <__aeabi_dmul>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fdfe 	bl	8000474 <__aeabi_dsub>
 800a878:	460f      	mov	r7, r1
 800a87a:	4606      	mov	r6, r0
 800a87c:	f7f6 f83a 	bl	80008f4 <__aeabi_d2iz>
 800a880:	9002      	str	r0, [sp, #8]
 800a882:	f7f5 ff45 	bl	8000710 <__aeabi_i2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7f5 fdf1 	bl	8000474 <__aeabi_dsub>
 800a892:	f1ba 0f00 	cmp.w	sl, #0
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	dd6d      	ble.n	800a978 <__kernel_rem_pio2+0x250>
 800a89c:	1e61      	subs	r1, r4, #1
 800a89e:	ab0c      	add	r3, sp, #48	; 0x30
 800a8a0:	9d02      	ldr	r5, [sp, #8]
 800a8a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8a6:	f1ca 0018 	rsb	r0, sl, #24
 800a8aa:	fa43 f200 	asr.w	r2, r3, r0
 800a8ae:	4415      	add	r5, r2
 800a8b0:	4082      	lsls	r2, r0
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	aa0c      	add	r2, sp, #48	; 0x30
 800a8b6:	9502      	str	r5, [sp, #8]
 800a8b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a8bc:	f1ca 0217 	rsb	r2, sl, #23
 800a8c0:	fa43 fb02 	asr.w	fp, r3, r2
 800a8c4:	f1bb 0f00 	cmp.w	fp, #0
 800a8c8:	dd65      	ble.n	800a996 <__kernel_rem_pio2+0x26e>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	9302      	str	r3, [sp, #8]
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a8d8:	4294      	cmp	r4, r2
 800a8da:	f300 809f 	bgt.w	800aa1c <__kernel_rem_pio2+0x2f4>
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	dd07      	ble.n	800a8f4 <__kernel_rem_pio2+0x1cc>
 800a8e4:	f1ba 0f01 	cmp.w	sl, #1
 800a8e8:	f000 80c1 	beq.w	800aa6e <__kernel_rem_pio2+0x346>
 800a8ec:	f1ba 0f02 	cmp.w	sl, #2
 800a8f0:	f000 80c7 	beq.w	800aa82 <__kernel_rem_pio2+0x35a>
 800a8f4:	f1bb 0f02 	cmp.w	fp, #2
 800a8f8:	d14d      	bne.n	800a996 <__kernel_rem_pio2+0x26e>
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	4954      	ldr	r1, [pc, #336]	; (800aa50 <__kernel_rem_pio2+0x328>)
 800a900:	2000      	movs	r0, #0
 800a902:	f7f5 fdb7 	bl	8000474 <__aeabi_dsub>
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	d043      	beq.n	800a996 <__kernel_rem_pio2+0x26e>
 800a90e:	4650      	mov	r0, sl
 800a910:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800aa40 <__kernel_rem_pio2+0x318>
 800a914:	f000 fa58 	bl	800adc8 <scalbn>
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	ec53 2b10 	vmov	r2, r3, d0
 800a920:	f7f5 fda8 	bl	8000474 <__aeabi_dsub>
 800a924:	4606      	mov	r6, r0
 800a926:	460f      	mov	r7, r1
 800a928:	e035      	b.n	800a996 <__kernel_rem_pio2+0x26e>
 800a92a:	4b4a      	ldr	r3, [pc, #296]	; (800aa54 <__kernel_rem_pio2+0x32c>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	4630      	mov	r0, r6
 800a930:	4639      	mov	r1, r7
 800a932:	f7f5 fc71 	bl	8000218 <__aeabi_dmul>
 800a936:	f7f5 ffdd 	bl	80008f4 <__aeabi_d2iz>
 800a93a:	f7f5 fee9 	bl	8000710 <__aeabi_i2d>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	ec43 2b18 	vmov	d8, r2, r3
 800a946:	4b44      	ldr	r3, [pc, #272]	; (800aa58 <__kernel_rem_pio2+0x330>)
 800a948:	2200      	movs	r2, #0
 800a94a:	f7f5 fc65 	bl	8000218 <__aeabi_dmul>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 fd8d 	bl	8000474 <__aeabi_dsub>
 800a95a:	f7f5 ffcb 	bl	80008f4 <__aeabi_d2iz>
 800a95e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a962:	f84b 0b04 	str.w	r0, [fp], #4
 800a966:	ec51 0b18 	vmov	r0, r1, d8
 800a96a:	f7f5 fd85 	bl	8000478 <__adddf3>
 800a96e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	e75b      	b.n	800a830 <__kernel_rem_pio2+0x108>
 800a978:	d106      	bne.n	800a988 <__kernel_rem_pio2+0x260>
 800a97a:	1e63      	subs	r3, r4, #1
 800a97c:	aa0c      	add	r2, sp, #48	; 0x30
 800a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a982:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a986:	e79d      	b.n	800a8c4 <__kernel_rem_pio2+0x19c>
 800a988:	4b34      	ldr	r3, [pc, #208]	; (800aa5c <__kernel_rem_pio2+0x334>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7f5 ff9e 	bl	80008cc <__aeabi_dcmpge>
 800a990:	2800      	cmp	r0, #0
 800a992:	d140      	bne.n	800aa16 <__kernel_rem_pio2+0x2ee>
 800a994:	4683      	mov	fp, r0
 800a996:	2200      	movs	r2, #0
 800a998:	2300      	movs	r3, #0
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f5 ff77 	bl	8000890 <__aeabi_dcmpeq>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f000 80c1 	beq.w	800ab2a <__kernel_rem_pio2+0x402>
 800a9a8:	1e65      	subs	r5, r4, #1
 800a9aa:	462b      	mov	r3, r5
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	9900      	ldr	r1, [sp, #0]
 800a9b0:	428b      	cmp	r3, r1
 800a9b2:	da6d      	bge.n	800aa90 <__kernel_rem_pio2+0x368>
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	f000 808a 	beq.w	800aace <__kernel_rem_pio2+0x3a6>
 800a9ba:	ab0c      	add	r3, sp, #48	; 0x30
 800a9bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a9c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80ae 	beq.w	800ab26 <__kernel_rem_pio2+0x3fe>
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800aa40 <__kernel_rem_pio2+0x318>
 800a9d0:	f000 f9fa 	bl	800adc8 <scalbn>
 800a9d4:	1c6b      	adds	r3, r5, #1
 800a9d6:	00da      	lsls	r2, r3, #3
 800a9d8:	9205      	str	r2, [sp, #20]
 800a9da:	ec57 6b10 	vmov	r6, r7, d0
 800a9de:	aa70      	add	r2, sp, #448	; 0x1c0
 800a9e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800aa54 <__kernel_rem_pio2+0x32c>
 800a9e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a9e8:	462c      	mov	r4, r5
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	2c00      	cmp	r4, #0
 800a9f0:	f280 80d4 	bge.w	800ab9c <__kernel_rem_pio2+0x474>
 800a9f4:	462c      	mov	r4, r5
 800a9f6:	2c00      	cmp	r4, #0
 800a9f8:	f2c0 8102 	blt.w	800ac00 <__kernel_rem_pio2+0x4d8>
 800a9fc:	4b18      	ldr	r3, [pc, #96]	; (800aa60 <__kernel_rem_pio2+0x338>)
 800a9fe:	461e      	mov	r6, r3
 800aa00:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa02:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800aa06:	1b2b      	subs	r3, r5, r4
 800aa08:	f04f 0900 	mov.w	r9, #0
 800aa0c:	f04f 0a00 	mov.w	sl, #0
 800aa10:	2700      	movs	r7, #0
 800aa12:	9306      	str	r3, [sp, #24]
 800aa14:	e0e6      	b.n	800abe4 <__kernel_rem_pio2+0x4bc>
 800aa16:	f04f 0b02 	mov.w	fp, #2
 800aa1a:	e756      	b.n	800a8ca <__kernel_rem_pio2+0x1a2>
 800aa1c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa20:	bb05      	cbnz	r5, 800aa64 <__kernel_rem_pio2+0x33c>
 800aa22:	b123      	cbz	r3, 800aa2e <__kernel_rem_pio2+0x306>
 800aa24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aa28:	f8c8 3000 	str.w	r3, [r8]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	3201      	adds	r2, #1
 800aa30:	f108 0804 	add.w	r8, r8, #4
 800aa34:	461d      	mov	r5, r3
 800aa36:	e74f      	b.n	800a8d8 <__kernel_rem_pio2+0x1b0>
	...
 800aa44:	3ff00000 	.word	0x3ff00000
 800aa48:	0800b1e8 	.word	0x0800b1e8
 800aa4c:	40200000 	.word	0x40200000
 800aa50:	3ff00000 	.word	0x3ff00000
 800aa54:	3e700000 	.word	0x3e700000
 800aa58:	41700000 	.word	0x41700000
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	0800b1a8 	.word	0x0800b1a8
 800aa64:	1acb      	subs	r3, r1, r3
 800aa66:	f8c8 3000 	str.w	r3, [r8]
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	e7df      	b.n	800aa2e <__kernel_rem_pio2+0x306>
 800aa6e:	1e62      	subs	r2, r4, #1
 800aa70:	ab0c      	add	r3, sp, #48	; 0x30
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa7a:	a90c      	add	r1, sp, #48	; 0x30
 800aa7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa80:	e738      	b.n	800a8f4 <__kernel_rem_pio2+0x1cc>
 800aa82:	1e62      	subs	r2, r4, #1
 800aa84:	ab0c      	add	r3, sp, #48	; 0x30
 800aa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aa8e:	e7f4      	b.n	800aa7a <__kernel_rem_pio2+0x352>
 800aa90:	a90c      	add	r1, sp, #48	; 0x30
 800aa92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	e788      	b.n	800a9ae <__kernel_rem_pio2+0x286>
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aaa2:	2900      	cmp	r1, #0
 800aaa4:	d0fa      	beq.n	800aa9c <__kernel_rem_pio2+0x374>
 800aaa6:	9a08      	ldr	r2, [sp, #32]
 800aaa8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800aaac:	446a      	add	r2, sp
 800aaae:	3a98      	subs	r2, #152	; 0x98
 800aab0:	9208      	str	r2, [sp, #32]
 800aab2:	9a06      	ldr	r2, [sp, #24]
 800aab4:	a920      	add	r1, sp, #128	; 0x80
 800aab6:	18a2      	adds	r2, r4, r2
 800aab8:	18e3      	adds	r3, r4, r3
 800aaba:	f104 0801 	add.w	r8, r4, #1
 800aabe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	9b02      	ldr	r3, [sp, #8]
 800aac6:	4543      	cmp	r3, r8
 800aac8:	da04      	bge.n	800aad4 <__kernel_rem_pio2+0x3ac>
 800aaca:	461c      	mov	r4, r3
 800aacc:	e6a2      	b.n	800a814 <__kernel_rem_pio2+0xec>
 800aace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aad0:	2301      	movs	r3, #1
 800aad2:	e7e4      	b.n	800aa9e <__kernel_rem_pio2+0x376>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aada:	f7f5 fe19 	bl	8000710 <__aeabi_i2d>
 800aade:	e8e5 0102 	strd	r0, r1, [r5], #8
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	46ab      	mov	fp, r5
 800aae6:	461c      	mov	r4, r3
 800aae8:	f04f 0900 	mov.w	r9, #0
 800aaec:	2600      	movs	r6, #0
 800aaee:	2700      	movs	r7, #0
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	4599      	cmp	r9, r3
 800aaf4:	dd06      	ble.n	800ab04 <__kernel_rem_pio2+0x3dc>
 800aaf6:	9b08      	ldr	r3, [sp, #32]
 800aaf8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800aafc:	f108 0801 	add.w	r8, r8, #1
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	e7df      	b.n	800aac4 <__kernel_rem_pio2+0x39c>
 800ab04:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab08:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab0c:	f7f5 fb84 	bl	8000218 <__aeabi_dmul>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 fcae 	bl	8000478 <__adddf3>
 800ab1c:	f109 0901 	add.w	r9, r9, #1
 800ab20:	4606      	mov	r6, r0
 800ab22:	460f      	mov	r7, r1
 800ab24:	e7e4      	b.n	800aaf0 <__kernel_rem_pio2+0x3c8>
 800ab26:	3d01      	subs	r5, #1
 800ab28:	e747      	b.n	800a9ba <__kernel_rem_pio2+0x292>
 800ab2a:	ec47 6b10 	vmov	d0, r6, r7
 800ab2e:	f1ca 0000 	rsb	r0, sl, #0
 800ab32:	f000 f949 	bl	800adc8 <scalbn>
 800ab36:	ec57 6b10 	vmov	r6, r7, d0
 800ab3a:	4ba0      	ldr	r3, [pc, #640]	; (800adbc <__kernel_rem_pio2+0x694>)
 800ab3c:	ee10 0a10 	vmov	r0, s0
 800ab40:	2200      	movs	r2, #0
 800ab42:	4639      	mov	r1, r7
 800ab44:	f7f5 fec2 	bl	80008cc <__aeabi_dcmpge>
 800ab48:	b1f8      	cbz	r0, 800ab8a <__kernel_rem_pio2+0x462>
 800ab4a:	4b9d      	ldr	r3, [pc, #628]	; (800adc0 <__kernel_rem_pio2+0x698>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4630      	mov	r0, r6
 800ab50:	4639      	mov	r1, r7
 800ab52:	f7f5 fb61 	bl	8000218 <__aeabi_dmul>
 800ab56:	f7f5 fecd 	bl	80008f4 <__aeabi_d2iz>
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	f7f5 fdd8 	bl	8000710 <__aeabi_i2d>
 800ab60:	4b96      	ldr	r3, [pc, #600]	; (800adbc <__kernel_rem_pio2+0x694>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	f7f5 fb58 	bl	8000218 <__aeabi_dmul>
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7f5 fc80 	bl	8000474 <__aeabi_dsub>
 800ab74:	f7f5 febe 	bl	80008f4 <__aeabi_d2iz>
 800ab78:	1c65      	adds	r5, r4, #1
 800ab7a:	ab0c      	add	r3, sp, #48	; 0x30
 800ab7c:	f10a 0a18 	add.w	sl, sl, #24
 800ab80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab84:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ab88:	e71f      	b.n	800a9ca <__kernel_rem_pio2+0x2a2>
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 feb1 	bl	80008f4 <__aeabi_d2iz>
 800ab92:	ab0c      	add	r3, sp, #48	; 0x30
 800ab94:	4625      	mov	r5, r4
 800ab96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab9a:	e716      	b.n	800a9ca <__kernel_rem_pio2+0x2a2>
 800ab9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ab9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aba2:	f7f5 fdb5 	bl	8000710 <__aeabi_i2d>
 800aba6:	4632      	mov	r2, r6
 800aba8:	463b      	mov	r3, r7
 800abaa:	f7f5 fb35 	bl	8000218 <__aeabi_dmul>
 800abae:	4642      	mov	r2, r8
 800abb0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800abb4:	464b      	mov	r3, r9
 800abb6:	4630      	mov	r0, r6
 800abb8:	4639      	mov	r1, r7
 800abba:	f7f5 fb2d 	bl	8000218 <__aeabi_dmul>
 800abbe:	3c01      	subs	r4, #1
 800abc0:	4606      	mov	r6, r0
 800abc2:	460f      	mov	r7, r1
 800abc4:	e713      	b.n	800a9ee <__kernel_rem_pio2+0x2c6>
 800abc6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800abca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800abce:	f7f5 fb23 	bl	8000218 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4648      	mov	r0, r9
 800abd8:	4651      	mov	r1, sl
 800abda:	f7f5 fc4d 	bl	8000478 <__adddf3>
 800abde:	3701      	adds	r7, #1
 800abe0:	4681      	mov	r9, r0
 800abe2:	468a      	mov	sl, r1
 800abe4:	9b00      	ldr	r3, [sp, #0]
 800abe6:	429f      	cmp	r7, r3
 800abe8:	dc02      	bgt.n	800abf0 <__kernel_rem_pio2+0x4c8>
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	429f      	cmp	r7, r3
 800abee:	ddea      	ble.n	800abc6 <__kernel_rem_pio2+0x49e>
 800abf0:	9a06      	ldr	r2, [sp, #24]
 800abf2:	ab48      	add	r3, sp, #288	; 0x120
 800abf4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800abf8:	e9c6 9a00 	strd	r9, sl, [r6]
 800abfc:	3c01      	subs	r4, #1
 800abfe:	e6fa      	b.n	800a9f6 <__kernel_rem_pio2+0x2ce>
 800ac00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	dc0b      	bgt.n	800ac1e <__kernel_rem_pio2+0x4f6>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dc39      	bgt.n	800ac7e <__kernel_rem_pio2+0x556>
 800ac0a:	d05d      	beq.n	800acc8 <__kernel_rem_pio2+0x5a0>
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	f003 0007 	and.w	r0, r3, #7
 800ac12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ac16:	ecbd 8b02 	vpop	{d8}
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d1f3      	bne.n	800ac0c <__kernel_rem_pio2+0x4e4>
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	9500      	str	r5, [sp, #0]
 800ac28:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ac2c:	eb0d 0403 	add.w	r4, sp, r3
 800ac30:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ac34:	46a2      	mov	sl, r4
 800ac36:	9b00      	ldr	r3, [sp, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ac3e:	dc69      	bgt.n	800ad14 <__kernel_rem_pio2+0x5ec>
 800ac40:	46aa      	mov	sl, r5
 800ac42:	f1ba 0f01 	cmp.w	sl, #1
 800ac46:	f1a4 0408 	sub.w	r4, r4, #8
 800ac4a:	f300 8083 	bgt.w	800ad54 <__kernel_rem_pio2+0x62c>
 800ac4e:	9c05      	ldr	r4, [sp, #20]
 800ac50:	ab48      	add	r3, sp, #288	; 0x120
 800ac52:	441c      	add	r4, r3
 800ac54:	2000      	movs	r0, #0
 800ac56:	2100      	movs	r1, #0
 800ac58:	2d01      	cmp	r5, #1
 800ac5a:	f300 809a 	bgt.w	800ad92 <__kernel_rem_pio2+0x66a>
 800ac5e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ac62:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ac66:	f1bb 0f00 	cmp.w	fp, #0
 800ac6a:	f040 8098 	bne.w	800ad9e <__kernel_rem_pio2+0x676>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	e9c3 7800 	strd	r7, r8, [r3]
 800ac74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ac78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac7c:	e7c6      	b.n	800ac0c <__kernel_rem_pio2+0x4e4>
 800ac7e:	9e05      	ldr	r6, [sp, #20]
 800ac80:	ab48      	add	r3, sp, #288	; 0x120
 800ac82:	441e      	add	r6, r3
 800ac84:	462c      	mov	r4, r5
 800ac86:	2000      	movs	r0, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	da33      	bge.n	800acf6 <__kernel_rem_pio2+0x5ce>
 800ac8e:	f1bb 0f00 	cmp.w	fp, #0
 800ac92:	d036      	beq.n	800ad02 <__kernel_rem_pio2+0x5da>
 800ac94:	4602      	mov	r2, r0
 800ac96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac9a:	9c04      	ldr	r4, [sp, #16]
 800ac9c:	e9c4 2300 	strd	r2, r3, [r4]
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800aca8:	f7f5 fbe4 	bl	8000474 <__aeabi_dsub>
 800acac:	ae4a      	add	r6, sp, #296	; 0x128
 800acae:	2401      	movs	r4, #1
 800acb0:	42a5      	cmp	r5, r4
 800acb2:	da29      	bge.n	800ad08 <__kernel_rem_pio2+0x5e0>
 800acb4:	f1bb 0f00 	cmp.w	fp, #0
 800acb8:	d002      	beq.n	800acc0 <__kernel_rem_pio2+0x598>
 800acba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acbe:	4619      	mov	r1, r3
 800acc0:	9b04      	ldr	r3, [sp, #16]
 800acc2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800acc6:	e7a1      	b.n	800ac0c <__kernel_rem_pio2+0x4e4>
 800acc8:	9c05      	ldr	r4, [sp, #20]
 800acca:	ab48      	add	r3, sp, #288	; 0x120
 800accc:	441c      	add	r4, r3
 800acce:	2000      	movs	r0, #0
 800acd0:	2100      	movs	r1, #0
 800acd2:	2d00      	cmp	r5, #0
 800acd4:	da09      	bge.n	800acea <__kernel_rem_pio2+0x5c2>
 800acd6:	f1bb 0f00 	cmp.w	fp, #0
 800acda:	d002      	beq.n	800ace2 <__kernel_rem_pio2+0x5ba>
 800acdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ace0:	4619      	mov	r1, r3
 800ace2:	9b04      	ldr	r3, [sp, #16]
 800ace4:	e9c3 0100 	strd	r0, r1, [r3]
 800ace8:	e790      	b.n	800ac0c <__kernel_rem_pio2+0x4e4>
 800acea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acee:	f7f5 fbc3 	bl	8000478 <__adddf3>
 800acf2:	3d01      	subs	r5, #1
 800acf4:	e7ed      	b.n	800acd2 <__kernel_rem_pio2+0x5aa>
 800acf6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800acfa:	f7f5 fbbd 	bl	8000478 <__adddf3>
 800acfe:	3c01      	subs	r4, #1
 800ad00:	e7c3      	b.n	800ac8a <__kernel_rem_pio2+0x562>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	e7c8      	b.n	800ac9a <__kernel_rem_pio2+0x572>
 800ad08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ad0c:	f7f5 fbb4 	bl	8000478 <__adddf3>
 800ad10:	3401      	adds	r4, #1
 800ad12:	e7cd      	b.n	800acb0 <__kernel_rem_pio2+0x588>
 800ad14:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ad1c:	9b00      	ldr	r3, [sp, #0]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4632      	mov	r2, r6
 800ad24:	463b      	mov	r3, r7
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fba5 	bl	8000478 <__adddf3>
 800ad2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 fb9b 	bl	8000474 <__aeabi_dsub>
 800ad3e:	4632      	mov	r2, r6
 800ad40:	463b      	mov	r3, r7
 800ad42:	f7f5 fb99 	bl	8000478 <__adddf3>
 800ad46:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ad4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad4e:	ed8a 7b00 	vstr	d7, [sl]
 800ad52:	e770      	b.n	800ac36 <__kernel_rem_pio2+0x50e>
 800ad54:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4632      	mov	r2, r6
 800ad60:	463b      	mov	r3, r7
 800ad62:	4649      	mov	r1, r9
 800ad64:	f7f5 fb88 	bl	8000478 <__adddf3>
 800ad68:	e9cd 0100 	strd	r0, r1, [sp]
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4640      	mov	r0, r8
 800ad72:	4649      	mov	r1, r9
 800ad74:	f7f5 fb7e 	bl	8000474 <__aeabi_dsub>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	f7f5 fb7c 	bl	8000478 <__adddf3>
 800ad80:	ed9d 7b00 	vldr	d7, [sp]
 800ad84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad88:	ed84 7b00 	vstr	d7, [r4]
 800ad8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad90:	e757      	b.n	800ac42 <__kernel_rem_pio2+0x51a>
 800ad92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad96:	f7f5 fb6f 	bl	8000478 <__adddf3>
 800ad9a:	3d01      	subs	r5, #1
 800ad9c:	e75c      	b.n	800ac58 <__kernel_rem_pio2+0x530>
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	9a04      	ldr	r2, [sp, #16]
 800ada2:	601f      	str	r7, [r3, #0]
 800ada4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ada8:	605c      	str	r4, [r3, #4]
 800adaa:	609d      	str	r5, [r3, #8]
 800adac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800adb0:	60d3      	str	r3, [r2, #12]
 800adb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adb6:	6110      	str	r0, [r2, #16]
 800adb8:	6153      	str	r3, [r2, #20]
 800adba:	e727      	b.n	800ac0c <__kernel_rem_pio2+0x4e4>
 800adbc:	41700000 	.word	0x41700000
 800adc0:	3e700000 	.word	0x3e700000
 800adc4:	00000000 	.word	0x00000000

0800adc8 <scalbn>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	ec55 4b10 	vmov	r4, r5, d0
 800adce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800add2:	4606      	mov	r6, r0
 800add4:	462b      	mov	r3, r5
 800add6:	b999      	cbnz	r1, 800ae00 <scalbn+0x38>
 800add8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800addc:	4323      	orrs	r3, r4
 800adde:	d03f      	beq.n	800ae60 <scalbn+0x98>
 800ade0:	4b35      	ldr	r3, [pc, #212]	; (800aeb8 <scalbn+0xf0>)
 800ade2:	4629      	mov	r1, r5
 800ade4:	ee10 0a10 	vmov	r0, s0
 800ade8:	2200      	movs	r2, #0
 800adea:	f7f5 fa15 	bl	8000218 <__aeabi_dmul>
 800adee:	4b33      	ldr	r3, [pc, #204]	; (800aebc <scalbn+0xf4>)
 800adf0:	429e      	cmp	r6, r3
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	da10      	bge.n	800ae1a <scalbn+0x52>
 800adf8:	a327      	add	r3, pc, #156	; (adr r3, 800ae98 <scalbn+0xd0>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	e01f      	b.n	800ae40 <scalbn+0x78>
 800ae00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae04:	4291      	cmp	r1, r2
 800ae06:	d10c      	bne.n	800ae22 <scalbn+0x5a>
 800ae08:	ee10 2a10 	vmov	r2, s0
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fb32 	bl	8000478 <__adddf3>
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	e022      	b.n	800ae60 <scalbn+0x98>
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ae20:	3936      	subs	r1, #54	; 0x36
 800ae22:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ae26:	4296      	cmp	r6, r2
 800ae28:	dd0d      	ble.n	800ae46 <scalbn+0x7e>
 800ae2a:	2d00      	cmp	r5, #0
 800ae2c:	a11c      	add	r1, pc, #112	; (adr r1, 800aea0 <scalbn+0xd8>)
 800ae2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae32:	da02      	bge.n	800ae3a <scalbn+0x72>
 800ae34:	a11c      	add	r1, pc, #112	; (adr r1, 800aea8 <scalbn+0xe0>)
 800ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3a:	a319      	add	r3, pc, #100	; (adr r3, 800aea0 <scalbn+0xd8>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 f9ea 	bl	8000218 <__aeabi_dmul>
 800ae44:	e7e6      	b.n	800ae14 <scalbn+0x4c>
 800ae46:	1872      	adds	r2, r6, r1
 800ae48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae4c:	428a      	cmp	r2, r1
 800ae4e:	dcec      	bgt.n	800ae2a <scalbn+0x62>
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	dd08      	ble.n	800ae66 <scalbn+0x9e>
 800ae54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae60:	ec45 4b10 	vmov	d0, r4, r5
 800ae64:	bd70      	pop	{r4, r5, r6, pc}
 800ae66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae6a:	da08      	bge.n	800ae7e <scalbn+0xb6>
 800ae6c:	2d00      	cmp	r5, #0
 800ae6e:	a10a      	add	r1, pc, #40	; (adr r1, 800ae98 <scalbn+0xd0>)
 800ae70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae74:	dac0      	bge.n	800adf8 <scalbn+0x30>
 800ae76:	a10e      	add	r1, pc, #56	; (adr r1, 800aeb0 <scalbn+0xe8>)
 800ae78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7c:	e7bc      	b.n	800adf8 <scalbn+0x30>
 800ae7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae82:	3236      	adds	r2, #54	; 0x36
 800ae84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <scalbn+0xf8>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	e7d5      	b.n	800ae40 <scalbn+0x78>
 800ae94:	f3af 8000 	nop.w
 800ae98:	c2f8f359 	.word	0xc2f8f359
 800ae9c:	01a56e1f 	.word	0x01a56e1f
 800aea0:	8800759c 	.word	0x8800759c
 800aea4:	7e37e43c 	.word	0x7e37e43c
 800aea8:	8800759c 	.word	0x8800759c
 800aeac:	fe37e43c 	.word	0xfe37e43c
 800aeb0:	c2f8f359 	.word	0xc2f8f359
 800aeb4:	81a56e1f 	.word	0x81a56e1f
 800aeb8:	43500000 	.word	0x43500000
 800aebc:	ffff3cb0 	.word	0xffff3cb0
 800aec0:	3c900000 	.word	0x3c900000
 800aec4:	00000000 	.word	0x00000000

0800aec8 <floor>:
 800aec8:	ec51 0b10 	vmov	r0, r1, d0
 800aecc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800aed8:	2e13      	cmp	r6, #19
 800aeda:	ee10 5a10 	vmov	r5, s0
 800aede:	ee10 8a10 	vmov	r8, s0
 800aee2:	460c      	mov	r4, r1
 800aee4:	dc31      	bgt.n	800af4a <floor+0x82>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	da14      	bge.n	800af14 <floor+0x4c>
 800aeea:	a333      	add	r3, pc, #204	; (adr r3, 800afb8 <floor+0xf0>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 fac2 	bl	8000478 <__adddf3>
 800aef4:	2200      	movs	r2, #0
 800aef6:	2300      	movs	r3, #0
 800aef8:	f7f5 fcf2 	bl	80008e0 <__aeabi_dcmpgt>
 800aefc:	b138      	cbz	r0, 800af0e <floor+0x46>
 800aefe:	2c00      	cmp	r4, #0
 800af00:	da53      	bge.n	800afaa <floor+0xe2>
 800af02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800af06:	4325      	orrs	r5, r4
 800af08:	d052      	beq.n	800afb0 <floor+0xe8>
 800af0a:	4c2d      	ldr	r4, [pc, #180]	; (800afc0 <floor+0xf8>)
 800af0c:	2500      	movs	r5, #0
 800af0e:	4621      	mov	r1, r4
 800af10:	4628      	mov	r0, r5
 800af12:	e024      	b.n	800af5e <floor+0x96>
 800af14:	4f2b      	ldr	r7, [pc, #172]	; (800afc4 <floor+0xfc>)
 800af16:	4137      	asrs	r7, r6
 800af18:	ea01 0307 	and.w	r3, r1, r7
 800af1c:	4303      	orrs	r3, r0
 800af1e:	d01e      	beq.n	800af5e <floor+0x96>
 800af20:	a325      	add	r3, pc, #148	; (adr r3, 800afb8 <floor+0xf0>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 faa7 	bl	8000478 <__adddf3>
 800af2a:	2200      	movs	r2, #0
 800af2c:	2300      	movs	r3, #0
 800af2e:	f7f5 fcd7 	bl	80008e0 <__aeabi_dcmpgt>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0eb      	beq.n	800af0e <floor+0x46>
 800af36:	2c00      	cmp	r4, #0
 800af38:	bfbe      	ittt	lt
 800af3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af3e:	4133      	asrlt	r3, r6
 800af40:	18e4      	addlt	r4, r4, r3
 800af42:	ea24 0407 	bic.w	r4, r4, r7
 800af46:	2500      	movs	r5, #0
 800af48:	e7e1      	b.n	800af0e <floor+0x46>
 800af4a:	2e33      	cmp	r6, #51	; 0x33
 800af4c:	dd0b      	ble.n	800af66 <floor+0x9e>
 800af4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af52:	d104      	bne.n	800af5e <floor+0x96>
 800af54:	ee10 2a10 	vmov	r2, s0
 800af58:	460b      	mov	r3, r1
 800af5a:	f7f5 fa8d 	bl	8000478 <__adddf3>
 800af5e:	ec41 0b10 	vmov	d0, r0, r1
 800af62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800af6a:	f04f 37ff 	mov.w	r7, #4294967295
 800af6e:	40df      	lsrs	r7, r3
 800af70:	4238      	tst	r0, r7
 800af72:	d0f4      	beq.n	800af5e <floor+0x96>
 800af74:	a310      	add	r3, pc, #64	; (adr r3, 800afb8 <floor+0xf0>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	f7f5 fa7d 	bl	8000478 <__adddf3>
 800af7e:	2200      	movs	r2, #0
 800af80:	2300      	movs	r3, #0
 800af82:	f7f5 fcad 	bl	80008e0 <__aeabi_dcmpgt>
 800af86:	2800      	cmp	r0, #0
 800af88:	d0c1      	beq.n	800af0e <floor+0x46>
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	da0a      	bge.n	800afa4 <floor+0xdc>
 800af8e:	2e14      	cmp	r6, #20
 800af90:	d101      	bne.n	800af96 <floor+0xce>
 800af92:	3401      	adds	r4, #1
 800af94:	e006      	b.n	800afa4 <floor+0xdc>
 800af96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af9a:	2301      	movs	r3, #1
 800af9c:	40b3      	lsls	r3, r6
 800af9e:	441d      	add	r5, r3
 800afa0:	45a8      	cmp	r8, r5
 800afa2:	d8f6      	bhi.n	800af92 <floor+0xca>
 800afa4:	ea25 0507 	bic.w	r5, r5, r7
 800afa8:	e7b1      	b.n	800af0e <floor+0x46>
 800afaa:	2500      	movs	r5, #0
 800afac:	462c      	mov	r4, r5
 800afae:	e7ae      	b.n	800af0e <floor+0x46>
 800afb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800afb4:	e7ab      	b.n	800af0e <floor+0x46>
 800afb6:	bf00      	nop
 800afb8:	8800759c 	.word	0x8800759c
 800afbc:	7e37e43c 	.word	0x7e37e43c
 800afc0:	bff00000 	.word	0xbff00000
 800afc4:	000fffff 	.word	0x000fffff

0800afc8 <_init>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	bf00      	nop
 800afcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afce:	bc08      	pop	{r3}
 800afd0:	469e      	mov	lr, r3
 800afd2:	4770      	bx	lr

0800afd4 <_fini>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	bf00      	nop
 800afd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afda:	bc08      	pop	{r3}
 800afdc:	469e      	mov	lr, r3
 800afde:	4770      	bx	lr
