
easy_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011890  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08011a70  08011a70  00021a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120c0  080120c0  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  080120c0  080120c0  000220c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120c8  080120c8  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120c8  080120c8  000220c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120cc  080120cc  000220cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080120d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  200001d8  080122a8  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  080122a8  00030814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020129  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004082  00000000  00000000  00050374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  000543f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001453  00000000  00000000  00055e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c24  00000000  00000000  00057273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021aff  00000000  00000000  0007ae97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1739  00000000  00000000  0009c996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008688  00000000  00000000  0017e0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00186758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011a58 	.word	0x08011a58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08011a58 	.word	0x08011a58

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f001 f941 	bl	80022ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f83e 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 fc82 	bl	8001954 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001050:	f000 fa56 	bl	8001500 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001054:	f000 f882 	bl	800115c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001058:	f000 f96a 	bl	8001330 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 800105c:	f000 fc2e 	bl	80018bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001060:	f000 fb90 	bl	8001784 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001064:	f000 fb40 	bl	80016e8 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001068:	f000 fa0a 	bl	8001480 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  uart_debug_init();
 800106c:	f009 fe96 	bl	800ad9c <uart_debug_init>
  FOC_hardware_init();
 8001070:	f009 feea 	bl	800ae48 <FOC_hardware_init>
//  PWM_encoder_init();
  PID_init();
 8001074:	f00a fe9c 	bl	800bdb0 <PID_init>
  HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f001 f997 	bl	80023ac <HAL_Delay>
  GetCurrentOffset();
 800107e:	f009 fdeb 	bl	800ac58 <GetCurrentOffset>
  HAL_Delay(500);
 8001082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001086:	f001 f991 	bl	80023ac <HAL_Delay>
  Motor_Align(0.5);
 800108a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800108e:	f00a fb73 	bl	800b778 <Motor_Align>
  motor_function_init();
 8001092:	f00a fb59 	bl	800b748 <motor_function_init>

    /* USER CODE BEGIN 3 */
//    vofa_JustFloat_output(FOC.AlphaBeta.alpha,FOC.AlphaBeta.beta,FOC.DQ.d,FOC.DQ.q);
//	    vofa_JustFloat_output(current.Ia,current.Ib,current.Ic,FOC.DQ.d);
//	  	vofa_JustFloat_output(current.Ia,current.Ib,current.Ic,adc_encoder.electronic_angle);
	  	vofa_JustFloat_output(m_c.speed,m_c.speed_filter_win,m_c.speed_set,0.0f);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <main+0x80>)
 8001098:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <main+0x80>)
 800109e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <main+0x80>)
 80010a4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80010a8:	eddf 1a06 	vldr	s3, [pc, #24]	; 80010c4 <main+0x84>
 80010ac:	eeb0 1a66 	vmov.f32	s2, s13
 80010b0:	eef0 0a47 	vmov.f32	s1, s14
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	f009 fe9c 	bl	800adf4 <vofa_JustFloat_output>
 80010bc:	e7eb      	b.n	8001096 <main+0x56>
 80010be:	bf00      	nop
 80010c0:	200005f4 	.word	0x200005f4
 80010c4:	00000000 	.word	0x00000000

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	2238      	movs	r2, #56	; 0x38
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00b feb3 	bl	800ce42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f004 f880 	bl	80051f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001102:	2306      	movs	r3, #6
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001106:	2355      	movs	r3, #85	; 0x55
 8001108:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f004 f91c 	bl	8005358 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001126:	f000 fc83 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2104      	movs	r1, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fc20 	bl	8005988 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800114e:	f000 fc6f 	bl	8001a30 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09a      	sub	sp, #104	; 0x68
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001162:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f00b fe63 	bl	800ce42 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	223c      	movs	r2, #60	; 0x3c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00b fe5d 	bl	800ce42 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <MX_ADC1_Init+0x1c4>)
 800118a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <MX_ADC1_Init+0x1c4>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b61      	ldr	r3, [pc, #388]	; (8001320 <MX_ADC1_Init+0x1c4>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b0:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b6:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011bc:	4b58      	ldr	r3, [pc, #352]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80011c2:	4b57      	ldr	r3, [pc, #348]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80011d0:	4b53      	ldr	r3, [pc, #332]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011d2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011d8:	4b51      	ldr	r3, [pc, #324]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e8:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	484a      	ldr	r0, [pc, #296]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80011f8:	f001 fb2a 	bl	8002850 <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001202:	f000 fc15 	bl	8001a30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001206:	2300      	movs	r3, #0
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800120a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800120e:	4619      	mov	r1, r3
 8001210:	4843      	ldr	r0, [pc, #268]	; (8001320 <MX_ADC1_Init+0x1c4>)
 8001212:	f003 fa9f 	bl	8004754 <HAL_ADCEx_MultiModeConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800121c:	f000 fc08 	bl	8001a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001220:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MX_ADC1_Init+0x1c8>)
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2306      	movs	r3, #6
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001228:	2304      	movs	r3, #4
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122c:	237f      	movs	r3, #127	; 0x7f
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800123c:	4619      	mov	r1, r3
 800123e:	4838      	ldr	r0, [pc, #224]	; (8001320 <MX_ADC1_Init+0x1c4>)
 8001240:	f001 fec8 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800124a:	f000 fbf1 	bl	8001a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MX_ADC1_Init+0x1cc>)
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001252:	230c      	movs	r3, #12
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800125a:	4619      	mov	r1, r3
 800125c:	4830      	ldr	r0, [pc, #192]	; (8001320 <MX_ADC1_Init+0x1c4>)
 800125e:	f001 feb9 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001268:	f000 fbe2 	bl	8001a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_ADC1_Init+0x1d0>)
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001270:	2312      	movs	r3, #18
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001278:	4619      	mov	r1, r3
 800127a:	4829      	ldr	r0, [pc, #164]	; (8001320 <MX_ADC1_Init+0x1c4>)
 800127c:	f001 feaa 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8001286:	f000 fbd3 	bl	8001a30 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_ADC1_Init+0x1c8>)
 800128c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800128e:	2309      	movs	r3, #9
 8001290:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001292:	2301      	movs	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001296:	237f      	movs	r3, #127	; 0x7f
 8001298:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800129a:	2304      	movs	r3, #4
 800129c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80012b8:	2384      	movs	r3, #132	; 0x84
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4815      	ldr	r0, [pc, #84]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80012cc:	f002 fd62 	bl	8003d94 <HAL_ADCEx_InjectedConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 80012d6:	f000 fbab 	bl	8001a30 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_ADC1_Init+0x1cc>)
 80012dc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80012de:	f240 130f 	movw	r3, #271	; 0x10f
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_ADC1_Init+0x1c4>)
 80012ea:	f002 fd53 	bl	8003d94 <HAL_ADCEx_InjectedConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 80012f4:	f000 fb9c 	bl	8001a30 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_ADC1_Init+0x1d0>)
 80012fa:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80012fc:	f240 2315 	movw	r3, #533	; 0x215
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0x1c4>)
 8001308:	f002 fd44 	bl	8003d94 <HAL_ADCEx_InjectedConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
 8001312:	f000 fb8d 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3768      	adds	r7, #104	; 0x68
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200001f4 	.word	0x200001f4
 8001324:	08600004 	.word	0x08600004
 8001328:	3ac04000 	.word	0x3ac04000
 800132c:	04300002 	.word	0x04300002

08001330 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b098      	sub	sp, #96	; 0x60
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00b fd7f 	bl	800ce42 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	223c      	movs	r2, #60	; 0x3c
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f00b fd79 	bl	800ce42 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_ADC2_Init+0x140>)
 8001352:	4a48      	ldr	r2, [pc, #288]	; (8001474 <MX_ADC2_Init+0x144>)
 8001354:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001356:	4b46      	ldr	r3, [pc, #280]	; (8001470 <MX_ADC2_Init+0x140>)
 8001358:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800135c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <MX_ADC2_Init+0x140>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <MX_ADC2_Init+0x140>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <MX_ADC2_Init+0x140>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <MX_ADC2_Init+0x140>)
 8001372:	2201      	movs	r2, #1
 8001374:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <MX_ADC2_Init+0x140>)
 8001378:	2204      	movs	r2, #4
 800137a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800137c:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <MX_ADC2_Init+0x140>)
 800137e:	2200      	movs	r2, #0
 8001380:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <MX_ADC2_Init+0x140>)
 8001384:	2200      	movs	r2, #0
 8001386:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <MX_ADC2_Init+0x140>)
 800138a:	2201      	movs	r2, #1
 800138c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <MX_ADC2_Init+0x140>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <MX_ADC2_Init+0x140>)
 8001398:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <MX_ADC2_Init+0x140>)
 80013a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <MX_ADC2_Init+0x140>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <MX_ADC2_Init+0x140>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MX_ADC2_Init+0x140>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <MX_ADC2_Init+0x140>)
 80013be:	f001 fa47 	bl	8002850 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC2_Init+0x9c>
  {
    Error_Handler();
 80013c8:	f000 fb32 	bl	8001a30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_ADC2_Init+0x148>)
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d0:	2306      	movs	r3, #6
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d8:	237f      	movs	r3, #127	; 0x7f
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013dc:	2304      	movs	r3, #4
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	4619      	mov	r1, r3
 80013ea:	4821      	ldr	r0, [pc, #132]	; (8001470 <MX_ADC2_Init+0x140>)
 80013ec:	f001 fdf2 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80013f6:	f000 fb1b 	bl	8001a30 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_ADC2_Init+0x148>)
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013fe:	2309      	movs	r3, #9
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001406:	237f      	movs	r3, #127	; 0x7f
 8001408:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800140a:	2304      	movs	r3, #4
 800140c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001428:	2384      	movs	r3, #132	; 0x84
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_ADC2_Init+0x140>)
 800143c:	f002 fcaa 	bl	8003d94 <HAL_ADCEx_InjectedConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 8001446:	f000 faf3 	bl	8001a30 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_ADC2_Init+0x14c>)
 800144c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800144e:	f240 130f 	movw	r3, #271	; 0x10f
 8001452:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_ADC2_Init+0x140>)
 800145a:	f002 fc9b 	bl	8003d94 <HAL_ADCEx_InjectedConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8001464:	f000 fae4 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3760      	adds	r7, #96	; 0x60
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000260 	.word	0x20000260
 8001474:	50000100 	.word	0x50000100
 8001478:	10c00010 	.word	0x10c00010
 800147c:	14f00020 	.word	0x14f00020

08001480 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C3_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C3_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_I2C3_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014bc:	f003 fd72 	bl	8004fa4 <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 fab3 	bl	8001a30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014ce:	f003 fdf8 	bl	80050c2 <HAL_I2CEx_ConfigAnalogFilter>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 faaa 	bl	8001a30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014e0:	f003 fe3a 	bl	8005158 <HAL_I2CEx_ConfigDigitalFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 faa1 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200002cc 	.word	0x200002cc
 80014f8:	40007800 	.word	0x40007800
 80014fc:	10802d9b 	.word	0x10802d9b

08001500 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09e      	sub	sp, #120	; 0x78
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001520:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2234      	movs	r2, #52	; 0x34
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f00b fc7b 	bl	800ce42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154c:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <MX_TIM1_Init+0x1e4>)
 8001550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001558:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800155a:	2220      	movs	r2, #32
 800155c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM_CLK_MHz*1000000/PWM_FREQUENCY/2;
 800155e:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001560:	f640 3211 	movw	r2, #2833	; 0xb11
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156c:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001578:	4859      	ldr	r0, [pc, #356]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800157a:	f004 fe11 	bl	80061a0 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001584:	f000 fa54 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001592:	4619      	mov	r1, r3
 8001594:	4852      	ldr	r0, [pc, #328]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001596:	f005 fc19 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015a0:	f000 fa46 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015a4:	484e      	ldr	r0, [pc, #312]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 80015a6:	f004 ff1f 	bl	80063e8 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80015b0:	f000 fa3e 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80015b4:	2370      	movs	r3, #112	; 0x70
 80015b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4846      	ldr	r0, [pc, #280]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 80015c8:	f006 fc7c 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80015d2:	f000 fa2d 	bl	8001a30 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80015d6:	2301      	movs	r3, #1
 80015d8:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80015da:	2301      	movs	r3, #1
 80015dc:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80015e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015e6:	461a      	mov	r2, r3
 80015e8:	2102      	movs	r1, #2
 80015ea:	483d      	ldr	r0, [pc, #244]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 80015ec:	f006 fd8c 	bl	8008108 <HAL_TIMEx_ConfigBreakInput>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015f6:	f000 fa1b 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	2360      	movs	r3, #96	; 0x60
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001606:	2300      	movs	r3, #0
 8001608:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	482f      	ldr	r0, [pc, #188]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001622:	f005 fabf 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800162c:	f000 fa00 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4829      	ldr	r0, [pc, #164]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800163a:	f005 fab3 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001644:	f000 f9f4 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001648:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800164c:	2208      	movs	r2, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 8001652:	f005 faa7 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 800165c:	f000 f9e8 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001664:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001668:	220c      	movs	r2, #12
 800166a:	4619      	mov	r1, r3
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800166e:	f005 fa99 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001678:	f000 f9da 	bl	8001a30 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 800167e:	f006 fe1b 	bl	80082b8 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001686:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 5;
 8001694:	2305      	movs	r3, #5
 8001696:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 3;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80016b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 80016c4:	f006 fc80 	bl	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x1d2>
  {
    Error_Handler();
 80016ce:	f000 f9af 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM1_Init+0x1e0>)
 80016d4:	f000 fbc2 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3778      	adds	r7, #120	; 0x78
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000318 	.word	0x20000318
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM2_Init+0x98>)
 8001708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM2_Init+0x98>)
 8001710:	22a9      	movs	r2, #169	; 0xa9
 8001712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM2_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM2_Init+0x98>)
 800171c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_TIM2_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM2_Init+0x98>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM2_Init+0x98>)
 8001730:	f004 fd36 	bl	80061a0 <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800173a:	f000 f979 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM2_Init+0x98>)
 800174c:	f005 fb3e 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001756:	f000 f96b 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM2_Init+0x98>)
 8001768:	f006 fbac 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001772:	f000 f95d 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000364 	.word	0x20000364

08001784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b090      	sub	sp, #64	; 0x40
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <MX_TIM3_Init+0x134>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17-1;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017c8:	2210      	movs	r2, #16
 80017ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e6:	4833      	ldr	r0, [pc, #204]	; (80018b4 <MX_TIM3_Init+0x130>)
 80017e8:	f004 fcda 	bl	80061a0 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80017f2:	f000 f91d 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	4619      	mov	r1, r3
 8001802:	482c      	ldr	r0, [pc, #176]	; (80018b4 <MX_TIM3_Init+0x130>)
 8001804:	f005 fae2 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800180e:	f000 f90f 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001812:	4828      	ldr	r0, [pc, #160]	; (80018b4 <MX_TIM3_Init+0x130>)
 8001814:	f004 ff4a 	bl	80066ac <HAL_TIM_IC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800181e:	f000 f907 	bl	8001a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001822:	2304      	movs	r3, #4
 8001824:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001826:	2350      	movs	r3, #80	; 0x50
 8001828:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	481e      	ldr	r0, [pc, #120]	; (80018b4 <MX_TIM3_Init+0x130>)
 800183a:	f005 fbc1 	bl	8006fc0 <HAL_TIM_SlaveConfigSynchro>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001844:	f000 f8f4 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4817      	ldr	r0, [pc, #92]	; (80018b4 <MX_TIM3_Init+0x130>)
 8001858:	f006 fb34 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001862:	f000 f8e5 	bl	8001a30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_TIM3_Init+0x130>)
 800187e:	f005 f8f5 	bl	8006a6c <HAL_TIM_IC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001888:	f000 f8d2 	bl	8001a30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800188c:	2302      	movs	r3, #2
 800188e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001890:	2302      	movs	r3, #2
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	2204      	movs	r2, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <MX_TIM3_Init+0x130>)
 800189c:	f005 f8e6 	bl	8006a6c <HAL_TIM_IC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 80018a6:	f000 f8c3 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3740      	adds	r7, #64	; 0x40
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003b0 	.word	0x200003b0
 80018b8:	40000400 	.word	0x40000400

080018bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018c2:	4a23      	ldr	r2, [pc, #140]	; (8001950 <MX_USART2_UART_Init+0x94>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018c8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80018cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001906:	f006 fd55 	bl	80083b4 <HAL_UART_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001910:	f000 f88e 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001918:	f008 ff11 	bl	800a73e <HAL_UARTEx_SetTxFifoThreshold>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001922:	f000 f885 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001926:	2100      	movs	r1, #0
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x90>)
 800192a:	f008 ff46 	bl	800a7ba <HAL_UARTEx_SetRxFifoThreshold>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001934:	f000 f87c 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_USART2_UART_Init+0x90>)
 800193a:	f008 fec7 	bl	800a6cc <HAL_UARTEx_DisableFifoMode>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001944:	f000 f874 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200003fc 	.word	0x200003fc
 8001950:	40004400 	.word	0x40004400

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <MX_GPIO_Init+0xd4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <MX_GPIO_Init+0xd4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <MX_GPIO_Init+0xd4>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MX_GPIO_Init+0xd4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_GPIO_Init+0xd4>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <MX_GPIO_Init+0xd4>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_GPIO_Init+0xd4>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2120      	movs	r1, #32
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d2:	f003 fab5 	bl	8004f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	4813      	ldr	r0, [pc, #76]	; (8001a2c <MX_GPIO_Init+0xd8>)
 80019de:	f003 faaf 	bl	8004f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019e2:	2320      	movs	r3, #32
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2302      	movs	r3, #2
 80019f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fc:	f003 f91e 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_GPIO_Init+0xd8>)
 8001a1a:	f003 f90f 	bl	8004c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_MspInit+0x48>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_MspInit+0x48>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_MspInit+0x48>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_MspInit+0x48>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_MspInit+0x48>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_MspInit+0x48>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001a72:	2004      	movs	r0, #4
 8001a74:	f002 ffe2 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a78:	f003 fc5e 	bl	8005338 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	; 0x78
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	2244      	movs	r2, #68	; 0x44
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00b f9ca 	bl	800ce42 <memset>
  if(hadc->Instance==ADC1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab6:	d15f      	bne.n	8001b78 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001abe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f979 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ad4:	f7ff ffac 	bl	8001a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ad8:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a5a      	ldr	r2, [pc, #360]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001ae0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ae2:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10b      	bne.n	8001b02 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aea:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = VBUS_ADC1_1_Pin|U_CURR_ADC1_2_Pin;
 8001b32:	2303      	movs	r3, #3
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f003 f878 	bl	8004c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_CURR_ADC1_14_Pin;
 8001b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(V_CURR_ADC1_14_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b5e:	4619      	mov	r1, r3
 8001b60:	483b      	ldr	r0, [pc, #236]	; (8001c50 <HAL_ADC_MspInit+0x1c8>)
 8001b62:	f003 f86b 	bl	8004c3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2012      	movs	r0, #18
 8001b6c:	f002 ff71 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b70:	2012      	movs	r0, #18
 8001b72:	f002 ff88 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b76:	e062      	b.n	8001c3e <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <HAL_ADC_MspInit+0x1cc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d15d      	bne.n	8001c3e <HAL_ADC_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 f914 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 8001b9e:	f7ff ff47 	bl	8001a30 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001baa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_ADC_MspInit+0x1c0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_ADC_MspInit+0x1c4>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = W_CURR_ADC2_4_Pin;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c00:	2303      	movs	r3, #3
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(W_CURR_ADC2_4_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f003 f813 	bl	8004c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_ADC_Pin;
 8001c16:	2310      	movs	r3, #16
 8001c18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ENCODER_ADC_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c26:	4619      	mov	r1, r3
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <HAL_ADC_MspInit+0x1d0>)
 8001c2a:	f003 f807 	bl	8004c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2101      	movs	r1, #1
 8001c32:	2012      	movs	r0, #18
 8001c34:	f002 ff0d 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c38:	2012      	movs	r0, #18
 8001c3a:	f002 ff24 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3778      	adds	r7, #120	; 0x78
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000048c 	.word	0x2000048c
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	50000100 	.word	0x50000100
 8001c58:	48000800 	.word	0x48000800

08001c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b09a      	sub	sp, #104	; 0x68
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2244      	movs	r2, #68	; 0x44
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00b f8e0 	bl	800ce42 <memset>
  if(hi2c->Instance==I2C3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_I2C_MspInit+0xa8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d137      	bne.n	8001cfc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f890 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ca6:	f7ff fec3 	bl	8001a30 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = ENCODER_SCL_Pin|ENCODER_SDA_Pin;
 8001cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc8:	2312      	movs	r3, #18
 8001cca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <HAL_I2C_MspInit+0xb0>)
 8001ce0:	f002 ffac 	bl	8004c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_I2C_MspInit+0xac>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3768      	adds	r7, #104	; 0x68
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40007800 	.word	0x40007800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000800 	.word	0x48000800

08001d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_TIM_Base_MspInit+0x140>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d13a      	bne.n	8001da8 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3e:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	4a41      	ldr	r2, [pc, #260]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = TIM1_BRAKE_Pin;
 8001d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d68:	2312      	movs	r3, #18
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8001d74:	230c      	movs	r3, #12
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f002 ff5b 	bl	8004c3c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2018      	movs	r0, #24
 8001d8c:	f002 fe61 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d90:	2018      	movs	r0, #24
 8001d92:	f002 fe78 	bl	8004a86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2019      	movs	r0, #25
 8001d9c:	f002 fe59 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001da0:	2019      	movs	r0, #25
 8001da2:	f002 fe70 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da6:	e04f      	b.n	8001e48 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db0:	d114      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2101      	movs	r1, #1
 8001dce:	201c      	movs	r0, #28
 8001dd0:	f002 fe3f 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd4:	201c      	movs	r0, #28
 8001dd6:	f002 fe56 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 8001dda:	e035      	b.n	8001e48 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_TIM_Base_MspInit+0x148>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d130      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_TIM_Base_MspInit+0x144>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_ENCODER_IN_Pin;
 8001e16:	2340      	movs	r3, #64	; 0x40
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_ENCODER_IN_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e34:	f002 ff02 	bl	8004c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	201d      	movs	r0, #29
 8001e3e:	f002 fe08 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e42:	201d      	movs	r0, #29
 8001e44:	f002 fe1f 	bl	8004a86 <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40000400 	.word	0x40000400

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <HAL_TIM_MspPostInit+0xc4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d14b      	bne.n	8001f16 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_TIM_MspPostInit+0xc8>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_H_DOWN_Pin|V_H_DOWN_Pin;
 8001eae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4817      	ldr	r0, [pc, #92]	; (8001f28 <HAL_TIM_MspPostInit+0xcc>)
 8001ecc:	f002 feb6 	bl	8004c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_H_DOWN_Pin;
 8001ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_H_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	480e      	ldr	r0, [pc, #56]	; (8001f28 <HAL_TIM_MspPostInit+0xcc>)
 8001eee:	f002 fea5 	bl	8004c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_H_UP_Pin|V_H_UP_Pin|W_H_UP_Pin;
 8001ef2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f04:	2306      	movs	r3, #6
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f002 fe93 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400

08001f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09a      	sub	sp, #104	; 0x68
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2244      	movs	r2, #68	; 0x44
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00a ff78 	bl	800ce42 <memset>
  if(huart->Instance==USART2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d13e      	bne.n	8001fda <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 ff29 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f74:	f7ff fd5c 	bl	8001a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Debug_Tx_Pin|Debug_Rx_Pin;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f002 fe39 	bl	8004c3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	2026      	movs	r0, #38	; 0x26
 8001fd0:	f002 fd3f 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd4:	2026      	movs	r0, #38	; 0x26
 8001fd6:	f002 fd56 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3768      	adds	r7, #104	; 0x68
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40021000 	.word	0x40021000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler+0x4>

0800200a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002038:	f000 f99a 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <ADC1_2_IRQHandler+0x14>)
 8002046:	f000 fd8d 	bl	8002b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <ADC1_2_IRQHandler+0x18>)
 800204c:	f000 fd8a 	bl	8002b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200001f4 	.word	0x200001f4
 8002058:	20000260 	.word	0x20000260

0800205c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002062:	f004 fb84 	bl	800676e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000318 	.word	0x20000318

08002070 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002076:	f004 fb7a 	bl	800676e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000318 	.word	0x20000318

08002084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM2_IRQHandler+0x10>)
 800208a:	f004 fb70 	bl	800676e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000364 	.word	0x20000364

08002098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM3_IRQHandler+0x10>)
 800209e:	f004 fb66 	bl	800676e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200003b0 	.word	0x200003b0

080020ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <USART2_IRQHandler+0x10>)
 80020b2:	f006 fb63 	bl	800877c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200003fc 	.word	0x200003fc

080020c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_kill>:

int _kill(int pid, int sig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020da:	f00a ff05 	bl	800cee8 <__errno>
 80020de:	4603      	mov	r3, r0
 80020e0:	2216      	movs	r2, #22
 80020e2:	601a      	str	r2, [r3, #0]
  return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_exit>:

void _exit (int status)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002102:	e7fe      	b.n	8002102 <_exit+0x12>

08002104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e00a      	b.n	800212c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002116:	f3af 8000 	nop.w
 800211a:	4601      	mov	r1, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf0      	blt.n	8002116 <_read+0x12>
  }

  return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e009      	b.n	8002164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf1      	blt.n	8002150 <_write+0x12>
  }
  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_isatty>:

int _isatty(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f00a fe6a 	bl	800cee8 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20008000 	.word	0x20008000
 8002240:	00000400 	.word	0x00000400
 8002244:	20000490 	.word	0x20000490
 8002248:	20000818 	.word	0x20000818

0800224c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <SystemInit+0x28>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <SystemInit+0x28>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SystemInit+0x28>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	609a      	str	r2, [r3, #8]
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800227a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a2:	f7ff ffd3 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f00a fe25 	bl	800cef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022aa:	f7fe fec9 	bl	8001040 <main>

080022ae <LoopForever>:

LoopForever:
    b LoopForever
 80022ae:	e7fe      	b.n	80022ae <LoopForever>
  ldr   r0, =_estack
 80022b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022bc:	080120d0 	.word	0x080120d0
  ldr r2, =_sbss
 80022c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022c4:	20000814 	.word	0x20000814

080022c8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <COMP1_2_3_IRQHandler>

080022ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f002 fbb1 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 f80e 	bl	80022fc <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e001      	b.n	80022f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ec:	f7ff fba6 	bl	8001a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f0:	79fb      	ldrb	r3, [r7, #7]

}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_InitTick+0x6c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_InitTick+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fbbc 	bl	8004aa2 <HAL_SYSTICK_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d809      	bhi.n	800234a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002336:	2200      	movs	r2, #0
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	f002 fb88 	bl	8004a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_InitTick+0x70>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e007      	b.n	800235a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e004      	b.n	800235a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000008 	.word	0x20000008
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x1c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x20>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4413      	add	r3, r2
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_IncTick+0x1c>)
 8002380:	6013      	str	r3, [r2, #0]
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	20000494 	.word	0x20000494
 8002390:	20000008 	.word	0x20000008

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000494 	.word	0x20000494

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d004      	beq.n	80023d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_Delay+0x40>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d0:	bf00      	nop
 80023d2:	f7ff ffdf 	bl	8002394 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d8f7      	bhi.n	80023d2 <HAL_Delay+0x26>
  {
  }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000008 	.word	0x20000008

080023f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3360      	adds	r3, #96	; 0x60
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LL_ADC_SetOffset+0x44>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	4313      	orrs	r3, r2
 8002488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	03fff000 	.word	0x03fff000

080024a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3360      	adds	r3, #96	; 0x60
 80024ae:	461a      	mov	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3360      	adds	r3, #96	; 0x60
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3360      	adds	r3, #96	; 0x60
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	615a      	str	r2, [r3, #20]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b087      	sub	sp, #28
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3330      	adds	r3, #48	; 0x30
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	4413      	add	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	211f      	movs	r1, #31
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	f003 011f 	and.w	r1, r3, #31
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3314      	adds	r3, #20
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	0e5b      	lsrs	r3, r3, #25
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0d1b      	lsrs	r3, r3, #20
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2107      	movs	r1, #7
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	401a      	ands	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0d1b      	lsrs	r3, r3, #20
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10a      	bne.n	80026ba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80026b8:	e00a      	b.n	80026d0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	43db      	mvns	r3, r3
 80026c8:	401a      	ands	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	407f0000 	.word	0x407f0000

080026e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 031f 	and.w	r3, r3, #31
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6093      	str	r3, [r2, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002750:	d101      	bne.n	8002756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <LL_ADC_IsEnabled+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_ADC_IsEnabled+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d101      	bne.n	800281a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d101      	bne.n	8002840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e177      	b.n	8002b5a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff f905 	bl	8001a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff53 	bl	800273c <LL_ADC_IsDeepPowerDownEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff39 	bl	8002718 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff6e 	bl	800278c <LL_ADC_IsInternalRegulatorEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff52 	bl	8002764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c0:	4b9c      	ldr	r3, [pc, #624]	; (8002b34 <HAL_ADC_Init+0x2e4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	4a9c      	ldr	r2, [pc, #624]	; (8002b38 <HAL_ADC_Init+0x2e8>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff50 	bl	800278c <LL_ADC_IsInternalRegulatorEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff75 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8110 	bne.w	8002b48 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 810c 	bne.w	8002b48 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002938:	f043 0202 	orr.w	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff49 	bl	80027dc <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002954:	f7ff ff42 	bl	80027dc <LL_ADC_IsEnabled>
 8002958:	4604      	mov	r4, r0
 800295a:	4878      	ldr	r0, [pc, #480]	; (8002b3c <HAL_ADC_Init+0x2ec>)
 800295c:	f7ff ff3e 	bl	80027dc <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	4874      	ldr	r0, [pc, #464]	; (8002b40 <HAL_ADC_Init+0x2f0>)
 8002970:	f7ff fd3e 	bl	80023f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7f5b      	ldrb	r3, [r3, #29]
 8002978:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002984:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800298a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002992:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	045b      	lsls	r3, r3, #17
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	4b5c      	ldr	r3, [pc, #368]	; (8002b44 <HAL_ADC_Init+0x2f4>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff01 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002a00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff0e 	bl	8002828 <LL_ADC_INJ_IsConversionOngoing>
 8002a0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d16d      	bne.n	8002af0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d16a      	bne.n	8002af0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a36:	f023 0302 	bic.w	r3, r3, #2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6911      	ldr	r1, [r2, #16]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a7a:	e013      	b.n	8002aa4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d118      	bne.n	8002ae0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	e007      	b.n	8002af0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10c      	bne.n	8002b12 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f023 010f 	bic.w	r1, r3, #15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	e007      	b.n	8002b22 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 020f 	bic.w	r2, r2, #15
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b32:	e011      	b.n	8002b58 <HAL_ADC_Init+0x308>
 8002b34:	20000000 	.word	0x20000000
 8002b38:	053e2d63 	.word	0x053e2d63
 8002b3c:	50000100 	.word	0x50000100
 8002b40:	50000300 	.word	0x50000300
 8002b44:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b80:	4883      	ldr	r0, [pc, #524]	; (8002d90 <HAL_ADC_IRQHandler+0x22c>)
 8002b82:	f7ff fdad 	bl	80026e0 <LL_ADC_GetMultimode>
 8002b86:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x5e>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f001 f8e3 	bl	8003d80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_IRQHandler+0x72>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8085 	beq.w	8002cec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07f      	beq.n	8002cec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fcc3 	bl	8002594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d064      	beq.n	8002cde <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5e      	ldr	r2, [pc, #376]	; (8002d94 <HAL_ADC_IRQHandler+0x230>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d002      	beq.n	8002c24 <HAL_ADC_IRQHandler+0xc0>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e001      	b.n	8002c28 <HAL_ADC_IRQHandler+0xc4>
 8002c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d008      	beq.n	8002c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d104      	bne.n	8002c4c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	623b      	str	r3, [r7, #32]
 8002c4a:	e00d      	b.n	8002c68 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_ADC_IRQHandler+0x230>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d002      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xf8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e001      	b.n	8002c60 <HAL_ADC_IRQHandler+0xfc>
 8002c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c60:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d135      	bne.n	8002cde <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d12e      	bne.n	8002cde <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fdbc 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11a      	bne.n	8002cc6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 020c 	bic.w	r2, r2, #12
 8002c9e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d112      	bne.n	8002cde <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc4:	e00b      	b.n	8002cde <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f95a 	bl	8002f98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	220c      	movs	r2, #12
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x19c>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 809e 	beq.w	8002e48 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8098 	beq.w	8002e48 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fc6c 	bl	8002612 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d3a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fc27 	bl	8002594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d46:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_ADC_IRQHandler+0x230>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d002      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x1f4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	e001      	b.n	8002d5c <HAL_ADC_IRQHandler+0x1f8>
 8002d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d008      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d002      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	d104      	bne.n	8002d80 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	e011      	b.n	8002da4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_ADC_IRQHandler+0x230>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d006      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x234>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e005      	b.n	8002d9c <HAL_ADC_IRQHandler+0x238>
 8002d90:	50000300 	.word	0x50000300
 8002d94:	50000100 	.word	0x50000100
 8002d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d9c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d047      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x260>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03f      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d13a      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d133      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d12e      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fd21 	bl	8002828 <LL_ADC_INJ_IsConversionOngoing>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11a      	bne.n	8002e22 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dfa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d112      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e20:	e00b      	b.n	8002e3a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f007 fe1c 	bl	800aa78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2260      	movs	r2, #96	; 0x60
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d011      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x312>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00c      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f89f 	bl	8002fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x342>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 ff5e 	bl	8003d58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0x372>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff50 	bl	8003d6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d036      	beq.n	8002f4e <HAL_ADC_IRQHandler+0x3ea>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d031      	beq.n	8002f4e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	e014      	b.n	8002f22 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002efe:	4825      	ldr	r0, [pc, #148]	; (8002f94 <HAL_ADC_IRQHandler+0x430>)
 8002f00:	f7ff fbfc 	bl	80026fc <LL_ADC_GetMultiDMATransfer>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	e008      	b.n	8002f22 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10e      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f38:	f043 0202 	orr.w	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f83d 	bl	8002fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x426>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d013      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fedd 	bl	8003d44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	50000300 	.word	0x50000300

08002f98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0b6      	sub	sp, #216	; 0xd8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x22>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e3c8      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7b4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fbfd 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 83ad 	bne.w	800376a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff facc 	bl	80025ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fbeb 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 800302c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fbf7 	bl	8002828 <LL_ADC_INJ_IsConversionOngoing>
 800303a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800303e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 81d9 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 81d4 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800305a:	d10f      	bne.n	800307c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	4619      	mov	r1, r3
 8003068:	f7ff fae6 	bl	8002638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fa7a 	bl	800256e <LL_ADC_SetSamplingTimeCommonConfig>
 800307a:	e00e      	b.n	800309a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	461a      	mov	r2, r3
 800308a:	f7ff fad5 	bl	8002638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fa6a 	bl	800256e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d022      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6919      	ldr	r1, [r3, #16]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030cc:	f7ff f9c4 	bl	8002458 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6919      	ldr	r1, [r3, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	461a      	mov	r2, r3
 80030de:	f7ff fa10 	bl	8002502 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	7f1b      	ldrb	r3, [r3, #28]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x124>
 80030f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f6:	e000      	b.n	80030fa <HAL_ADC_ConfigChannel+0x126>
 80030f8:	2300      	movs	r3, #0
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7ff fa1c 	bl	8002538 <LL_ADC_SetOffsetSaturation>
 8003100:	e17b      	b.n	80033fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f9c9 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_ADC_ConfigChannel+0x15a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f9be 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	e01e      	b.n	800316c <HAL_ADC_ConfigChannel+0x198>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f9b3 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800314c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e004      	b.n	800316a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1b0>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	e018      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x1e2>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f982 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f966 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x220>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f95b 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	e01e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x25e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f950 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800321a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e004      	b.n	8003230 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_ADC_ConfigChannel+0x276>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	e018      	b.n	800327c <HAL_ADC_ConfigChannel+0x2a8>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800325e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800326e:	2320      	movs	r3, #32
 8003270:	e004      	b.n	800327c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327c:	429a      	cmp	r2, r3
 800327e:	d106      	bne.n	800328e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f91f 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f903 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x2e6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f8f8 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	e01e      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x324>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f8ed 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e004      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80032ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x33c>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	e016      	b.n	800333e <HAL_ADC_ConfigChannel+0x36a>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e004      	b.n	800333e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800333e:	429a      	cmp	r2, r3
 8003340:	d106      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f8be 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2103      	movs	r1, #3
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f8a2 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_ADC_ConfigChannel+0x3a8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2103      	movs	r1, #3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f897 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	e017      	b.n	80033ac <HAL_ADC_ConfigChannel+0x3d8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2103      	movs	r1, #3
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f88c 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003396:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80033a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x3f0>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	e011      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x414>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d106      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2103      	movs	r1, #3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f869 	bl	80024cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f9ec 	bl	80027dc <LL_ADC_IsEnabled>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8140 	bne.w	800368c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	461a      	mov	r2, r3
 800341a:	f7ff f939 	bl	8002690 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a8f      	ldr	r2, [pc, #572]	; (8003660 <HAL_ADC_ConfigChannel+0x68c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f040 8131 	bne.w	800368c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x47e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	3301      	adds	r3, #1
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2b09      	cmp	r3, #9
 8003448:	bf94      	ite	ls
 800344a:	2301      	movls	r3, #1
 800344c:	2300      	movhi	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e019      	b.n	8003486 <HAL_ADC_ConfigChannel+0x4b2>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003462:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e003      	b.n	8003476 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800346e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2b09      	cmp	r3, #9
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003486:	2b00      	cmp	r3, #0
 8003488:	d079      	beq.n	800357e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x4d2>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a4:	e015      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x4fe>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	069b      	lsls	r3, r3, #26
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x51e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	e017      	b.n	8003522 <HAL_ADC_ConfigChannel+0x54e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x574>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0e9b      	lsrs	r3, r3, #26
 8003538:	3301      	adds	r3, #1
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	051b      	lsls	r3, r3, #20
 8003546:	e018      	b.n	800357a <HAL_ADC_ConfigChannel+0x5a6>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 021f 	and.w	r2, r3, #31
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357a:	430b      	orrs	r3, r1
 800357c:	e081      	b.n	8003682 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <HAL_ADC_ConfigChannel+0x5c6>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0e9b      	lsrs	r3, r3, #26
 8003590:	3301      	adds	r3, #1
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003598:	e015      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x5f2>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035b2:	2320      	movs	r3, #32
 80035b4:	e003      	b.n	80035be <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	069b      	lsls	r3, r3, #26
 80035c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x612>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0e9b      	lsrs	r3, r3, #26
 80035d8:	3301      	adds	r3, #1
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	e017      	b.n	8003616 <HAL_ADC_ConfigChannel+0x642>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
  return result;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80035fe:	2320      	movs	r3, #32
 8003600:	e003      	b.n	800360a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	ea42 0103 	orr.w	r1, r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x66e>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	3301      	adds	r3, #1
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	3b1e      	subs	r3, #30
 800363a:	051b      	lsls	r3, r3, #20
 800363c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003640:	e01e      	b.n	8003680 <HAL_ADC_ConfigChannel+0x6ac>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	613b      	str	r3, [r7, #16]
  return result;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e006      	b.n	800366c <HAL_ADC_ConfigChannel+0x698>
 800365e:	bf00      	nop
 8003660:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f003 021f 	and.w	r2, r3, #31
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	3b1e      	subs	r3, #30
 800367a:	051b      	lsls	r3, r3, #20
 800367c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	430b      	orrs	r3, r1
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	6892      	ldr	r2, [r2, #8]
 8003686:	4619      	mov	r1, r3
 8003688:	f7fe ffd6 	bl	8002638 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_ADC_ConfigChannel+0x7bc>)
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d071      	beq.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003698:	483e      	ldr	r0, [pc, #248]	; (8003794 <HAL_ADC_ConfigChannel+0x7c0>)
 800369a:	f7fe fecf 	bl	800243c <LL_ADC_GetCommonPathInternalCh>
 800369e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_ADC_ConfigChannel+0x7c4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x6e2>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3a      	ldr	r2, [pc, #232]	; (800379c <HAL_ADC_ConfigChannel+0x7c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d127      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d121      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ca:	d157      	bne.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036d4:	4619      	mov	r1, r3
 80036d6:	482f      	ldr	r0, [pc, #188]	; (8003794 <HAL_ADC_ConfigChannel+0x7c0>)
 80036d8:	f7fe fe9d 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	4a30      	ldr	r2, [pc, #192]	; (80037a4 <HAL_ADC_ConfigChannel+0x7d0>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f6:	e002      	b.n	80036fe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f9      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003704:	e03a      	b.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_ADC_ConfigChannel+0x7d4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d113      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x764>
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_ADC_ConfigChannel+0x7d8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d02a      	beq.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	4619      	mov	r1, r3
 8003730:	4818      	ldr	r0, [pc, #96]	; (8003794 <HAL_ADC_ConfigChannel+0x7c0>)
 8003732:	f7fe fe70 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003736:	e021      	b.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d11c      	bne.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_ADC_ConfigChannel+0x7d8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d011      	beq.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800375c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003760:	4619      	mov	r1, r3
 8003762:	480c      	ldr	r0, [pc, #48]	; (8003794 <HAL_ADC_ConfigChannel+0x7c0>)
 8003764:	f7fe fe57 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
 8003768:	e008      	b.n	800377c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003784:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003788:	4618      	mov	r0, r3
 800378a:	37d8      	adds	r7, #216	; 0xd8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	80080000 	.word	0x80080000
 8003794:	50000300 	.word	0x50000300
 8003798:	c3210000 	.word	0xc3210000
 800379c:	90c00010 	.word	0x90c00010
 80037a0:	20000000 	.word	0x20000000
 80037a4:	053e2d63 	.word	0x053e2d63
 80037a8:	c7520000 	.word	0xc7520000
 80037ac:	50000100 	.word	0x50000100
 80037b0:	cb840000 	.word	0xcb840000

080037b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f80b 	bl	80027dc <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d14d      	bne.n	8003868 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <ADC_Enable+0xc0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f043 0210 	orr.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e039      	b.n	800386a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe ffda 	bl	80027b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003800:	f7fe fdc8 	bl	8002394 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003806:	e028      	b.n	800385a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe ffe5 	bl	80027dc <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe ffc9 	bl	80027b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003822:	f7fe fdb7 	bl	8002394 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d914      	bls.n	800385a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d00d      	beq.n	800385a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f043 0210 	orr.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e007      	b.n	800386a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d1cf      	bne.n	8003808 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	8000003f 	.word	0x8000003f

08003878 <LL_ADC_SetCommonPathInternalCh>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_ADC_GetCommonPathInternalCh>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <LL_ADC_SetOffset>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3360      	adds	r3, #96	; 0x60
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <LL_ADC_SetOffset+0x44>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	03fff000 	.word	0x03fff000

08003904 <LL_ADC_GetOffsetChannel>:
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	461a      	mov	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_SetOffsetState>:
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3360      	adds	r3, #96	; 0x60
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_ADC_SetOffsetSign>:
{
 8003966:	b480      	push	{r7}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	431a      	orrs	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_SetOffsetSaturation>:
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3360      	adds	r3, #96	; 0x60
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	615a      	str	r2, [r3, #20]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_ADC_INJ_GetTrigAuto>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_SetChannelSamplingTime>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3314      	adds	r3, #20
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	0e5b      	lsrs	r3, r3, #25
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	4413      	add	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	0d1b      	lsrs	r3, r3, #20
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2107      	movs	r1, #7
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	0d1b      	lsrs	r3, r3, #20
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <LL_ADC_SetChannelSingleDiff>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10a      	bne.n	8003a96 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a94:	e00a      	b.n	8003aac <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	407f0000 	.word	0x407f0000

08003abc <LL_ADC_GetMultimode>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_IsEnabled>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <LL_ADC_IsEnabled+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_ADC_IsEnabled+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_REG_IsConversionOngoing>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d101      	bne.n	8003b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_INJ_StartConversion>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b38:	f043 0208 	orr.w	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_INJ_IsConversionOngoing>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b7c:	4853      	ldr	r0, [pc, #332]	; (8003ccc <HAL_ADCEx_InjectedStart+0x158>)
 8003b7e:	f7ff ff9d 	bl	8003abc <LL_ADC_GetMultimode>
 8003b82:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ffdf 	bl	8003b4c <LL_ADC_INJ_IsConversionOngoing>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
 8003b96:	e094      	b.n	8003cc2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e07c      	b.n	8003cc2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADCEx_InjectedStart+0x62>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e075      	b.n	8003cc2 <HAL_ADCEx_InjectedStart+0x14e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fde8 	bl	80037b4 <ADC_Enable>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d164      	bne.n	8003cb8 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	f023 0208 	bic.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	; 0x60
 8003c06:	e002      	b.n	8003c0e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <HAL_ADCEx_InjectedStart+0x15c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d002      	beq.n	8003c32 <HAL_ADCEx_InjectedStart+0xbe>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	e001      	b.n	8003c36 <HAL_ADCEx_InjectedStart+0xc2>
 8003c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d002      	beq.n	8003c44 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2260      	movs	r2, #96	; 0x60
 8003c56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_ADCEx_InjectedStart+0x15c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d002      	beq.n	8003c70 <HAL_ADCEx_InjectedStart+0xfc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	e001      	b.n	8003c74 <HAL_ADCEx_InjectedStart+0x100>
 8003c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d008      	beq.n	8003c8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d002      	beq.n	8003c8e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	d10d      	bne.n	8003caa <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff feb0 	bl	80039f8 <LL_ADC_INJ_GetTrigAuto>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d110      	bne.n	8003cc0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff3e 	bl	8003b24 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cb6:	e003      	b.n	8003cc0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	50000300 	.word	0x50000300
 8003cd0:	50000100 	.word	0x50000100

08003cd4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f240 321b 	movw	r2, #795	; 0x31b
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_ADCEx_InjectedGetValue+0x32>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8003cee:	d21c      	bcs.n	8003d2a <HAL_ADCEx_InjectedGetValue+0x56>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f240 120f 	movw	r2, #271	; 0x10f
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d011      	beq.n	8003d1e <HAL_ADCEx_InjectedGetValue+0x4a>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f240 2215 	movw	r2, #533	; 0x215
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d006      	beq.n	8003d12 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003d04:	e011      	b.n	8003d2a <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0e:	60fb      	str	r3, [r7, #12]
      break;
 8003d10:	e011      	b.n	8003d36 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	60fb      	str	r3, [r7, #12]
      break;
 8003d1c:	e00b      	b.n	8003d36 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d26:	60fb      	str	r3, [r7, #12]
      break;
 8003d28:	e005      	b.n	8003d36 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	60fb      	str	r3, [r7, #12]
      break;
 8003d34:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0b6      	sub	sp, #216	; 0xd8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f000 bcb5 	b.w	8004728 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d130      	bne.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b09      	cmp	r3, #9
 8003ddc:	d179      	bne.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	025b      	lsls	r3, r3, #9
 8003dee:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003dfa:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e06:	e007      	b.n	8003e18 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	025b      	lsls	r3, r3, #9
 8003e10:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e1e:	4b84      	ldr	r3, [pc, #528]	; (8004030 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e34:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003e36:	e04c      	b.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003e64:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e70:	e004      	b.n	8003e7c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	f003 021f 	and.w	r2, r3, #31
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fe38 	bl	8003b4c <LL_ADC_INJ_IsConversionOngoing>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d124      	bne.n	8003f2c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d112      	bne.n	8003f12 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003efc:	055a      	lsls	r2, r3, #21
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f04:	051b      	lsls	r3, r3, #20
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e00c      	b.n	8003f2c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f22:	055a      	lsls	r2, r3, #21
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fde4 	bl	8003afe <LL_ADC_REG_IsConversionOngoing>
 8003f36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fe04 	bl	8003b4c <LL_ADC_INJ_IsConversionOngoing>
 8003f44:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 822e 	bne.w	80043ae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8229 	bne.w	80043ae <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f84:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f86:	e01f      	b.n	8003fc8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f96:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f98:	e016      	b.n	8003fc8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d109      	bne.n	8003fb8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003fb6:	e007      	b.n	8003fc8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003fc6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d110      	bne.n	8003ff4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0202 	orr.w	r2, r2, #2
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e007      	b.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0202 	bic.w	r2, r2, #2
 8004002:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400c:	d112      	bne.n	8004034 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	f7ff fcfb 	bl	8003a14 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fcd3 	bl	80039d2 <LL_ADC_SetSamplingTimeCommonConfig>
 800402c:	e011      	b.n	8004052 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800402e:	bf00      	nop
 8004030:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	461a      	mov	r2, r3
 8004042:	f7ff fce7 	bl	8003a14 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fcc0 	bl	80039d2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	08db      	lsrs	r3, r3, #3
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d022      	beq.n	80040ba <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6919      	ldr	r1, [r3, #16]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004084:	f7ff fc1a 	bl	80038bc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6919      	ldr	r1, [r3, #16]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	461a      	mov	r2, r3
 8004096:	f7ff fc66 	bl	8003966 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d102      	bne.n	80040b0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80040aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ae:	e000      	b.n	80040b2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80040b0:	2300      	movs	r3, #0
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7ff fc72 	bl	800399c <LL_ADC_SetOffsetSaturation>
 80040b8:	e179      	b.n	80043ae <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fc1f 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fc14 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	0e9b      	lsrs	r3, r3, #26
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	e01e      	b.n	8004124 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fc09 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800410c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e004      	b.n	8004122 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	e018      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e004      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800416e:	429a      	cmp	r2, r3
 8004170:	d106      	bne.n	8004180 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fbd8 	bl	8003930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fbbc 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fbb1 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	f003 021f 	and.w	r2, r3, #31
 80041aa:	e01e      	b.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x456>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fba6 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80041ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80041d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80041da:	2320      	movs	r3, #32
 80041dc:	e004      	b.n	80041e8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80041de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	e018      	b.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800421a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800421e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004226:	2320      	movs	r3, #32
 8004228:	e004      	b.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800422a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004234:	429a      	cmp	r2, r3
 8004236:	d106      	bne.n	8004246 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb75 	bl	8003930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb59 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004252:	4603      	mov	r3, r0
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2102      	movs	r1, #2
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fb4e 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004268:	4603      	mov	r3, r0
 800426a:	0e9b      	lsrs	r3, r3, #26
 800426c:	f003 021f 	and.w	r2, r3, #31
 8004270:	e01e      	b.n	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb43 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800427e:	4603      	mov	r3, r0
 8004280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80042a0:	2320      	movs	r3, #32
 80042a2:	e004      	b.n	80042ae <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80042a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	e014      	b.n	80042f2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80042d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80042dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e004      	b.n	80042f2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80042e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d106      	bne.n	8004304 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fb16 	bl	8003930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2103      	movs	r1, #3
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fafa 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004310:	4603      	mov	r3, r0
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2103      	movs	r1, #3
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff faef 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	f003 021f 	and.w	r2, r3, #31
 800432e:	e017      	b.n	8004360 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2103      	movs	r1, #3
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fae4 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800434c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004352:	2320      	movs	r3, #32
 8004354:	e003      	b.n	800435e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	fab3 f383 	clz	r3, r3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	e011      	b.n	800439c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800438a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e003      	b.n	800439c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800439c:	429a      	cmp	r2, r3
 800439e:	d106      	bne.n	80043ae <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2103      	movs	r1, #3
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fac1 	bl	8003930 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fb90 	bl	8003ad8 <LL_ADC_IsEnabled>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 8140 	bne.w	8004640 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f7ff fb4d 	bl	8003a6c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a8f      	ldr	r2, [pc, #572]	; (8004614 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	f040 8131 	bne.w	8004640 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	0e9b      	lsrs	r3, r3, #26
 80043f4:	3301      	adds	r3, #1
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2b09      	cmp	r3, #9
 80043fc:	bf94      	ite	ls
 80043fe:	2301      	movls	r3, #1
 8004400:	2300      	movhi	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e019      	b.n	800443a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004416:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800441e:	2320      	movs	r3, #32
 8004420:	e003      	b.n	800442a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2b09      	cmp	r3, #9
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800443a:	2b00      	cmp	r3, #0
 800443c:	d079      	beq.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	3301      	adds	r3, #1
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004458:	e015      	b.n	8004486 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004472:	2320      	movs	r3, #32
 8004474:	e003      	b.n	800447e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	3301      	adds	r3, #1
 8004480:	069b      	lsls	r3, r3, #26
 8004482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	3301      	adds	r3, #1
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	e017      	b.n	80044d6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e003      	b.n	80044ca <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80044c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	ea42 0103 	orr.w	r1, r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_ADCEx_InjectedConfigChannel+0x768>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	0e9b      	lsrs	r3, r3, #26
 80044ec:	3301      	adds	r3, #1
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	051b      	lsls	r3, r3, #20
 80044fa:	e018      	b.n	800452e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004514:	2320      	movs	r3, #32
 8004516:	e003      	b.n	8004520 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	f003 021f 	and.w	r2, r3, #31
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800452e:	430b      	orrs	r3, r1
 8004530:	e081      	b.n	8004636 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	3301      	adds	r3, #1
 8004546:	069b      	lsls	r3, r3, #26
 8004548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800454c:	e015      	b.n	800457a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e003      	b.n	8004572 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	3301      	adds	r3, #1
 8004574:	069b      	lsls	r3, r3, #26
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	3301      	adds	r3, #1
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	e017      	b.n	80045ca <HAL_ADCEx_InjectedConfigChannel+0x836>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	61bb      	str	r3, [r7, #24]
  return result;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	ea42 0103 	orr.w	r1, r2, r3
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	0e9b      	lsrs	r3, r3, #26
 80045e0:	3301      	adds	r3, #1
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	3b1e      	subs	r3, #30
 80045ee:	051b      	lsls	r3, r3, #20
 80045f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f4:	e01e      	b.n	8004634 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	60fb      	str	r3, [r7, #12]
  return result;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800460e:	2320      	movs	r3, #32
 8004610:	e006      	b.n	8004620 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004612:	bf00      	nop
 8004614:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	f003 021f 	and.w	r2, r3, #31
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	3b1e      	subs	r3, #30
 800462e:	051b      	lsls	r3, r3, #20
 8004630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004634:	430b      	orrs	r3, r1
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	4619      	mov	r1, r3
 800463c:	f7ff f9ea 	bl	8003a14 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d067      	beq.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800464c:	4839      	ldr	r0, [pc, #228]	; (8004734 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800464e:	f7ff f926 	bl	800389e <LL_ADC_GetCommonPathInternalCh>
 8004652:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a37      	ldr	r2, [pc, #220]	; (8004738 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	; (800473c <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d127      	bne.n	80046ba <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800466a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800466e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d121      	bne.n	80046ba <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800467e:	d14d      	bne.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004688:	4619      	mov	r1, r3
 800468a:	482a      	ldr	r0, [pc, #168]	; (8004734 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800468c:	f7ff f8f4 	bl	8003878 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	099a      	lsrs	r2, r3, #6
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	3318      	adds	r3, #24
 80046a8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80046aa:	e002      	b.n	80046b2 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f9      	bne.n	80046ac <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046b8:	e030      	b.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d113      	bne.n	80046ec <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10d      	bne.n	80046ec <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d020      	beq.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e2:	4619      	mov	r1, r3
 80046e4:	4813      	ldr	r0, [pc, #76]	; (8004734 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80046e6:	f7ff f8c7 	bl	8003878 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046ea:	e017      	b.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d112      	bne.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004714:	4619      	mov	r1, r3
 8004716:	4807      	ldr	r0, [pc, #28]	; (8004734 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004718:	f7ff f8ae 	bl	8003878 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004724:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004728:	4618      	mov	r0, r3
 800472a:	37d8      	adds	r7, #216	; 0xd8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	80080000 	.word	0x80080000
 8004734:	50000300 	.word	0x50000300
 8004738:	c3210000 	.word	0xc3210000
 800473c:	90c00010 	.word	0x90c00010
 8004740:	20000000 	.word	0x20000000
 8004744:	053e2d63 	.word	0x053e2d63
 8004748:	c7520000 	.word	0xc7520000
 800474c:	50000100 	.word	0x50000100
 8004750:	cb840000 	.word	0xcb840000

08004754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b0a1      	sub	sp, #132	; 0x84
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800476e:	2302      	movs	r3, #2
 8004770:	e08b      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800477a:	2300      	movs	r3, #0
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800477e:	2300      	movs	r3, #0
 8004780:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478a:	d102      	bne.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	e001      	b.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e06a      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f9a1 	bl	8003afe <LL_ADC_REG_IsConversionOngoing>
 80047bc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f99b 	bl	8003afe <LL_ADC_REG_IsConversionOngoing>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d14c      	bne.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d149      	bne.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047d4:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80047d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d028      	beq.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047f2:	035b      	lsls	r3, r3, #13
 80047f4:	430b      	orrs	r3, r1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004800:	f7ff f96a 	bl	8003ad8 <LL_ADC_IsEnabled>
 8004804:	4604      	mov	r4, r0
 8004806:	4823      	ldr	r0, [pc, #140]	; (8004894 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004808:	f7ff f966 	bl	8003ad8 <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	4323      	orrs	r3, r4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d133      	bne.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800481c:	f023 030f 	bic.w	r3, r3, #15
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	6811      	ldr	r1, [r2, #0]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	430a      	orrs	r2, r1
 800482a:	431a      	orrs	r2, r3
 800482c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800482e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004830:	e024      	b.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800483e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004842:	f7ff f949 	bl	8003ad8 <LL_ADC_IsEnabled>
 8004846:	4604      	mov	r4, r0
 8004848:	4812      	ldr	r0, [pc, #72]	; (8004894 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800484a:	f7ff f945 	bl	8003ad8 <LL_ADC_IsEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	4323      	orrs	r3, r4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d112      	bne.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800485e:	f023 030f 	bic.w	r3, r3, #15
 8004862:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004864:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004866:	e009      	b.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800487a:	e000      	b.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800487c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800488a:	4618      	mov	r0, r3
 800488c:	3784      	adds	r7, #132	; 0x84
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	bf00      	nop
 8004894:	50000100 	.word	0x50000100
 8004898:	50000300 	.word	0x50000300

0800489c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <__NVIC_SetPriorityGrouping+0x44>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b8:	4013      	ands	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ce:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <__NVIC_SetPriorityGrouping+0x44>)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	60d3      	str	r3, [r2, #12]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <__NVIC_GetPriorityGrouping+0x18>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	f003 0307 	and.w	r3, r3, #7
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	2b00      	cmp	r3, #0
 8004910:	db0b      	blt.n	800492a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	4907      	ldr	r1, [pc, #28]	; (8004938 <__NVIC_EnableIRQ+0x38>)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2001      	movs	r0, #1
 8004922:	fa00 f202 	lsl.w	r2, r0, r2
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000e100 	.word	0xe000e100

0800493c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db0a      	blt.n	8004966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	490c      	ldr	r1, [pc, #48]	; (8004988 <__NVIC_SetPriority+0x4c>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	440b      	add	r3, r1
 8004960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004964:	e00a      	b.n	800497c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4908      	ldr	r1, [pc, #32]	; (800498c <__NVIC_SetPriority+0x50>)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	3b04      	subs	r3, #4
 8004974:	0112      	lsls	r2, r2, #4
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	440b      	add	r3, r1
 800497a:	761a      	strb	r2, [r3, #24]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000e100 	.word	0xe000e100
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f1c3 0307 	rsb	r3, r3, #7
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf28      	it	cs
 80049ae:	2304      	movcs	r3, #4
 80049b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d902      	bls.n	80049c0 <NVIC_EncodePriority+0x30>
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3b03      	subs	r3, #3
 80049be:	e000      	b.n	80049c2 <NVIC_EncodePriority+0x32>
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	401a      	ands	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d8:	f04f 31ff 	mov.w	r1, #4294967295
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	43d9      	mvns	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	4313      	orrs	r3, r2
         );
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d301      	bcc.n	8004a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00f      	b.n	8004a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <SysTick_Config+0x40>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a16:	210f      	movs	r1, #15
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	f7ff ff8e 	bl	800493c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <SysTick_Config+0x40>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <SysTick_Config+0x40>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000e010 	.word	0xe000e010

08004a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff29 	bl	800489c <__NVIC_SetPriorityGrouping>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a60:	f7ff ff40 	bl	80048e4 <__NVIC_GetPriorityGrouping>
 8004a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff90 	bl	8004990 <NVIC_EncodePriority>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff5f 	bl	800493c <__NVIC_SetPriority>
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff33 	bl	8004900 <__NVIC_EnableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ffa4 	bl	80049f8 <SysTick_Config>
 8004ab0:	4603      	mov	r3, r0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d005      	beq.n	8004ade <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e037      	b.n	8004b4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 020e 	bic.w	r2, r2, #14
 8004aec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f003 021f 	and.w	r2, r3, #31
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d00d      	beq.n	8004ba0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
 8004b9e:	e047      	b.n	8004c30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 020e 	bic.w	r2, r2, #14
 8004bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f202 	lsl.w	r2, r1, r2
 8004be2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
    }
  }
  return status;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c4a:	e15a      	b.n	8004f02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2101      	movs	r1, #1
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 814c 	beq.w	8004efc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d005      	beq.n	8004c7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d130      	bne.n	8004cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 0201 	and.w	r2, r3, #1
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d017      	beq.n	8004d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d123      	bne.n	8004d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	08da      	lsrs	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3208      	adds	r2, #8
 8004d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	220f      	movs	r2, #15
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	08da      	lsrs	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3208      	adds	r2, #8
 8004d68:	6939      	ldr	r1, [r7, #16]
 8004d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0203 	and.w	r2, r3, #3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80a6 	beq.w	8004efc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db0:	4b5b      	ldr	r3, [pc, #364]	; (8004f20 <HAL_GPIO_Init+0x2e4>)
 8004db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db4:	4a5a      	ldr	r2, [pc, #360]	; (8004f20 <HAL_GPIO_Init+0x2e4>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6613      	str	r3, [r2, #96]	; 0x60
 8004dbc:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_GPIO_Init+0x2e4>)
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc8:	4a56      	ldr	r2, [pc, #344]	; (8004f24 <HAL_GPIO_Init+0x2e8>)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	3302      	adds	r3, #2
 8004dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004df2:	d01f      	beq.n	8004e34 <HAL_GPIO_Init+0x1f8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a4c      	ldr	r2, [pc, #304]	; (8004f28 <HAL_GPIO_Init+0x2ec>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d019      	beq.n	8004e30 <HAL_GPIO_Init+0x1f4>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a4b      	ldr	r2, [pc, #300]	; (8004f2c <HAL_GPIO_Init+0x2f0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <HAL_GPIO_Init+0x1f0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a4a      	ldr	r2, [pc, #296]	; (8004f30 <HAL_GPIO_Init+0x2f4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00d      	beq.n	8004e28 <HAL_GPIO_Init+0x1ec>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a49      	ldr	r2, [pc, #292]	; (8004f34 <HAL_GPIO_Init+0x2f8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <HAL_GPIO_Init+0x1e8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a48      	ldr	r2, [pc, #288]	; (8004f38 <HAL_GPIO_Init+0x2fc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_GPIO_Init+0x1e4>
 8004e1c:	2305      	movs	r3, #5
 8004e1e:	e00a      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e20:	2306      	movs	r3, #6
 8004e22:	e008      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e24:	2304      	movs	r3, #4
 8004e26:	e006      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e004      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e002      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_GPIO_Init+0x1fa>
 8004e34:	2300      	movs	r3, #0
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e46:	4937      	ldr	r1, [pc, #220]	; (8004f24 <HAL_GPIO_Init+0x2e8>)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ea2:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ecc:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ef6:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <HAL_GPIO_Init+0x300>)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3301      	adds	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f ae9d 	bne.w	8004c4c <HAL_GPIO_Init+0x10>
  }
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40010000 	.word	0x40010000
 8004f28:	48000400 	.word	0x48000400
 8004f2c:	48000800 	.word	0x48000800
 8004f30:	48000c00 	.word	0x48000c00
 8004f34:	48001000 	.word	0x48001000
 8004f38:	48001400 	.word	0x48001400
 8004f3c:	40010400 	.word	0x40010400

08004f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f50:	787b      	ldrb	r3, [r7, #1]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f56:	887a      	ldrh	r2, [r7, #2]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f5c:	e002      	b.n	8004f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	43d9      	mvns	r1, r3
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	400b      	ands	r3, r1
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	619a      	str	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e081      	b.n	80050ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fe46 	bl	8001c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d104      	bne.n	800503e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d138      	bne.n	800514a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e032      	b.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2224      	movs	r2, #36	; 0x24
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005114:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b20      	cmp	r3, #32
 800516c:	d139      	bne.n	80051e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005178:	2302      	movs	r3, #2
 800517a:	e033      	b.n	80051e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	; 0x24
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d141      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051fe:	4b4b      	ldr	r3, [pc, #300]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d131      	bne.n	8005270 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005212:	4a46      	ldr	r2, [pc, #280]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005224:	4a41      	ldr	r2, [pc, #260]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800522c:	4b40      	ldr	r3, [pc, #256]	; (8005330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2232      	movs	r2, #50	; 0x32
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	4a3f      	ldr	r2, [pc, #252]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	0c9b      	lsrs	r3, r3, #18
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005242:	e002      	b.n	800524a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800524a:	4b38      	ldr	r3, [pc, #224]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d102      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f2      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800525e:	4b33      	ldr	r3, [pc, #204]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d158      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e057      	b.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005270:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005276:	4a2d      	ldr	r2, [pc, #180]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005280:	e04d      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d141      	bne.n	800530e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800528a:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d131      	bne.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529e:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2232      	movs	r2, #50	; 0x32
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	0c9b      	lsrs	r3, r3, #18
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ce:	e002      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d102      	bne.n	80052ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f2      	bne.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f6:	d112      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e011      	b.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800530c:	e007      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005316:	4a05      	ldr	r2, [pc, #20]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800531c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40007000 	.word	0x40007000
 8005330:	20000000 	.word	0x20000000
 8005334:	431bde83 	.word	0x431bde83

08005338 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005346:	6093      	str	r3, [r2, #8]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40007000 	.word	0x40007000

08005358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e306      	b.n	8005978 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d075      	beq.n	8005462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005376:	4b97      	ldr	r3, [pc, #604]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d102      	bne.n	8005396 <HAL_RCC_OscConfig+0x3e>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d002      	beq.n	800539c <HAL_RCC_OscConfig+0x44>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05b      	beq.n	8005460 <HAL_RCC_OscConfig+0x108>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d157      	bne.n	8005460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e2e1      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x74>
 80053be:	4b85      	ldr	r3, [pc, #532]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a84      	ldr	r2, [pc, #528]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e01d      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x98>
 80053d6:	4b7f      	ldr	r3, [pc, #508]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7e      	ldr	r2, [pc, #504]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7b      	ldr	r2, [pc, #492]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053f0:	4b78      	ldr	r3, [pc, #480]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a77      	ldr	r2, [pc, #476]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b75      	ldr	r3, [pc, #468]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a74      	ldr	r2, [pc, #464]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fc ffc0 	bl	8002394 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005418:	f7fc ffbc 	bl	8002394 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e2a6      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542a:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xc0>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc ffac 	bl	8002394 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fc ffa8 	bl	8002394 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e292      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005452:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0xe8>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d075      	beq.n	800555a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005478:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x136>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d002      	beq.n	8005494 <HAL_RCC_OscConfig+0x13c>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d11f      	bne.n	80054d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_OscConfig+0x154>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e265      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	4946      	ldr	r1, [pc, #280]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_RCC_OscConfig+0x280>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fc ff19 	bl	80022fc <HAL_InitTick>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d043      	beq.n	8005558 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e251      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d023      	beq.n	8005524 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fc ff54 	bl	8002394 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fc ff50 	bl	8002394 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e23a      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005502:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	492d      	ldr	r1, [pc, #180]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
 8005522:	e01a      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800552a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc ff30 	bl	8002394 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fc ff2c 	bl	8002394 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e216      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1e0>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d041      	beq.n	80055ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01c      	beq.n	80055a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fc ff09 	bl	8002394 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005586:	f7fc ff05 	bl	8002394 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1ef      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <HAL_RCC_OscConfig+0x22e>
 80055a6:	e020      	b.n	80055ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fc feec 	bl	8002394 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055be:	e00d      	b.n	80055dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fc fee8 	bl	8002394 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d906      	bls.n	80055dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1d2      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055dc:	4b8c      	ldr	r3, [pc, #560]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ea      	bne.n	80055c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80a6 	beq.w	8005744 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f8:	2300      	movs	r3, #0
 80055fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055fc:	4b84      	ldr	r3, [pc, #528]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x2b4>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x2b6>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	4b7f      	ldr	r3, [pc, #508]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	4a7e      	ldr	r2, [pc, #504]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
 800561e:	4b7c      	ldr	r3, [pc, #496]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800562e:	4b79      	ldr	r3, [pc, #484]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800563a:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fc fea5 	bl	8002394 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fc fea1 	bl	8002394 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e18b      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005660:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d108      	bne.n	8005686 <HAL_RCC_OscConfig+0x32e>
 8005674:	4b66      	ldr	r3, [pc, #408]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	4a65      	ldr	r2, [pc, #404]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005684:	e024      	b.n	80056d0 <HAL_RCC_OscConfig+0x378>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d110      	bne.n	80056b0 <HAL_RCC_OscConfig+0x358>
 800568e:	4b60      	ldr	r3, [pc, #384]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	4a5e      	ldr	r2, [pc, #376]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800569e:	4b5c      	ldr	r3, [pc, #368]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	4a5a      	ldr	r2, [pc, #360]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ae:	e00f      	b.n	80056d0 <HAL_RCC_OscConfig+0x378>
 80056b0:	4b57      	ldr	r3, [pc, #348]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	4a56      	ldr	r2, [pc, #344]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056c0:	4b53      	ldr	r3, [pc, #332]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a52      	ldr	r2, [pc, #328]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d016      	beq.n	8005706 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fc fe5c 	bl	8002394 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fc fe58 	bl	8002394 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e140      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f6:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ed      	beq.n	80056e0 <HAL_RCC_OscConfig+0x388>
 8005704:	e015      	b.n	8005732 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fc fe45 	bl	8002394 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fc fe41 	bl	8002394 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e129      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ed      	bne.n	800570e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005732:	7ffb      	ldrb	r3, [r7, #31]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005738:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	4a34      	ldr	r2, [pc, #208]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800573e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005742:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d03c      	beq.n	80057ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01c      	beq.n	8005792 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005758:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fc fe14 	bl	8002394 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005770:	f7fc fe10 	bl	8002394 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0fa      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ef      	beq.n	8005770 <HAL_RCC_OscConfig+0x418>
 8005790:	e01b      	b.n	80057ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005792:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fc fdf7 	bl	8002394 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057aa:	f7fc fdf3 	bl	8002394 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0dd      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ef      	bne.n	80057aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80d1 	beq.w	8005976 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f000 808b 	beq.w	80058f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d15e      	bne.n	80058a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fc fdcd 	bl	8002394 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057fc:	e00c      	b.n	8005818 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fc fdc9 	bl	8002394 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d905      	bls.n	8005818 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e0b3      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
 8005810:	40021000 	.word	0x40021000
 8005814:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ec      	bne.n	80057fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005824:	4b56      	ldr	r3, [pc, #344]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	4b56      	ldr	r3, [pc, #344]	; (8005984 <HAL_RCC_OscConfig+0x62c>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a11      	ldr	r1, [r2, #32]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005834:	3a01      	subs	r2, #1
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	4311      	orrs	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800583e:	0212      	lsls	r2, r2, #8
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005846:	0852      	lsrs	r2, r2, #1
 8005848:	3a01      	subs	r2, #1
 800584a:	0552      	lsls	r2, r2, #21
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0652      	lsls	r2, r2, #25
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800585e:	06d2      	lsls	r2, r2, #27
 8005860:	430a      	orrs	r2, r1
 8005862:	4947      	ldr	r1, [pc, #284]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005864:	4313      	orrs	r3, r2
 8005866:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005868:	4b45      	ldr	r3, [pc, #276]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a44      	ldr	r2, [pc, #272]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800586e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005872:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a41      	ldr	r2, [pc, #260]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc fd88 	bl	8002394 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005888:	f7fc fd84 	bl	8002394 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e06e      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x530>
 80058a6:	e066      	b.n	8005976 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a34      	ldr	r2, [pc, #208]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058b4:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058c0:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fc fd60 	bl	8002394 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fc fd5c 	bl	8002394 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e046      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ea:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x580>
 80058f6:	e03e      	b.n	8005976 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e039      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f003 0203 	and.w	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	429a      	cmp	r2, r3
 8005916:	d12c      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	3b01      	subs	r3, #1
 8005924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d123      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d11b      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d113      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	3b01      	subs	r3, #1
 8005958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d109      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	3b01      	subs	r3, #1
 800596c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	019f800c 	.word	0x019f800c

08005988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e11e      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b91      	ldr	r3, [pc, #580]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d910      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 020f 	bic.w	r2, r3, #15
 80059b6:	498c      	ldr	r1, [pc, #560]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b8a      	ldr	r3, [pc, #552]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e106      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d073      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d129      	bne.n	8005a38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e4:	4b81      	ldr	r3, [pc, #516]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0f4      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059f4:	f000 f99e 	bl	8005d34 <RCC_GetSysClockFreqFromPLLSource>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4a7c      	ldr	r2, [pc, #496]	; (8005bf0 <HAL_RCC_ClockConfig+0x268>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d93f      	bls.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a02:	4b7a      	ldr	r3, [pc, #488]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d033      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d12f      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a22:	4b72      	ldr	r3, [pc, #456]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2a:	4a70      	ldr	r2, [pc, #448]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e024      	b.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a40:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0c6      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a50:	4b66      	ldr	r3, [pc, #408]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0be      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a60:	f000 f8ce 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005a64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4a61      	ldr	r2, [pc, #388]	; (8005bf0 <HAL_RCC_ClockConfig+0x268>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d909      	bls.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a6e:	4b5f      	ldr	r3, [pc, #380]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a76:	4a5d      	ldr	r2, [pc, #372]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a82:	4b5a      	ldr	r3, [pc, #360]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 0203 	bic.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4957      	ldr	r1, [pc, #348]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a94:	f7fc fc7e 	bl	8002394 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fc fc7a 	bl	8002394 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e095      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 020c 	and.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1eb      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005adc:	4b43      	ldr	r3, [pc, #268]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a42      	ldr	r2, [pc, #264]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ae6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005af4:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005afc:	4a3b      	ldr	r2, [pc, #236]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b39      	ldr	r3, [pc, #228]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4936      	ldr	r1, [pc, #216]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d105      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b1e:	4b33      	ldr	r3, [pc, #204]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4a32      	ldr	r2, [pc, #200]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b2a:	4b2f      	ldr	r3, [pc, #188]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d21d      	bcs.n	8005b74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 020f 	bic.w	r2, r3, #15
 8005b40:	4929      	ldr	r1, [pc, #164]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b48:	f7fc fc24 	bl	8002394 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fc fc20 	bl	8002394 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e03b      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1ed      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4917      	ldr	r1, [pc, #92]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	490f      	ldr	r1, [pc, #60]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb2:	f000 f825 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490c      	ldr	r1, [pc, #48]	; (8005bf4 <HAL_RCC_ClockConfig+0x26c>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fc fb90 	bl	80022fc <HAL_InitTick>
 8005bdc:	4603      	mov	r3, r0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40022000 	.word	0x40022000
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	04c4b400 	.word	0x04c4b400
 8005bf4:	08011a70 	.word	0x08011a70
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	20000004 	.word	0x20000004

08005c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c06:	4b2c      	ldr	r3, [pc, #176]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d102      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e047      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c18:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d102      	bne.n	8005c2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e03e      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b0c      	cmp	r3, #12
 8005c34:	d136      	bne.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d10c      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c54:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5e:	68d2      	ldr	r2, [r2, #12]
 8005c60:	0a12      	lsrs	r2, r2, #8
 8005c62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	617b      	str	r3, [r7, #20]
      break;
 8005c6c:	e00c      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	0a12      	lsrs	r2, r2, #8
 8005c7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0e5b      	lsrs	r3, r3, #25
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ca8:	693b      	ldr	r3, [r7, #16]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	016e3600 	.word	0x016e3600

08005cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000000 	.word	0x20000000

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ce0:	f7ff fff0 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4904      	ldr	r1, [pc, #16]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	08011a80 	.word	0x08011a80

08005d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d0c:	f7ff ffda 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	0adb      	lsrs	r3, r3, #11
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	4904      	ldr	r1, [pc, #16]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d1e:	5ccb      	ldrb	r3, [r1, r3]
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	08011a80 	.word	0x08011a80

08005d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d10c      	bne.n	8005d72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d62:	68d2      	ldr	r2, [r2, #12]
 8005d64:	0a12      	lsrs	r2, r2, #8
 8005d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	617b      	str	r3, [r7, #20]
    break;
 8005d70:	e00c      	b.n	8005d8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d7c:	68d2      	ldr	r2, [r2, #12]
 8005d7e:	0a12      	lsrs	r2, r2, #8
 8005d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
    break;
 8005d8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	0e5b      	lsrs	r3, r3, #25
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	3301      	adds	r3, #1
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005da6:	687b      	ldr	r3, [r7, #4]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40021000 	.word	0x40021000
 8005db8:	016e3600 	.word	0x016e3600
 8005dbc:	00f42400 	.word	0x00f42400

08005dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dcc:	2300      	movs	r3, #0
 8005dce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8098 	beq.w	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dde:	2300      	movs	r3, #0
 8005de0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de2:	4b43      	ldr	r3, [pc, #268]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dfa:	4b3d      	ldr	r3, [pc, #244]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e06:	2301      	movs	r3, #1
 8005e08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0a:	4b3a      	ldr	r3, [pc, #232]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a39      	ldr	r2, [pc, #228]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e16:	f7fc fabd 	bl	8002394 <HAL_GetTick>
 8005e1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e1c:	e009      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1e:	f7fc fab9 	bl	8002394 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d902      	bls.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	74fb      	strb	r3, [r7, #19]
        break;
 8005e30:	e005      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e32:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0ef      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d159      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e44:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01e      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d019      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e6c:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9e:	f7fc fa79 	bl	8002394 <HAL_GetTick>
 8005ea2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea4:	e00b      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fc fa75 	bl	8002394 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d902      	bls.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	74fb      	strb	r3, [r7, #19]
            break;
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0ec      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ee8:	e008      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	74bb      	strb	r3, [r7, #18]
 8005eee:	e005      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005efc:	7c7b      	ldrb	r3, [r7, #17]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f02:	4ba6      	ldr	r3, [pc, #664]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	4aa5      	ldr	r2, [pc, #660]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f1a:	4ba0      	ldr	r3, [pc, #640]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f023 0203 	bic.w	r2, r3, #3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	499c      	ldr	r1, [pc, #624]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f3c:	4b97      	ldr	r3, [pc, #604]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f023 020c 	bic.w	r2, r3, #12
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4994      	ldr	r1, [pc, #592]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f5e:	4b8f      	ldr	r3, [pc, #572]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	498b      	ldr	r1, [pc, #556]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f80:	4b86      	ldr	r3, [pc, #536]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4983      	ldr	r1, [pc, #524]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa2:	4b7e      	ldr	r3, [pc, #504]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	497a      	ldr	r1, [pc, #488]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fc4:	4b75      	ldr	r3, [pc, #468]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4972      	ldr	r1, [pc, #456]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fe6:	4b6d      	ldr	r3, [pc, #436]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	4969      	ldr	r1, [pc, #420]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006008:	4b64      	ldr	r3, [pc, #400]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	4961      	ldr	r1, [pc, #388]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800602a:	4b5c      	ldr	r3, [pc, #368]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	4958      	ldr	r1, [pc, #352]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	2b00      	cmp	r3, #0
 800604a:	d015      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800604c:	4b53      	ldr	r3, [pc, #332]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	4950      	ldr	r1, [pc, #320]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d105      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4a4a      	ldr	r2, [pc, #296]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006076:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006084:	4b45      	ldr	r3, [pc, #276]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	4942      	ldr	r1, [pc, #264]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a2:	d105      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a4:	4b3d      	ldr	r3, [pc, #244]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a3c      	ldr	r2, [pc, #240]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060bc:	4b37      	ldr	r3, [pc, #220]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	4934      	ldr	r1, [pc, #208]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060da:	d105      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060dc:	4b2f      	ldr	r3, [pc, #188]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a2e      	ldr	r2, [pc, #184]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060f4:	4b29      	ldr	r3, [pc, #164]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	4926      	ldr	r1, [pc, #152]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b21      	ldr	r3, [pc, #132]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a20      	ldr	r2, [pc, #128]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	4918      	ldr	r1, [pc, #96]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614a:	d105      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a12      	ldr	r2, [pc, #72]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	490a      	ldr	r1, [pc, #40]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006182:	d105      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006190:	7cbb      	ldrb	r3, [r7, #18]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000

080061a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e049      	b.n	8006246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb fda2 	bl	8001d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f000 ff92 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e042      	b.n	80062ee <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_TIM_Base_Start+0xac>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_TIM_Base_Start+0x5c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d013      	beq.n	80062ac <HAL_TIM_Base_Start+0x5c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_TIM_Base_Start+0xb0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_TIM_Base_Start+0x5c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <HAL_TIM_Base_Start+0xb4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_TIM_Base_Start+0x5c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_TIM_Base_Start+0xb8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_TIM_Base_Start+0x5c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a19      	ldr	r2, [pc, #100]	; (800630c <HAL_TIM_Base_Start+0xbc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d115      	bne.n	80062d8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <HAL_TIM_Base_Start+0xc0>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d015      	beq.n	80062ea <HAL_TIM_Base_Start+0x9a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d011      	beq.n	80062ea <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	e008      	b.n	80062ea <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e000      	b.n	80062ec <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40013400 	.word	0x40013400
 800630c:	40014000 	.word	0x40014000
 8006310:	00010007 	.word	0x00010007

08006314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e04a      	b.n	80063c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d013      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <HAL_TIM_Base_Start_IT+0xc8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d115      	bne.n	80063ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d015      	beq.n	80063be <HAL_TIM_Base_Start_IT+0xaa>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d011      	beq.n	80063be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063aa:	e008      	b.n	80063be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40013400 	.word	0x40013400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	00010007 	.word	0x00010007

080063e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e049      	b.n	800648e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f841 	bl	8006496 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f000 fe6e 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_PWM_Start+0x24>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e03c      	b.n	800654a <HAL_TIM_PWM_Start+0x9e>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d109      	bne.n	80064ea <HAL_TIM_PWM_Start+0x3e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	e02f      	b.n	800654a <HAL_TIM_PWM_Start+0x9e>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d109      	bne.n	8006504 <HAL_TIM_PWM_Start+0x58>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	bf14      	ite	ne
 80064fc:	2301      	movne	r3, #1
 80064fe:	2300      	moveq	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	e022      	b.n	800654a <HAL_TIM_PWM_Start+0x9e>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d109      	bne.n	800651e <HAL_TIM_PWM_Start+0x72>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b01      	cmp	r3, #1
 8006514:	bf14      	ite	ne
 8006516:	2301      	movne	r3, #1
 8006518:	2300      	moveq	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e015      	b.n	800654a <HAL_TIM_PWM_Start+0x9e>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b10      	cmp	r3, #16
 8006522:	d109      	bne.n	8006538 <HAL_TIM_PWM_Start+0x8c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e008      	b.n	800654a <HAL_TIM_PWM_Start+0x9e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e097      	b.n	8006682 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_TIM_PWM_Start+0xb6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	e023      	b.n	80065aa <HAL_TIM_PWM_Start+0xfe>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xc6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006570:	e01b      	b.n	80065aa <HAL_TIM_PWM_Start+0xfe>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xd6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006580:	e013      	b.n	80065aa <HAL_TIM_PWM_Start+0xfe>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xe6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006590:	e00b      	b.n	80065aa <HAL_TIM_PWM_Start+0xfe>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b10      	cmp	r3, #16
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xf6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a0:	e003      	b.n	80065aa <HAL_TIM_PWM_Start+0xfe>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2201      	movs	r2, #1
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fbac 	bl	8007d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a33      	ldr	r2, [pc, #204]	; (800668c <HAL_TIM_PWM_Start+0x1e0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <HAL_TIM_PWM_Start+0x13e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a32      	ldr	r2, [pc, #200]	; (8006690 <HAL_TIM_PWM_Start+0x1e4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <HAL_TIM_PWM_Start+0x13e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a30      	ldr	r2, [pc, #192]	; (8006694 <HAL_TIM_PWM_Start+0x1e8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_TIM_PWM_Start+0x13e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <HAL_TIM_PWM_Start+0x1ec>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIM_PWM_Start+0x13e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2d      	ldr	r2, [pc, #180]	; (800669c <HAL_TIM_PWM_Start+0x1f0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d101      	bne.n	80065ee <HAL_TIM_PWM_Start+0x142>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <HAL_TIM_PWM_Start+0x144>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a20      	ldr	r2, [pc, #128]	; (800668c <HAL_TIM_PWM_Start+0x1e0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <HAL_TIM_PWM_Start+0x194>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d013      	beq.n	8006640 <HAL_TIM_PWM_Start+0x194>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <HAL_TIM_PWM_Start+0x1f4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <HAL_TIM_PWM_Start+0x194>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <HAL_TIM_PWM_Start+0x1f8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <HAL_TIM_PWM_Start+0x194>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a17      	ldr	r2, [pc, #92]	; (8006690 <HAL_TIM_PWM_Start+0x1e4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <HAL_TIM_PWM_Start+0x194>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a16      	ldr	r2, [pc, #88]	; (8006694 <HAL_TIM_PWM_Start+0x1e8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d115      	bne.n	800666c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <HAL_TIM_PWM_Start+0x1fc>)
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b06      	cmp	r3, #6
 8006650:	d015      	beq.n	800667e <HAL_TIM_PWM_Start+0x1d2>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006658:	d011      	beq.n	800667e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666a:	e008      	b.n	800667e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e000      	b.n	8006680 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	00010007 	.word	0x00010007

080066ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e049      	b.n	8006752 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f841 	bl	800675a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f000 fd0c 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b02      	cmp	r3, #2
 8006782:	d122      	bne.n	80067ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d11b      	bne.n	80067ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0202 	mvn.w	r2, #2
 800679a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f004 f90f 	bl	800a9d4 <HAL_TIM_IC_CaptureCallback>
 80067b6:	e005      	b.n	80067c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fc87 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fc8e 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d122      	bne.n	800681e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d11b      	bne.n	800681e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0204 	mvn.w	r2, #4
 80067ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f004 f8e5 	bl	800a9d4 <HAL_TIM_IC_CaptureCallback>
 800680a:	e005      	b.n	8006818 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc5d 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc64 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d122      	bne.n	8006872 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b08      	cmp	r3, #8
 8006838:	d11b      	bne.n	8006872 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f06f 0208 	mvn.w	r2, #8
 8006842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f004 f8bb 	bl	800a9d4 <HAL_TIM_IC_CaptureCallback>
 800685e:	e005      	b.n	800686c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc33 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fc3a 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d122      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b10      	cmp	r3, #16
 800688c:	d11b      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0210 	mvn.w	r2, #16
 8006896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2208      	movs	r2, #8
 800689c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f004 f891 	bl	800a9d4 <HAL_TIM_IC_CaptureCallback>
 80068b2:	e005      	b.n	80068c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fc09 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc10 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10e      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0201 	mvn.w	r2, #1
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f005 f9d9 	bl	800bca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b80      	cmp	r3, #128	; 0x80
 80068fe:	d10e      	bne.n	800691e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d107      	bne.n	800691e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fcea 	bl	80082f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fcdd 	bl	8008306 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d107      	bne.n	8006978 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fbbe 	bl	80070f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b20      	cmp	r3, #32
 8006984:	d10e      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b20      	cmp	r3, #32
 8006992:	d107      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0220 	mvn.w	r2, #32
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fc9d 	bl	80082de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b2:	d10f      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c2:	d107      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fca3 	bl	800831a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e2:	d10f      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069f2:	d107      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fc95 	bl	800832e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a12:	d10f      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a22:	d107      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fc87 	bl	8008342 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a42:	d10f      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a52:	d107      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fc79 	bl	8008356 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e088      	b.n	8006b9c <HAL_TIM_IC_ConfigChannel+0x130>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f000 ff78 	bl	800799c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 020c 	bic.w	r2, r2, #12
 8006aba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	619a      	str	r2, [r3, #24]
 8006ace:	e060      	b.n	8006b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d11c      	bne.n	8006b10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f000 fff0 	bl	8007aca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006af8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6999      	ldr	r1, [r3, #24]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	021a      	lsls	r2, r3, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	619a      	str	r2, [r3, #24]
 8006b0e:	e040      	b.n	8006b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d11b      	bne.n	8006b4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6819      	ldr	r1, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f001 f83d 	bl	8007ba4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 020c 	bic.w	r2, r2, #12
 8006b38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69d9      	ldr	r1, [r3, #28]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
 8006b4c:	e021      	b.n	8006b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b0c      	cmp	r3, #12
 8006b52:	d11c      	bne.n	8006b8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6819      	ldr	r1, [r3, #0]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f001 f85a 	bl	8007c1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69da      	ldr	r2, [r3, #28]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69d9      	ldr	r1, [r3, #28]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	61da      	str	r2, [r3, #28]
 8006b8c:	e001      	b.n	8006b92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e0ff      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b14      	cmp	r3, #20
 8006bce:	f200 80f0 	bhi.w	8006db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006db3 	.word	0x08006db3
 8006be0:	08006db3 	.word	0x08006db3
 8006be4:	08006db3 	.word	0x08006db3
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006db3 	.word	0x08006db3
 8006bf0:	08006db3 	.word	0x08006db3
 8006bf4:	08006db3 	.word	0x08006db3
 8006bf8:	08006caf 	.word	0x08006caf
 8006bfc:	08006db3 	.word	0x08006db3
 8006c00:	08006db3 	.word	0x08006db3
 8006c04:	08006db3 	.word	0x08006db3
 8006c08:	08006cef 	.word	0x08006cef
 8006c0c:	08006db3 	.word	0x08006db3
 8006c10:	08006db3 	.word	0x08006db3
 8006c14:	08006db3 	.word	0x08006db3
 8006c18:	08006d31 	.word	0x08006d31
 8006c1c:	08006db3 	.word	0x08006db3
 8006c20:	08006db3 	.word	0x08006db3
 8006c24:	08006db3 	.word	0x08006db3
 8006c28:	08006d71 	.word	0x08006d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 faf8 	bl	8007228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0208 	orr.w	r2, r2, #8
 8006c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0204 	bic.w	r2, r2, #4
 8006c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	619a      	str	r2, [r3, #24]
      break;
 8006c6a:	e0a5      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fb68 	bl	8007348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6999      	ldr	r1, [r3, #24]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	021a      	lsls	r2, r3, #8
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	619a      	str	r2, [r3, #24]
      break;
 8006cac:	e084      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fbd1 	bl	800745c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0208 	orr.w	r2, r2, #8
 8006cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0204 	bic.w	r2, r2, #4
 8006cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	61da      	str	r2, [r3, #28]
      break;
 8006cec:	e064      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fc39 	bl	800756c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69d9      	ldr	r1, [r3, #28]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	021a      	lsls	r2, r3, #8
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	61da      	str	r2, [r3, #28]
      break;
 8006d2e:	e043      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fca2 	bl	8007680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0208 	orr.w	r2, r2, #8
 8006d4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0204 	bic.w	r2, r2, #4
 8006d5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d6e:	e023      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fce6 	bl	8007748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	021a      	lsls	r2, r3, #8
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006db0:	e002      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop

08006dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIM_ConfigClockSource+0x1c>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e0de      	b.n	8006fa6 <HAL_TIM_ConfigClockSource+0x1da>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a63      	ldr	r2, [pc, #396]	; (8006fb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f000 80a9 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e28:	4a61      	ldr	r2, [pc, #388]	; (8006fb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f200 80ae 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e30:	4a60      	ldr	r2, [pc, #384]	; (8006fb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f000 80a1 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e38:	4a5e      	ldr	r2, [pc, #376]	; (8006fb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f200 80a6 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e40:	4a5d      	ldr	r2, [pc, #372]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	f000 8099 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e48:	4a5b      	ldr	r2, [pc, #364]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	f200 809e 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e50:	4a5a      	ldr	r2, [pc, #360]	; (8006fbc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f000 8091 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e58:	4a58      	ldr	r2, [pc, #352]	; (8006fbc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	f200 8096 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e64:	f000 8089 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e6c:	f200 808e 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e74:	d03e      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x128>
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7a:	f200 8087 	bhi.w	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	f000 8086 	beq.w	8006f92 <HAL_TIM_ConfigClockSource+0x1c6>
 8006e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8a:	d87f      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e8c:	2b70      	cmp	r3, #112	; 0x70
 8006e8e:	d01a      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e90:	2b70      	cmp	r3, #112	; 0x70
 8006e92:	d87b      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e94:	2b60      	cmp	r3, #96	; 0x60
 8006e96:	d050      	beq.n	8006f3a <HAL_TIM_ConfigClockSource+0x16e>
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	d877      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e9c:	2b50      	cmp	r3, #80	; 0x50
 8006e9e:	d03c      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x14e>
 8006ea0:	2b50      	cmp	r3, #80	; 0x50
 8006ea2:	d873      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d058      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x18e>
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d86f      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006eac:	2b30      	cmp	r3, #48	; 0x30
 8006eae:	d064      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb0:	2b30      	cmp	r3, #48	; 0x30
 8006eb2:	d86b      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d060      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d867      	bhi.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05c      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d05a      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ec4:	e062      	b.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f000 fefb 	bl	8007cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	609a      	str	r2, [r3, #8]
      break;
 8006ef2:	e04f      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6899      	ldr	r1, [r3, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f000 fee4 	bl	8007cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f16:	609a      	str	r2, [r3, #8]
      break;
 8006f18:	e03c      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f000 fda0 	bl	8007a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2150      	movs	r1, #80	; 0x50
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 feaf 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8006f38:	e02c      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 fdfc 	bl	8007b44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2160      	movs	r1, #96	; 0x60
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fe9f 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8006f58:	e01c      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6859      	ldr	r1, [r3, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f000 fd80 	bl	8007a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2140      	movs	r1, #64	; 0x40
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fe8f 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8006f78:	e00c      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f000 fe86 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8006f8a:	e003      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f90:	e000      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	00100070 	.word	0x00100070
 8006fb4:	00100040 	.word	0x00100040
 8006fb8:	00100030 	.word	0x00100030
 8006fbc:	00100020 	.word	0x00100020

08006fc0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e031      	b.n	800703c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc12 	bl	8007814 <TIM_SlaveTimer_SetConfig>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e018      	b.n	800703c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007018:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007028:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b0c      	cmp	r3, #12
 8007056:	d831      	bhi.n	80070bc <HAL_TIM_ReadCapturedValue+0x78>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_TIM_ReadCapturedValue+0x1c>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007095 	.word	0x08007095
 8007064:	080070bd 	.word	0x080070bd
 8007068:	080070bd 	.word	0x080070bd
 800706c:	080070bd 	.word	0x080070bd
 8007070:	0800709f 	.word	0x0800709f
 8007074:	080070bd 	.word	0x080070bd
 8007078:	080070bd 	.word	0x080070bd
 800707c:	080070bd 	.word	0x080070bd
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070bd 	.word	0x080070bd
 8007088:	080070bd 	.word	0x080070bd
 800708c:	080070bd 	.word	0x080070bd
 8007090:	080070b3 	.word	0x080070b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	60fb      	str	r3, [r7, #12]

      break;
 800709c:	e00f      	b.n	80070be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	60fb      	str	r3, [r7, #12]

      break;
 80070a6:	e00a      	b.n	80070be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	60fb      	str	r3, [r7, #12]

      break;
 80070b0:	e005      	b.n	80070be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	60fb      	str	r3, [r7, #12]

      break;
 80070ba:	e000      	b.n	80070be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80070bc:	bf00      	nop
  }

  return tmpreg;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a3c      	ldr	r2, [pc, #240]	; (800720c <TIM_Base_SetConfig+0x104>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00f      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d00b      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a39      	ldr	r2, [pc, #228]	; (8007210 <TIM_Base_SetConfig+0x108>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a38      	ldr	r2, [pc, #224]	; (8007214 <TIM_Base_SetConfig+0x10c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a37      	ldr	r2, [pc, #220]	; (8007218 <TIM_Base_SetConfig+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <TIM_Base_SetConfig+0x104>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <TIM_Base_SetConfig+0x108>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a29      	ldr	r2, [pc, #164]	; (8007214 <TIM_Base_SetConfig+0x10c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a28      	ldr	r2, [pc, #160]	; (8007218 <TIM_Base_SetConfig+0x110>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <TIM_Base_SetConfig+0x114>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a26      	ldr	r2, [pc, #152]	; (8007220 <TIM_Base_SetConfig+0x118>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a25      	ldr	r2, [pc, #148]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a10      	ldr	r2, [pc, #64]	; (800720c <TIM_Base_SetConfig+0x104>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00f      	beq.n	80071f0 <TIM_Base_SetConfig+0xe8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a11      	ldr	r2, [pc, #68]	; (8007218 <TIM_Base_SetConfig+0x110>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_Base_SetConfig+0xe8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a10      	ldr	r2, [pc, #64]	; (800721c <TIM_Base_SetConfig+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <TIM_Base_SetConfig+0xe8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a0f      	ldr	r2, [pc, #60]	; (8007220 <TIM_Base_SetConfig+0x118>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_Base_SetConfig+0xe8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a0e      	ldr	r2, [pc, #56]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d103      	bne.n	80071f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	615a      	str	r2, [r3, #20]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40000400 	.word	0x40000400
 8007214:	40000800 	.word	0x40000800
 8007218:	40013400 	.word	0x40013400
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 0302 	bic.w	r3, r3, #2
 8007274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <TIM_OC1_SetConfig+0x10c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00f      	beq.n	80072a8 <TIM_OC1_SetConfig+0x80>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a2b      	ldr	r2, [pc, #172]	; (8007338 <TIM_OC1_SetConfig+0x110>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00b      	beq.n	80072a8 <TIM_OC1_SetConfig+0x80>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a2a      	ldr	r2, [pc, #168]	; (800733c <TIM_OC1_SetConfig+0x114>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d007      	beq.n	80072a8 <TIM_OC1_SetConfig+0x80>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a29      	ldr	r2, [pc, #164]	; (8007340 <TIM_OC1_SetConfig+0x118>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_OC1_SetConfig+0x80>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a28      	ldr	r2, [pc, #160]	; (8007344 <TIM_OC1_SetConfig+0x11c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10c      	bne.n	80072c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f023 0308 	bic.w	r3, r3, #8
 80072ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f023 0304 	bic.w	r3, r3, #4
 80072c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <TIM_OC1_SetConfig+0x10c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_OC1_SetConfig+0xc2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <TIM_OC1_SetConfig+0x110>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_OC1_SetConfig+0xc2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <TIM_OC1_SetConfig+0x114>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_OC1_SetConfig+0xc2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a18      	ldr	r2, [pc, #96]	; (8007340 <TIM_OC1_SetConfig+0x118>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_OC1_SetConfig+0xc2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a17      	ldr	r2, [pc, #92]	; (8007344 <TIM_OC1_SetConfig+0x11c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d111      	bne.n	800730e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	621a      	str	r2, [r3, #32]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800

08007348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0210 	bic.w	r2, r3, #16
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0320 	bic.w	r3, r3, #32
 8007396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a28      	ldr	r2, [pc, #160]	; (8007448 <TIM_OC2_SetConfig+0x100>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0x6c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a27      	ldr	r2, [pc, #156]	; (800744c <TIM_OC2_SetConfig+0x104>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d10d      	bne.n	80073d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <TIM_OC2_SetConfig+0x100>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC2_SetConfig+0xb0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1c      	ldr	r2, [pc, #112]	; (800744c <TIM_OC2_SetConfig+0x104>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC2_SetConfig+0xb0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <TIM_OC2_SetConfig+0x108>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC2_SetConfig+0xb0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1a      	ldr	r2, [pc, #104]	; (8007454 <TIM_OC2_SetConfig+0x10c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0xb0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a19      	ldr	r2, [pc, #100]	; (8007458 <TIM_OC2_SetConfig+0x110>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40013400 	.word	0x40013400
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	40014800 	.word	0x40014800

0800745c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a27      	ldr	r2, [pc, #156]	; (8007558 <TIM_OC3_SetConfig+0xfc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_OC3_SetConfig+0x6a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a26      	ldr	r2, [pc, #152]	; (800755c <TIM_OC3_SetConfig+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d10d      	bne.n	80074e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <TIM_OC3_SetConfig+0xfc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_OC3_SetConfig+0xae>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1b      	ldr	r2, [pc, #108]	; (800755c <TIM_OC3_SetConfig+0x100>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_OC3_SetConfig+0xae>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <TIM_OC3_SetConfig+0x104>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_OC3_SetConfig+0xae>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a19      	ldr	r2, [pc, #100]	; (8007564 <TIM_OC3_SetConfig+0x108>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_OC3_SetConfig+0xae>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a18      	ldr	r2, [pc, #96]	; (8007568 <TIM_OC3_SetConfig+0x10c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d113      	bne.n	8007532 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	621a      	str	r2, [r3, #32]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40013400 	.word	0x40013400
 8007560:	40014000 	.word	0x40014000
 8007564:	40014400 	.word	0x40014400
 8007568:	40014800 	.word	0x40014800

0800756c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	031b      	lsls	r3, r3, #12
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a28      	ldr	r2, [pc, #160]	; (800766c <TIM_OC4_SetConfig+0x100>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC4_SetConfig+0x6c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a27      	ldr	r2, [pc, #156]	; (8007670 <TIM_OC4_SetConfig+0x104>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10d      	bne.n	80075f4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	031b      	lsls	r3, r3, #12
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1d      	ldr	r2, [pc, #116]	; (800766c <TIM_OC4_SetConfig+0x100>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d00f      	beq.n	800761c <TIM_OC4_SetConfig+0xb0>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <TIM_OC4_SetConfig+0x104>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00b      	beq.n	800761c <TIM_OC4_SetConfig+0xb0>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <TIM_OC4_SetConfig+0x108>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d007      	beq.n	800761c <TIM_OC4_SetConfig+0xb0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <TIM_OC4_SetConfig+0x10c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_OC4_SetConfig+0xb0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a19      	ldr	r2, [pc, #100]	; (800767c <TIM_OC4_SetConfig+0x110>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d113      	bne.n	8007644 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007622:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800762a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	019b      	lsls	r3, r3, #6
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	019b      	lsls	r3, r3, #6
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40012c00 	.word	0x40012c00
 8007670:	40013400 	.word	0x40013400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a17      	ldr	r2, [pc, #92]	; (8007734 <TIM_OC5_SetConfig+0xb4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00f      	beq.n	80076fa <TIM_OC5_SetConfig+0x7a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <TIM_OC5_SetConfig+0xb8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <TIM_OC5_SetConfig+0x7a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <TIM_OC5_SetConfig+0xbc>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d007      	beq.n	80076fa <TIM_OC5_SetConfig+0x7a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a14      	ldr	r2, [pc, #80]	; (8007740 <TIM_OC5_SetConfig+0xc0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_OC5_SetConfig+0x7a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <TIM_OC5_SetConfig+0xc4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d109      	bne.n	800770e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40013400 	.word	0x40013400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800

08007748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800778e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	051b      	lsls	r3, r3, #20
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a18      	ldr	r2, [pc, #96]	; (8007800 <TIM_OC6_SetConfig+0xb8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_OC6_SetConfig+0x7c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <TIM_OC6_SetConfig+0xbc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_OC6_SetConfig+0x7c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a16      	ldr	r2, [pc, #88]	; (8007808 <TIM_OC6_SetConfig+0xc0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_OC6_SetConfig+0x7c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <TIM_OC6_SetConfig+0xc4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_OC6_SetConfig+0x7c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a14      	ldr	r2, [pc, #80]	; (8007810 <TIM_OC6_SetConfig+0xc8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d109      	bne.n	80077d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800

08007814 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	4a4a      	ldr	r2, [pc, #296]	; (800798c <TIM_SlaveTimer_SetConfig+0x178>)
 8007864:	4293      	cmp	r3, r2
 8007866:	f000 808a 	beq.w	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 800786a:	4a48      	ldr	r2, [pc, #288]	; (800798c <TIM_SlaveTimer_SetConfig+0x178>)
 800786c:	4293      	cmp	r3, r2
 800786e:	f200 8083 	bhi.w	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 8007872:	4a47      	ldr	r2, [pc, #284]	; (8007990 <TIM_SlaveTimer_SetConfig+0x17c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	f000 8082 	beq.w	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 800787a:	4a45      	ldr	r2, [pc, #276]	; (8007990 <TIM_SlaveTimer_SetConfig+0x17c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d87b      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 8007880:	4a44      	ldr	r2, [pc, #272]	; (8007994 <TIM_SlaveTimer_SetConfig+0x180>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d07b      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 8007886:	4a43      	ldr	r2, [pc, #268]	; (8007994 <TIM_SlaveTimer_SetConfig+0x180>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d875      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 800788c:	4a42      	ldr	r2, [pc, #264]	; (8007998 <TIM_SlaveTimer_SetConfig+0x184>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d075      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 8007892:	4a41      	ldr	r2, [pc, #260]	; (8007998 <TIM_SlaveTimer_SetConfig+0x184>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d86f      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 8007898:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800789c:	d06f      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 800789e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078a2:	d869      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078a4:	2b70      	cmp	r3, #112	; 0x70
 80078a6:	d01a      	beq.n	80078de <TIM_SlaveTimer_SetConfig+0xca>
 80078a8:	2b70      	cmp	r3, #112	; 0x70
 80078aa:	d865      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078ac:	2b60      	cmp	r3, #96	; 0x60
 80078ae:	d059      	beq.n	8007964 <TIM_SlaveTimer_SetConfig+0x150>
 80078b0:	2b60      	cmp	r3, #96	; 0x60
 80078b2:	d861      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078b4:	2b50      	cmp	r3, #80	; 0x50
 80078b6:	d04b      	beq.n	8007950 <TIM_SlaveTimer_SetConfig+0x13c>
 80078b8:	2b50      	cmp	r3, #80	; 0x50
 80078ba:	d85d      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d019      	beq.n	80078f4 <TIM_SlaveTimer_SetConfig+0xe0>
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d859      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078c4:	2b30      	cmp	r3, #48	; 0x30
 80078c6:	d05a      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 80078c8:	2b30      	cmp	r3, #48	; 0x30
 80078ca:	d855      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d056      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d851      	bhi.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d052      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d050      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0x16a>
 80078dc:	e04c      	b.n	8007978 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68d9      	ldr	r1, [r3, #12]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f000 f9ef 	bl	8007cd0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80078f2:	e045      	b.n	8007980 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d004      	beq.n	8007906 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007900:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007904:	d101      	bne.n	800790a <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e03b      	b.n	8007982 <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007930:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	4313      	orrs	r3, r2
 800793c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	621a      	str	r2, [r3, #32]
      break;
 800794e:	e017      	b.n	8007980 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	6899      	ldr	r1, [r3, #8]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	461a      	mov	r2, r3
 800795e:	f000 f885 	bl	8007a6c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007962:	e00d      	b.n	8007980 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6899      	ldr	r1, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	461a      	mov	r2, r3
 8007972:	f000 f8e7 	bl	8007b44 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007976:	e003      	b.n	8007980 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	e000      	b.n	8007980 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 800797e:	bf00      	nop
  }

  return status;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	00100070 	.word	0x00100070
 8007990:	00100040 	.word	0x00100040
 8007994:	00100030 	.word	0x00100030
 8007998:	00100020 	.word	0x00100020

0800799c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a24      	ldr	r2, [pc, #144]	; (8007a58 <TIM_TI1_SetConfig+0xbc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <TIM_TI1_SetConfig+0x56>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d0:	d00f      	beq.n	80079f2 <TIM_TI1_SetConfig+0x56>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <TIM_TI1_SetConfig+0xc0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <TIM_TI1_SetConfig+0x56>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <TIM_TI1_SetConfig+0xc4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d007      	beq.n	80079f2 <TIM_TI1_SetConfig+0x56>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <TIM_TI1_SetConfig+0xc8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d003      	beq.n	80079f2 <TIM_TI1_SetConfig+0x56>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a1e      	ldr	r2, [pc, #120]	; (8007a68 <TIM_TI1_SetConfig+0xcc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d101      	bne.n	80079f6 <TIM_TI1_SetConfig+0x5a>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <TIM_TI1_SetConfig+0x5c>
 80079f6:	2300      	movs	r3, #0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e003      	b.n	8007a16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f043 0301 	orr.w	r3, r3, #1
 8007a14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 030a 	bic.w	r3, r3, #10
 8007a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f003 030a 	and.w	r3, r3, #10
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40012c00 	.word	0x40012c00
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000

08007a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f023 030a 	bic.w	r3, r3, #10
 8007aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b087      	sub	sp, #28
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f023 0210 	bic.w	r2, r3, #16
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	621a      	str	r2, [r3, #32]
}
 8007b38:	bf00      	nop
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	f023 0210 	bic.w	r2, r3, #16
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	031b      	lsls	r3, r3, #12
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f023 0303 	bic.w	r3, r3, #3
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	bf00      	nop
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	031b      	lsls	r3, r3, #12
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	031b      	lsls	r3, r3, #12
 8007c74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f043 0307 	orr.w	r3, r3, #7
 8007cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	021a      	lsls	r2, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	609a      	str	r2, [r3, #8]
}
 8007d04:	bf00      	nop
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2201      	movs	r2, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a1a      	ldr	r2, [r3, #32]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a1a      	ldr	r2, [r3, #32]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	fa01 f303 	lsl.w	r3, r1, r3
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
	...

08007d5c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <HAL_TIMEx_PWMN_Start+0x24>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	e022      	b.n	8007dc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d109      	bne.n	8007d9a <HAL_TIMEx_PWMN_Start+0x3e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	bf14      	ite	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	2300      	moveq	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e015      	b.n	8007dc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d109      	bne.n	8007db4 <HAL_TIMEx_PWMN_Start+0x58>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e008      	b.n	8007dc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e069      	b.n	8007ea2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d104      	bne.n	8007dde <HAL_TIMEx_PWMN_Start+0x82>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ddc:	e013      	b.n	8007e06 <HAL_TIMEx_PWMN_Start+0xaa>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d104      	bne.n	8007dee <HAL_TIMEx_PWMN_Start+0x92>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dec:	e00b      	b.n	8007e06 <HAL_TIMEx_PWMN_Start+0xaa>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d104      	bne.n	8007dfe <HAL_TIMEx_PWMN_Start+0xa2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dfc:	e003      	b.n	8007e06 <HAL_TIMEx_PWMN_Start+0xaa>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 faab 	bl	800836a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a20      	ldr	r2, [pc, #128]	; (8007eac <HAL_TIMEx_PWMN_Start+0x150>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d018      	beq.n	8007e60 <HAL_TIMEx_PWMN_Start+0x104>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e36:	d013      	beq.n	8007e60 <HAL_TIMEx_PWMN_Start+0x104>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <HAL_TIMEx_PWMN_Start+0x154>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00e      	beq.n	8007e60 <HAL_TIMEx_PWMN_Start+0x104>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_TIMEx_PWMN_Start+0x158>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_TIMEx_PWMN_Start+0x104>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIMEx_PWMN_Start+0x104>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <HAL_TIMEx_PWMN_Start+0x160>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d115      	bne.n	8007e8c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <HAL_TIMEx_PWMN_Start+0x164>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	d015      	beq.n	8007e9e <HAL_TIMEx_PWMN_Start+0x142>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e78:	d011      	beq.n	8007e9e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8a:	e008      	b.n	8007e9e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40013400 	.word	0x40013400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	00010007 	.word	0x00010007

08007ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e065      	b.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a2c      	ldr	r2, [pc, #176]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a2b      	ldr	r2, [pc, #172]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d108      	bne.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d018      	beq.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f52:	d013      	beq.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00e      	beq.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a12      	ldr	r2, [pc, #72]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a13      	ldr	r2, [pc, #76]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d10c      	bne.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40013400 	.word	0x40013400
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40014000 	.word	0x40014000

08007fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e087      	b.n	80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a27      	ldr	r2, [pc, #156]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a25      	ldr	r2, [pc, #148]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d106      	bne.n	8008080 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a1e      	ldr	r2, [pc, #120]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d126      	bne.n	80080e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	051b      	lsls	r3, r3, #20
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0e      	ldr	r2, [pc, #56]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d106      	bne.n	80080e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40013400 	.word	0x40013400

08008108 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008108:	b480      	push	{r7}
 800810a:	b08b      	sub	sp, #44	; 0x2c
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008124:	2302      	movs	r3, #2
 8008126:	e0c1      	b.n	80082ac <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3b01      	subs	r3, #1
 8008136:	2b0f      	cmp	r3, #15
 8008138:	d854      	bhi.n	80081e4 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008181 	.word	0x08008181
 8008144:	08008195 	.word	0x08008195
 8008148:	080081e5 	.word	0x080081e5
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081e5 	.word	0x080081e5
 8008154:	080081e5 	.word	0x080081e5
 8008158:	080081e5 	.word	0x080081e5
 800815c:	080081bd 	.word	0x080081bd
 8008160:	080081e5 	.word	0x080081e5
 8008164:	080081e5 	.word	0x080081e5
 8008168:	080081e5 	.word	0x080081e5
 800816c:	080081e5 	.word	0x080081e5
 8008170:	080081e5 	.word	0x080081e5
 8008174:	080081e5 	.word	0x080081e5
 8008178:	080081e5 	.word	0x080081e5
 800817c:	080081d1 	.word	0x080081d1
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008180:	2301      	movs	r3, #1
 8008182:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008184:	2300      	movs	r3, #0
 8008186:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800818c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800818e:	2309      	movs	r3, #9
 8008190:	617b      	str	r3, [r7, #20]
      break;
 8008192:	e030      	b.n	80081f6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008194:	2302      	movs	r3, #2
 8008196:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008198:	2301      	movs	r3, #1
 800819a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800819c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80081a2:	230a      	movs	r3, #10
 80081a4:	617b      	str	r3, [r7, #20]
      break;
 80081a6:	e026      	b.n	80081f6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80081a8:	2304      	movs	r3, #4
 80081aa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80081ac:	2302      	movs	r3, #2
 80081ae:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80081b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081b4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80081b6:	230b      	movs	r3, #11
 80081b8:	617b      	str	r3, [r7, #20]
      break;
 80081ba:	e01c      	b.n	80081f6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80081bc:	2308      	movs	r3, #8
 80081be:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80081c0:	2303      	movs	r3, #3
 80081c2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80081c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081c8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80081ca:	230c      	movs	r3, #12
 80081cc:	617b      	str	r3, [r7, #20]
      break;
 80081ce:	e012      	b.n	80081f6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80081d0:	2310      	movs	r3, #16
 80081d2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80081d4:	2304      	movs	r3, #4
 80081d6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80081d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081dc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80081de:	230d      	movs	r3, #13
 80081e0:	617b      	str	r3, [r7, #20]
      break;
 80081e2:	e008      	b.n	80081f6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
      break;
 80081f4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d003      	beq.n	8008204 <HAL_TIMEx_ConfigBreakInput+0xfc>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d025      	beq.n	800824e <HAL_TIMEx_ConfigBreakInput+0x146>
 8008202:	e049      	b.n	8008298 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	43db      	mvns	r3, r3
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4013      	ands	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	409a      	lsls	r2, r3
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	4013      	ands	r3, r2
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	43db      	mvns	r3, r3
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4013      	ands	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	409a      	lsls	r2, r3
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4013      	ands	r3, r2
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800824c:	e028      	b.n	80082a0 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008254:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	43db      	mvns	r3, r3
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4013      	ands	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	409a      	lsls	r2, r3
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	4013      	ands	r3, r2
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	43db      	mvns	r3, r3
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4013      	ands	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	409a      	lsls	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4013      	ands	r3, r2
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008296:	e003      	b.n	80082a0 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800829e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	372c      	adds	r7, #44	; 0x2c
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800836a:	b480      	push	{r7}
 800836c:	b087      	sub	sp, #28
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	2204      	movs	r2, #4
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1a      	ldr	r2, [r3, #32]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	43db      	mvns	r3, r3
 800838c:	401a      	ands	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1a      	ldr	r2, [r3, #32]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	fa01 f303 	lsl.w	r3, r1, r3
 80083a2:	431a      	orrs	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	621a      	str	r2, [r3, #32]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e042      	b.n	800844c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7f9 fda7 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2224      	movs	r2, #36	; 0x24
 80083e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fcf8 	bl	8008dec <UART_SetConfig>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e022      	b.n	800844c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 ffb8 	bl	8009384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 f83f 	bl	80094c8 <UART_CheckIdleState>
 800844a:	4603      	mov	r3, r0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	; 0x28
 8008458:	af02      	add	r7, sp, #8
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846a:	2b20      	cmp	r3, #32
 800846c:	f040 8083 	bne.w	8008576 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_UART_Transmit+0x28>
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e07b      	b.n	8008578 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_UART_Transmit+0x3a>
 800848a:	2302      	movs	r3, #2
 800848c:	e074      	b.n	8008578 <HAL_UART_Transmit+0x124>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2221      	movs	r2, #33	; 0x21
 80084a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084a6:	f7f9 ff75 	bl	8002394 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d108      	bne.n	80084d8 <HAL_UART_Transmit+0x84>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	e003      	b.n	80084e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80084e8:	e02c      	b.n	8008544 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2200      	movs	r2, #0
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f001 f832 	bl	800955e <UART_WaitOnFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e039      	b.n	8008578 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10b      	bne.n	8008522 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008518:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	3302      	adds	r3, #2
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	e007      	b.n	8008532 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	3301      	adds	r3, #1
 8008530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1cc      	bne.n	80084ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2200      	movs	r2, #0
 8008558:	2140      	movs	r1, #64	; 0x40
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 ffff 	bl	800955e <UART_WaitOnFlagUntilTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e006      	b.n	8008578 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e000      	b.n	8008578 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008580:	b480      	push	{r7}
 8008582:	b091      	sub	sp, #68	; 0x44
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008594:	2b20      	cmp	r3, #32
 8008596:	f040 808c 	bne.w	80086b2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <HAL_UART_Transmit_IT+0x26>
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e084      	b.n	80086b4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_UART_Transmit_IT+0x38>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e07d      	b.n	80086b4 <HAL_UART_Transmit_IT+0x134>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	88fa      	ldrh	r2, [r7, #6]
 80085ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2221      	movs	r2, #33	; 0x21
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f4:	d12e      	bne.n	8008654 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fe:	d107      	bne.n	8008610 <HAL_UART_Transmit_IT+0x90>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a2d      	ldr	r2, [pc, #180]	; (80086c0 <HAL_UART_Transmit_IT+0x140>)
 800860c:	675a      	str	r2, [r3, #116]	; 0x74
 800860e:	e002      	b.n	8008616 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a2c      	ldr	r2, [pc, #176]	; (80086c4 <HAL_UART_Transmit_IT+0x144>)
 8008614:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863e:	637a      	str	r2, [r7, #52]	; 0x34
 8008640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e5      	bne.n	800861e <HAL_UART_Transmit_IT+0x9e>
 8008652:	e02c      	b.n	80086ae <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865c:	d107      	bne.n	800866e <HAL_UART_Transmit_IT+0xee>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <HAL_UART_Transmit_IT+0x148>)
 800866a:	675a      	str	r2, [r3, #116]	; 0x74
 800866c:	e002      	b.n	8008674 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a16      	ldr	r2, [pc, #88]	; (80086cc <HAL_UART_Transmit_IT+0x14c>)
 8008672:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	613b      	str	r3, [r7, #16]
   return(result);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	623b      	str	r3, [r7, #32]
 800869c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	69f9      	ldr	r1, [r7, #28]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
  }
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3744      	adds	r7, #68	; 0x44
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	08009c97 	.word	0x08009c97
 80086c4:	08009bb7 	.word	0x08009bb7
 80086c8:	08009af5 	.word	0x08009af5
 80086cc:	08009a3d 	.word	0x08009a3d

080086d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	; 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d142      	bne.n	800876e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_UART_Receive_IT+0x24>
 80086ee:	88fb      	ldrh	r3, [r7, #6]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e03b      	b.n	8008770 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d101      	bne.n	8008706 <HAL_UART_Receive_IT+0x36>
 8008702:	2302      	movs	r3, #2
 8008704:	e034      	b.n	8008770 <HAL_UART_Receive_IT+0xa0>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a17      	ldr	r2, [pc, #92]	; (8008778 <HAL_UART_Receive_IT+0xa8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01f      	beq.n	800875e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d018      	beq.n	800875e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	613b      	str	r3, [r7, #16]
   return(result);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	623b      	str	r3, [r7, #32]
 800874c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	69f9      	ldr	r1, [r7, #28]
 8008750:	6a3a      	ldr	r2, [r7, #32]
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	61bb      	str	r3, [r7, #24]
   return(result);
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e6      	bne.n	800872c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	461a      	mov	r2, r3
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 ffc3 	bl	80096f0 <UART_Start_Receive_IT>
 800876a:	4603      	mov	r3, r0
 800876c:	e000      	b.n	8008770 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800876e:	2302      	movs	r3, #2
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	40008000 	.word	0x40008000

0800877c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b0ba      	sub	sp, #232	; 0xe8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80087a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80087aa:	4013      	ands	r3, r2
 80087ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80087b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d11b      	bne.n	80087f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d015      	beq.n	80087f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d105      	bne.n	80087dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 82d6 	beq.w	8008d92 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
      }
      return;
 80087ee:	e2d0      	b.n	8008d92 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 811f 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087fe:	4b8b      	ldr	r3, [pc, #556]	; (8008a2c <HAL_UART_IRQHandler+0x2b0>)
 8008800:	4013      	ands	r3, r2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800880a:	4b89      	ldr	r3, [pc, #548]	; (8008a30 <HAL_UART_IRQHandler+0x2b4>)
 800880c:	4013      	ands	r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 8112 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d011      	beq.n	8008844 <HAL_UART_IRQHandler+0xc8>
 8008820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2201      	movs	r2, #1
 8008832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800883a:	f043 0201 	orr.w	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d011      	beq.n	8008874 <HAL_UART_IRQHandler+0xf8>
 8008850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2202      	movs	r2, #2
 8008862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886a:	f043 0204 	orr.w	r2, r3, #4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d011      	beq.n	80088a4 <HAL_UART_IRQHandler+0x128>
 8008880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2204      	movs	r2, #4
 8008892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889a:	f043 0202 	orr.w	r2, r3, #2
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d017      	beq.n	80088e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80088c0:	4b5a      	ldr	r3, [pc, #360]	; (8008a2c <HAL_UART_IRQHandler+0x2b0>)
 80088c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2208      	movs	r2, #8
 80088ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	f043 0208 	orr.w	r2, r3, #8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d012      	beq.n	8008912 <HAL_UART_IRQHandler+0x196>
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008908:	f043 0220 	orr.w	r2, r3, #32
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 823c 	beq.w	8008d96 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800891e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d013      	beq.n	8008952 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800892a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d105      	bne.n	8008942 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800893a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d007      	beq.n	8008952 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d005      	beq.n	8008976 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800896a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800896e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04f      	beq.n	8008a16 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 ffe4 	bl	8009944 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d141      	bne.n	8008a0e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1d9      	bne.n	800898a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d013      	beq.n	8008a06 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e2:	4a14      	ldr	r2, [pc, #80]	; (8008a34 <HAL_UART_IRQHandler+0x2b8>)
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc f8be 	bl	8004b6c <HAL_DMA_Abort_IT>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d017      	beq.n	8008a26 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	e00f      	b.n	8008a26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f9da 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e00b      	b.n	8008a26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9d6 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	e007      	b.n	8008a26 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9d2 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008a24:	e1b7      	b.n	8008d96 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a26:	bf00      	nop
    return;
 8008a28:	e1b5      	b.n	8008d96 <HAL_UART_IRQHandler+0x61a>
 8008a2a:	bf00      	nop
 8008a2c:	10000001 	.word	0x10000001
 8008a30:	04000120 	.word	0x04000120
 8008a34:	08009a11 	.word	0x08009a11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	f040 814a 	bne.w	8008cd6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a46:	f003 0310 	and.w	r3, r3, #16
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8143 	beq.w	8008cd6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 813c 	beq.w	8008cd6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	f040 80b5 	bne.w	8008be0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8187 	beq.w	8008d9a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a96:	429a      	cmp	r2, r3
 8008a98:	f080 817f 	bcs.w	8008d9a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 8086 	bne.w	8008bc4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ae6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1da      	bne.n	8008ab8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e1      	bne.n	8008b02 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e3      	bne.n	8008b3e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	f023 0310 	bic.w	r3, r3, #16
 8008b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ba8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e4      	bne.n	8008b84 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fb ff7b 	bl	8004aba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8fb 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bde:	e0dc      	b.n	8008d9a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80ce 	beq.w	8008d9e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80c9 	beq.w	8008d9e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e4      	bne.n	8008c0c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	623b      	str	r3, [r7, #32]
   return(result);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e1      	bne.n	8008c42 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0310 	bic.w	r3, r3, #16
 8008ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e4      	bne.n	8008c92 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f880 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cd4:	e063      	b.n	8008d9e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00e      	beq.n	8008d00 <HAL_UART_IRQHandler+0x584>
 8008ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fcc9 	bl	800a690 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cfe:	e051      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d014      	beq.n	8008d36 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d03a      	beq.n	8008da2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
    }
    return;
 8008d34:	e035      	b.n	8008da2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <HAL_UART_IRQHandler+0x5da>
 8008d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 f816 	bl	8009d80 <UART_EndTransmit_IT>
    return;
 8008d54:	e026      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <HAL_UART_IRQHandler+0x5fa>
 8008d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 fca2 	bl	800a6b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d74:	e016      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d010      	beq.n	8008da4 <HAL_UART_IRQHandler+0x628>
 8008d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da0c      	bge.n	8008da4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fc8a 	bl	800a6a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d90:	e008      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
      return;
 8008d92:	bf00      	nop
 8008d94:	e006      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
    return;
 8008d96:	bf00      	nop
 8008d98:	e004      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
      return;
 8008d9a:	bf00      	nop
 8008d9c:	e002      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
      return;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <HAL_UART_IRQHandler+0x628>
    return;
 8008da2:	bf00      	nop
  }
}
 8008da4:	37e8      	adds	r7, #232	; 0xe8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop

08008dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df0:	b08c      	sub	sp, #48	; 0x30
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4bab      	ldr	r3, [pc, #684]	; (80090c8 <UART_SetConfig+0x2dc>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e24:	430b      	orrs	r3, r1
 8008e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4aa0      	ldr	r2, [pc, #640]	; (80090cc <UART_SetConfig+0x2e0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e54:	4313      	orrs	r3, r2
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008e62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	f023 010f 	bic.w	r1, r3, #15
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a91      	ldr	r2, [pc, #580]	; (80090d0 <UART_SetConfig+0x2e4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d125      	bne.n	8008edc <UART_SetConfig+0xf0>
 8008e90:	4b90      	ldr	r3, [pc, #576]	; (80090d4 <UART_SetConfig+0x2e8>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d81a      	bhi.n	8008ed4 <UART_SetConfig+0xe8>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <UART_SetConfig+0xb8>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008ec5 	.word	0x08008ec5
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ecd 	.word	0x08008ecd
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eba:	e0d6      	b.n	800906a <UART_SetConfig+0x27e>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec2:	e0d2      	b.n	800906a <UART_SetConfig+0x27e>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eca:	e0ce      	b.n	800906a <UART_SetConfig+0x27e>
 8008ecc:	2308      	movs	r3, #8
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed2:	e0ca      	b.n	800906a <UART_SetConfig+0x27e>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eda:	e0c6      	b.n	800906a <UART_SetConfig+0x27e>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a7d      	ldr	r2, [pc, #500]	; (80090d8 <UART_SetConfig+0x2ec>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d138      	bne.n	8008f58 <UART_SetConfig+0x16c>
 8008ee6:	4b7b      	ldr	r3, [pc, #492]	; (80090d4 <UART_SetConfig+0x2e8>)
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b0c      	cmp	r3, #12
 8008ef2:	d82d      	bhi.n	8008f50 <UART_SetConfig+0x164>
 8008ef4:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <UART_SetConfig+0x110>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f31 	.word	0x08008f31
 8008f00:	08008f51 	.word	0x08008f51
 8008f04:	08008f51 	.word	0x08008f51
 8008f08:	08008f51 	.word	0x08008f51
 8008f0c:	08008f41 	.word	0x08008f41
 8008f10:	08008f51 	.word	0x08008f51
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
 8008f1c:	08008f39 	.word	0x08008f39
 8008f20:	08008f51 	.word	0x08008f51
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	08008f51 	.word	0x08008f51
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f36:	e098      	b.n	800906a <UART_SetConfig+0x27e>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f3e:	e094      	b.n	800906a <UART_SetConfig+0x27e>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f46:	e090      	b.n	800906a <UART_SetConfig+0x27e>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f4e:	e08c      	b.n	800906a <UART_SetConfig+0x27e>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f56:	e088      	b.n	800906a <UART_SetConfig+0x27e>
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a5f      	ldr	r2, [pc, #380]	; (80090dc <UART_SetConfig+0x2f0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d125      	bne.n	8008fae <UART_SetConfig+0x1c2>
 8008f62:	4b5c      	ldr	r3, [pc, #368]	; (80090d4 <UART_SetConfig+0x2e8>)
 8008f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f6c:	2b30      	cmp	r3, #48	; 0x30
 8008f6e:	d016      	beq.n	8008f9e <UART_SetConfig+0x1b2>
 8008f70:	2b30      	cmp	r3, #48	; 0x30
 8008f72:	d818      	bhi.n	8008fa6 <UART_SetConfig+0x1ba>
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d00a      	beq.n	8008f8e <UART_SetConfig+0x1a2>
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d814      	bhi.n	8008fa6 <UART_SetConfig+0x1ba>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <UART_SetConfig+0x19a>
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d008      	beq.n	8008f96 <UART_SetConfig+0x1aa>
 8008f84:	e00f      	b.n	8008fa6 <UART_SetConfig+0x1ba>
 8008f86:	2300      	movs	r3, #0
 8008f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f8c:	e06d      	b.n	800906a <UART_SetConfig+0x27e>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f94:	e069      	b.n	800906a <UART_SetConfig+0x27e>
 8008f96:	2304      	movs	r3, #4
 8008f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f9c:	e065      	b.n	800906a <UART_SetConfig+0x27e>
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fa4:	e061      	b.n	800906a <UART_SetConfig+0x27e>
 8008fa6:	2310      	movs	r3, #16
 8008fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fac:	e05d      	b.n	800906a <UART_SetConfig+0x27e>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a4b      	ldr	r2, [pc, #300]	; (80090e0 <UART_SetConfig+0x2f4>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d125      	bne.n	8009004 <UART_SetConfig+0x218>
 8008fb8:	4b46      	ldr	r3, [pc, #280]	; (80090d4 <UART_SetConfig+0x2e8>)
 8008fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8008fc4:	d016      	beq.n	8008ff4 <UART_SetConfig+0x208>
 8008fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8008fc8:	d818      	bhi.n	8008ffc <UART_SetConfig+0x210>
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	d00a      	beq.n	8008fe4 <UART_SetConfig+0x1f8>
 8008fce:	2b80      	cmp	r3, #128	; 0x80
 8008fd0:	d814      	bhi.n	8008ffc <UART_SetConfig+0x210>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <UART_SetConfig+0x1f0>
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d008      	beq.n	8008fec <UART_SetConfig+0x200>
 8008fda:	e00f      	b.n	8008ffc <UART_SetConfig+0x210>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fe2:	e042      	b.n	800906a <UART_SetConfig+0x27e>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fea:	e03e      	b.n	800906a <UART_SetConfig+0x27e>
 8008fec:	2304      	movs	r3, #4
 8008fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ff2:	e03a      	b.n	800906a <UART_SetConfig+0x27e>
 8008ff4:	2308      	movs	r3, #8
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ffa:	e036      	b.n	800906a <UART_SetConfig+0x27e>
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009002:	e032      	b.n	800906a <UART_SetConfig+0x27e>
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a30      	ldr	r2, [pc, #192]	; (80090cc <UART_SetConfig+0x2e0>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d12a      	bne.n	8009064 <UART_SetConfig+0x278>
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <UART_SetConfig+0x2e8>)
 8009010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009014:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800901c:	d01a      	beq.n	8009054 <UART_SetConfig+0x268>
 800901e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009022:	d81b      	bhi.n	800905c <UART_SetConfig+0x270>
 8009024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009028:	d00c      	beq.n	8009044 <UART_SetConfig+0x258>
 800902a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902e:	d815      	bhi.n	800905c <UART_SetConfig+0x270>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <UART_SetConfig+0x250>
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009038:	d008      	beq.n	800904c <UART_SetConfig+0x260>
 800903a:	e00f      	b.n	800905c <UART_SetConfig+0x270>
 800903c:	2300      	movs	r3, #0
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009042:	e012      	b.n	800906a <UART_SetConfig+0x27e>
 8009044:	2302      	movs	r3, #2
 8009046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800904a:	e00e      	b.n	800906a <UART_SetConfig+0x27e>
 800904c:	2304      	movs	r3, #4
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009052:	e00a      	b.n	800906a <UART_SetConfig+0x27e>
 8009054:	2308      	movs	r3, #8
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800905a:	e006      	b.n	800906a <UART_SetConfig+0x27e>
 800905c:	2310      	movs	r3, #16
 800905e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009062:	e002      	b.n	800906a <UART_SetConfig+0x27e>
 8009064:	2310      	movs	r3, #16
 8009066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a17      	ldr	r2, [pc, #92]	; (80090cc <UART_SetConfig+0x2e0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	f040 80a8 	bne.w	80091c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009076:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800907a:	2b08      	cmp	r3, #8
 800907c:	d834      	bhi.n	80090e8 <UART_SetConfig+0x2fc>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x298>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090a9 	.word	0x080090a9
 8009088:	080090e9 	.word	0x080090e9
 800908c:	080090b1 	.word	0x080090b1
 8009090:	080090e9 	.word	0x080090e9
 8009094:	080090b7 	.word	0x080090b7
 8009098:	080090e9 	.word	0x080090e9
 800909c:	080090e9 	.word	0x080090e9
 80090a0:	080090e9 	.word	0x080090e9
 80090a4:	080090bf 	.word	0x080090bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a8:	f7fc fe18 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 80090ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090ae:	e021      	b.n	80090f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <UART_SetConfig+0x2f8>)
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090b4:	e01e      	b.n	80090f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090b6:	f7fc fda3 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 80090ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090bc:	e01a      	b.n	80090f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090c4:	e016      	b.n	80090f4 <UART_SetConfig+0x308>
 80090c6:	bf00      	nop
 80090c8:	cfff69f3 	.word	0xcfff69f3
 80090cc:	40008000 	.word	0x40008000
 80090d0:	40013800 	.word	0x40013800
 80090d4:	40021000 	.word	0x40021000
 80090d8:	40004400 	.word	0x40004400
 80090dc:	40004800 	.word	0x40004800
 80090e0:	40004c00 	.word	0x40004c00
 80090e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 812a 	beq.w	8009350 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	4a9e      	ldr	r2, [pc, #632]	; (800937c <UART_SetConfig+0x590>)
 8009102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009106:	461a      	mov	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	fbb3 f3f2 	udiv	r3, r3, r2
 800910e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	4413      	add	r3, r2
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	429a      	cmp	r2, r3
 800911e:	d305      	bcc.n	800912c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d903      	bls.n	8009134 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009132:	e10d      	b.n	8009350 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	2200      	movs	r2, #0
 8009138:	60bb      	str	r3, [r7, #8]
 800913a:	60fa      	str	r2, [r7, #12]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	4a8e      	ldr	r2, [pc, #568]	; (800937c <UART_SetConfig+0x590>)
 8009142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009146:	b29b      	uxth	r3, r3
 8009148:	2200      	movs	r2, #0
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009156:	f7f7 fdbf 	bl	8000cd8 <__aeabi_uldivmod>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	020b      	lsls	r3, r1, #8
 800916c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009170:	0202      	lsls	r2, r0, #8
 8009172:	6979      	ldr	r1, [r7, #20]
 8009174:	6849      	ldr	r1, [r1, #4]
 8009176:	0849      	lsrs	r1, r1, #1
 8009178:	2000      	movs	r0, #0
 800917a:	460c      	mov	r4, r1
 800917c:	4605      	mov	r5, r0
 800917e:	eb12 0804 	adds.w	r8, r2, r4
 8009182:	eb43 0905 	adc.w	r9, r3, r5
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	469a      	mov	sl, r3
 800918e:	4693      	mov	fp, r2
 8009190:	4652      	mov	r2, sl
 8009192:	465b      	mov	r3, fp
 8009194:	4640      	mov	r0, r8
 8009196:	4649      	mov	r1, r9
 8009198:	f7f7 fd9e 	bl	8000cd8 <__aeabi_uldivmod>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4613      	mov	r3, r2
 80091a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091aa:	d308      	bcc.n	80091be <UART_SetConfig+0x3d2>
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b2:	d204      	bcs.n	80091be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	60da      	str	r2, [r3, #12]
 80091bc:	e0c8      	b.n	8009350 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80091c4:	e0c4      	b.n	8009350 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ce:	d167      	bne.n	80092a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80091d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d828      	bhi.n	800922a <UART_SetConfig+0x43e>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <UART_SetConfig+0x3f4>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	08009205 	.word	0x08009205
 80091e4:	0800920d 	.word	0x0800920d
 80091e8:	08009215 	.word	0x08009215
 80091ec:	0800922b 	.word	0x0800922b
 80091f0:	0800921b 	.word	0x0800921b
 80091f4:	0800922b 	.word	0x0800922b
 80091f8:	0800922b 	.word	0x0800922b
 80091fc:	0800922b 	.word	0x0800922b
 8009200:	08009223 	.word	0x08009223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009204:	f7fc fd6a 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8009208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800920a:	e014      	b.n	8009236 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800920c:	f7fc fd7c 	bl	8005d08 <HAL_RCC_GetPCLK2Freq>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009212:	e010      	b.n	8009236 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009214:	4b5a      	ldr	r3, [pc, #360]	; (8009380 <UART_SetConfig+0x594>)
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009218:	e00d      	b.n	8009236 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800921a:	f7fc fcf1 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009220:	e009      	b.n	8009236 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009228:	e005      	b.n	8009236 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8089 	beq.w	8009350 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	4a4e      	ldr	r2, [pc, #312]	; (800937c <UART_SetConfig+0x590>)
 8009244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009248:	461a      	mov	r2, r3
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009250:	005a      	lsls	r2, r3, #1
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	441a      	add	r2, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d916      	bls.n	8009298 <UART_SetConfig+0x4ac>
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009270:	d212      	bcs.n	8009298 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f023 030f 	bic.w	r3, r3, #15
 800927a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	b29b      	uxth	r3, r3
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	b29a      	uxth	r2, r3
 8009288:	8bfb      	ldrh	r3, [r7, #30]
 800928a:	4313      	orrs	r3, r2
 800928c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	8bfa      	ldrh	r2, [r7, #30]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	e05b      	b.n	8009350 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800929e:	e057      	b.n	8009350 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d828      	bhi.n	80092fa <UART_SetConfig+0x50e>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <UART_SetConfig+0x4c4>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092dd 	.word	0x080092dd
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	080092fb 	.word	0x080092fb
 80092c0:	080092eb 	.word	0x080092eb
 80092c4:	080092fb 	.word	0x080092fb
 80092c8:	080092fb 	.word	0x080092fb
 80092cc:	080092fb 	.word	0x080092fb
 80092d0:	080092f3 	.word	0x080092f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092d4:	f7fc fd02 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092da:	e014      	b.n	8009306 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092dc:	f7fc fd14 	bl	8005d08 <HAL_RCC_GetPCLK2Freq>
 80092e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092e2:	e010      	b.n	8009306 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092e4:	4b26      	ldr	r3, [pc, #152]	; (8009380 <UART_SetConfig+0x594>)
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092e8:	e00d      	b.n	8009306 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ea:	f7fc fc89 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 80092ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092f0:	e009      	b.n	8009306 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092f8:	e005      	b.n	8009306 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009304:	bf00      	nop
    }

    if (pclk != 0U)
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d021      	beq.n	8009350 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	4a1a      	ldr	r2, [pc, #104]	; (800937c <UART_SetConfig+0x590>)
 8009312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009316:	461a      	mov	r2, r3
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	fbb3 f2f2 	udiv	r2, r3, r2
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	441a      	add	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	2b0f      	cmp	r3, #15
 8009334:	d909      	bls.n	800934a <UART_SetConfig+0x55e>
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800933c:	d205      	bcs.n	800934a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	b29a      	uxth	r2, r3
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	e002      	b.n	8009350 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2201      	movs	r2, #1
 8009354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2201      	movs	r2, #1
 800935c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2200      	movs	r2, #0
 8009364:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800936c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009370:	4618      	mov	r0, r3
 8009372:	3730      	adds	r7, #48	; 0x30
 8009374:	46bd      	mov	sp, r7
 8009376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800937a:	bf00      	nop
 800937c:	08011a88 	.word	0x08011a88
 8009380:	00f42400 	.word	0x00f42400

08009384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f6:	f003 0308 	and.w	r3, r3, #8
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01a      	beq.n	800949a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009482:	d10a      	bne.n	800949a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	605a      	str	r2, [r3, #4]
  }
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094d8:	f7f8 ff5c 	bl	8002394 <HAL_GetTick>
 80094dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d10e      	bne.n	800950a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f82f 	bl	800955e <UART_WaitOnFlagUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e025      	b.n	8009556 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b04      	cmp	r3, #4
 8009516:	d10e      	bne.n	8009536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f819 	bl	800955e <UART_WaitOnFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e00f      	b.n	8009556 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b09c      	sub	sp, #112	; 0x70
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800956e:	e0a9      	b.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009576:	f000 80a5 	beq.w	80096c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957a:	f7f8 ff0b 	bl	8002394 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009586:	429a      	cmp	r2, r3
 8009588:	d302      	bcc.n	8009590 <UART_WaitOnFlagUntilTimeout+0x32>
 800958a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800958c:	2b00      	cmp	r3, #0
 800958e:	d140      	bne.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800959e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095a4:	667b      	str	r3, [r7, #100]	; 0x64
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e6      	bne.n	8009590 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	663b      	str	r3, [r7, #96]	; 0x60
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80095e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e5      	bne.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e069      	b.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d051      	beq.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800962e:	d149      	bne.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009638:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800964e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009658:	637b      	str	r3, [r7, #52]	; 0x34
 800965a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800965e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	613b      	str	r3, [r7, #16]
   return(result);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	66bb      	str	r3, [r7, #104]	; 0x68
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800968c:	623a      	str	r2, [r7, #32]
 800968e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	69f9      	ldr	r1, [r7, #28]
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	61bb      	str	r3, [r7, #24]
   return(result);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e010      	b.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69da      	ldr	r2, [r3, #28]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	4013      	ands	r3, r2
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	bf0c      	ite	eq
 80096d4:	2301      	moveq	r3, #1
 80096d6:	2300      	movne	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	429a      	cmp	r2, r3
 80096e0:	f43f af46 	beq.w	8009570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3770      	adds	r7, #112	; 0x70
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b0a3      	sub	sp, #140	; 0x8c
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	4613      	mov	r3, r2
 80096fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	88fa      	ldrh	r2, [r7, #6]
 8009710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009722:	d10e      	bne.n	8009742 <UART_Start_Receive_IT+0x52>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <UART_Start_Receive_IT+0x48>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009736:	e02d      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	22ff      	movs	r2, #255	; 0xff
 800973c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009740:	e028      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10d      	bne.n	8009766 <UART_Start_Receive_IT+0x76>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d104      	bne.n	800975c <UART_Start_Receive_IT+0x6c>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	22ff      	movs	r2, #255	; 0xff
 8009756:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800975a:	e01b      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	227f      	movs	r2, #127	; 0x7f
 8009760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009764:	e016      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800976e:	d10d      	bne.n	800978c <UART_Start_Receive_IT+0x9c>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <UART_Start_Receive_IT+0x92>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	227f      	movs	r2, #127	; 0x7f
 800977c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009780:	e008      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	223f      	movs	r2, #63	; 0x3f
 8009786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800978a:	e003      	b.n	8009794 <UART_Start_Receive_IT+0xa4>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2222      	movs	r2, #34	; 0x22
 80097a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80097b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3308      	adds	r3, #8
 80097c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80097c8:	673a      	str	r2, [r7, #112]	; 0x70
 80097ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80097ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80097d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e3      	bne.n	80097a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e4:	d153      	bne.n	800988e <UART_Start_Receive_IT+0x19e>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d34d      	bcc.n	800988e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fa:	d107      	bne.n	800980c <UART_Start_Receive_IT+0x11c>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a4b      	ldr	r2, [pc, #300]	; (8009934 <UART_Start_Receive_IT+0x244>)
 8009808:	671a      	str	r2, [r3, #112]	; 0x70
 800980a:	e002      	b.n	8009812 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a4a      	ldr	r2, [pc, #296]	; (8009938 <UART_Start_Receive_IT+0x248>)
 8009810:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d01a      	beq.n	8009858 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009846:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800984a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3308      	adds	r3, #8
 8009876:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009878:	64ba      	str	r2, [r7, #72]	; 0x48
 800987a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800987e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e5      	bne.n	8009858 <UART_Start_Receive_IT+0x168>
 800988c:	e04a      	b.n	8009924 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009896:	d107      	bne.n	80098a8 <UART_Start_Receive_IT+0x1b8>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4a26      	ldr	r2, [pc, #152]	; (800993c <UART_Start_Receive_IT+0x24c>)
 80098a4:	671a      	str	r2, [r3, #112]	; 0x70
 80098a6:	e002      	b.n	80098ae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a25      	ldr	r2, [pc, #148]	; (8009940 <UART_Start_Receive_IT+0x250>)
 80098ac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d019      	beq.n	80098f2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80098d2:	677b      	str	r3, [r7, #116]	; 0x74
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
 80098de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e6      	bne.n	80098be <UART_Start_Receive_IT+0x1ce>
 80098f0:	e018      	b.n	8009924 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f043 0320 	orr.w	r3, r3, #32
 8009906:	67bb      	str	r3, [r7, #120]	; 0x78
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009910:	623b      	str	r3, [r7, #32]
 8009912:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	69f9      	ldr	r1, [r7, #28]
 8009916:	6a3a      	ldr	r2, [r7, #32]
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	61bb      	str	r3, [r7, #24]
   return(result);
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e6      	bne.n	80098f2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	378c      	adds	r7, #140	; 0x8c
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800a391 	.word	0x0800a391
 8009938:	0800a099 	.word	0x0800a099
 800993c:	08009f37 	.word	0x08009f37
 8009940:	08009dd7 	.word	0x08009dd7

08009944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b095      	sub	sp, #84	; 0x54
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996a:	643b      	str	r3, [r7, #64]	; 0x40
 800996c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e6      	bne.n	800994c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	61fb      	str	r3, [r7, #28]
   return(result);
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	64bb      	str	r3, [r7, #72]	; 0x48
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3308      	adds	r3, #8
 80099a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e3      	bne.n	800997e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d118      	bne.n	80099f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f023 0310 	bic.w	r3, r3, #16
 80099d2:	647b      	str	r3, [r7, #68]	; 0x44
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	6979      	ldr	r1, [r7, #20]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e6      	bne.n	80099be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2220      	movs	r2, #32
 80099f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009a04:	bf00      	nop
 8009a06:	3754      	adds	r7, #84	; 0x54
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff f9c6 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b08f      	sub	sp, #60	; 0x3c
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a4a:	2b21      	cmp	r3, #33	; 0x21
 8009a4c:	d14c      	bne.n	8009ae8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d132      	bne.n	8009ac0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a7a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e6      	bne.n	8009a5a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6979      	ldr	r1, [r7, #20]
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e6      	bne.n	8009a8c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009abe:	e013      	b.n	8009ae8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009ae8:	bf00      	nop
 8009aea:	373c      	adds	r7, #60	; 0x3c
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b091      	sub	sp, #68	; 0x44
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b02:	2b21      	cmp	r3, #33	; 0x21
 8009b04:	d151      	bne.n	8009baa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d132      	bne.n	8009b78 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	633b      	str	r3, [r7, #48]	; 0x30
 8009b32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e6      	bne.n	8009b12 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	69b9      	ldr	r1, [r7, #24]
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e6      	bne.n	8009b44 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b76:	e018      	b.n	8009baa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b8c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b92:	1c9a      	adds	r2, r3, #2
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009baa:	bf00      	nop
 8009bac:	3744      	adds	r7, #68	; 0x44
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b091      	sub	sp, #68	; 0x44
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bc4:	2b21      	cmp	r3, #33	; 0x21
 8009bc6:	d160      	bne.n	8009c8a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009bd0:	e057      	b.n	8009c82 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d133      	bne.n	8009c46 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	e853 3f00 	ldrex	r3, [r3]
 8009bec:	623b      	str	r3, [r7, #32]
   return(result);
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8009c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e5      	bne.n	8009bde <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c26:	637b      	str	r3, [r7, #52]	; 0x34
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	61fb      	str	r3, [r7, #28]
 8009c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	69b9      	ldr	r1, [r7, #24]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e6      	bne.n	8009c12 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009c44:	e021      	b.n	8009c8a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d013      	beq.n	8009c7c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009c82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1a4      	bne.n	8009bd2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009c88:	e7ff      	b.n	8009c8a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009c8a:	bf00      	nop
 8009c8c:	3744      	adds	r7, #68	; 0x44
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b091      	sub	sp, #68	; 0x44
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ca4:	2b21      	cmp	r3, #33	; 0x21
 8009ca6:	d165      	bne.n	8009d74 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009cb0:	e05c      	b.n	8009d6c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d133      	bne.n	8009d26 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e5      	bne.n	8009cbe <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d06:	633b      	str	r3, [r7, #48]	; 0x30
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6979      	ldr	r1, [r7, #20]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009d24:	e026      	b.n	8009d74 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d018      	beq.n	8009d66 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d38:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d48:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d19f      	bne.n	8009cb2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009d72:	e7ff      	b.n	8009d74 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009d74:	bf00      	nop
 8009d76:	3744      	adds	r7, #68	; 0x44
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d9c:	61fb      	str	r3, [r7, #28]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	61bb      	str	r3, [r7, #24]
 8009da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6979      	ldr	r1, [r7, #20]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	613b      	str	r3, [r7, #16]
   return(result);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e6      	bne.n	8009d88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7fe ffef 	bl	8008dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dce:	bf00      	nop
 8009dd0:	3720      	adds	r7, #32
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b096      	sub	sp, #88	; 0x58
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009de4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dee:	2b22      	cmp	r3, #34	; 0x22
 8009df0:	f040 8095 	bne.w	8009f1e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dfe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009e02:	b2d9      	uxtb	r1, r3
 8009e04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0e:	400a      	ands	r2, r1
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d178      	bne.n	8009f2e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e50:	653b      	str	r3, [r7, #80]	; 0x50
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e6      	bne.n	8009e3c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	f023 0301 	bic.w	r3, r3, #1
 8009e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e5      	bne.n	8009e6e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d12e      	bne.n	8009f16 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0310 	bic.w	r3, r3, #16
 8009ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	69b9      	ldr	r1, [r7, #24]
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e6      	bne.n	8009ebe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	f003 0310 	and.w	r3, r3, #16
 8009efa:	2b10      	cmp	r3, #16
 8009efc:	d103      	bne.n	8009f06 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2210      	movs	r2, #16
 8009f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7fe ff60 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f14:	e00b      	b.n	8009f2e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 ff54 	bl	800adc4 <HAL_UART_RxCpltCallback>
}
 8009f1c:	e007      	b.n	8009f2e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0208 	orr.w	r2, r2, #8
 8009f2c:	619a      	str	r2, [r3, #24]
}
 8009f2e:	bf00      	nop
 8009f30:	3758      	adds	r7, #88	; 0x58
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b096      	sub	sp, #88	; 0x58
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	2b22      	cmp	r3, #34	; 0x22
 8009f50:	f040 8095 	bne.w	800a07e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f62:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f64:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009f68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d178      	bne.n	800a08e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fba:	643b      	str	r3, [r7, #64]	; 0x40
 8009fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e6      	bne.n	8009f9c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	f023 0301 	bic.w	r3, r3, #1
 8009fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3308      	adds	r3, #8
 8009fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e5      	bne.n	8009fce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a014:	2b01      	cmp	r3, #1
 800a016:	d12e      	bne.n	800a076 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f023 0310 	bic.w	r3, r3, #16
 800a032:	647b      	str	r3, [r7, #68]	; 0x44
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6979      	ldr	r1, [r7, #20]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	613b      	str	r3, [r7, #16]
   return(result);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e6      	bne.n	800a01e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	f003 0310 	and.w	r3, r3, #16
 800a05a:	2b10      	cmp	r3, #16
 800a05c:	d103      	bne.n	800a066 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2210      	movs	r2, #16
 800a064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7fe feb0 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a074:	e00b      	b.n	800a08e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fea4 	bl	800adc4 <HAL_UART_RxCpltCallback>
}
 800a07c:	e007      	b.n	800a08e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	699a      	ldr	r2, [r3, #24]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f042 0208 	orr.w	r2, r2, #8
 800a08c:	619a      	str	r2, [r3, #24]
}
 800a08e:	bf00      	nop
 800a090:	3758      	adds	r7, #88	; 0x58
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b0a6      	sub	sp, #152	; 0x98
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0a6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	2b22      	cmp	r3, #34	; 0x22
 800a0d0:	f040 814f 	bne.w	800a372 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0de:	e0f6      	b.n	800a2ce <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a0ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a0ee:	b2d9      	uxtb	r1, r3
 800a0f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	400a      	ands	r2, r1
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a110:	b29b      	uxth	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d053      	beq.n	800a1da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d011      	beq.n	800a162 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2201      	movs	r2, #1
 800a150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a158:	f043 0201 	orr.w	r2, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a16e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2202      	movs	r2, #2
 800a180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a192:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d011      	beq.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a19e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b8:	f043 0202 	orr.w	r2, r3, #2
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fe fdf7 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d173      	bne.n	800a2ce <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a1f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a208:	66bb      	str	r3, [r7, #104]	; 0x68
 800a20a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a20e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e4      	bne.n	800a1e6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3308      	adds	r3, #8
 800a222:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a232:	f023 0301 	bic.w	r3, r3, #1
 800a236:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a240:	657a      	str	r2, [r7, #84]	; 0x54
 800a242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e3      	bne.n	800a21c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a266:	2b01      	cmp	r3, #1
 800a268:	d12e      	bne.n	800a2c8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	f023 0310 	bic.w	r3, r3, #16
 800a284:	67bb      	str	r3, [r7, #120]	; 0x78
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a28e:	643b      	str	r3, [r7, #64]	; 0x40
 800a290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e6      	bne.n	800a270 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	d103      	bne.n	800a2b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2210      	movs	r2, #16
 800a2b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7fe fd87 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
 800a2c6:	e002      	b.n	800a2ce <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fd7b 	bl	800adc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d006      	beq.n	800a2e4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f47f aefe 	bne.w	800a0e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d045      	beq.n	800a382 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a2fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a300:	429a      	cmp	r2, r3
 800a302:	d23e      	bcs.n	800a382 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	61fb      	str	r3, [r7, #28]
   return(result);
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a31a:	673b      	str	r3, [r7, #112]	; 0x70
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3308      	adds	r3, #8
 800a322:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a324:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e5      	bne.n	800a304 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a14      	ldr	r2, [pc, #80]	; (800a38c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a33c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f043 0320 	orr.w	r3, r3, #32
 800a352:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	6979      	ldr	r1, [r7, #20]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	613b      	str	r3, [r7, #16]
   return(result);
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e6      	bne.n	800a33e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a370:	e007      	b.n	800a382 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699a      	ldr	r2, [r3, #24]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0208 	orr.w	r2, r2, #8
 800a380:	619a      	str	r2, [r3, #24]
}
 800a382:	bf00      	nop
 800a384:	3798      	adds	r7, #152	; 0x98
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08009dd7 	.word	0x08009dd7

0800a390 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b0a8      	sub	sp, #160	; 0xa0
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a39e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c6:	2b22      	cmp	r3, #34	; 0x22
 800a3c8:	f040 8153 	bne.w	800a672 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3d6:	e0fa      	b.n	800a5ce <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a3ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a3ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a400:	1c9a      	adds	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d053      	beq.n	800a4d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a42e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d011      	beq.n	800a45e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a43a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2201      	movs	r2, #1
 800a44c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a454:	f043 0201 	orr.w	r2, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a45e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d011      	beq.n	800a48e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a46a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2202      	movs	r2, #2
 800a47c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a484:	f043 0204 	orr.w	r2, r3, #4
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a48e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b00      	cmp	r3, #0
 800a498:	d011      	beq.n	800a4be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a49a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4b4:	f043 0202 	orr.w	r2, r3, #2
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7fe fc79 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d175      	bne.n	800a5ce <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a504:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a506:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a50a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a50c:	e841 2300 	strex	r3, r2, [r1]
 800a510:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e4      	bne.n	800a4e2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3308      	adds	r3, #8
 800a51e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a522:	e853 3f00 	ldrex	r3, [r3]
 800a526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a52a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a52e:	f023 0301 	bic.w	r3, r3, #1
 800a532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3308      	adds	r3, #8
 800a53c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a540:	65ba      	str	r2, [r7, #88]	; 0x58
 800a542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a548:	e841 2300 	strex	r3, r2, [r1]
 800a54c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1e1      	bne.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a566:	2b01      	cmp	r3, #1
 800a568:	d12e      	bne.n	800a5c8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a580:	f023 0310 	bic.w	r3, r3, #16
 800a584:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a58e:	647b      	str	r3, [r7, #68]	; 0x44
 800a590:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e6      	bne.n	800a570 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d103      	bne.n	800a5b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2210      	movs	r2, #16
 800a5b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7fe fc07 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
 800a5c6:	e002      	b.n	800a5ce <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fbfb 	bl	800adc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f47f aefa 	bne.w	800a3d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d045      	beq.n	800a682 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a600:	429a      	cmp	r2, r3
 800a602:	d23e      	bcs.n	800a682 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3308      	adds	r3, #8
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	623b      	str	r3, [r7, #32]
   return(result);
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a61a:	677b      	str	r3, [r7, #116]	; 0x74
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3308      	adds	r3, #8
 800a622:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a624:	633a      	str	r2, [r7, #48]	; 0x30
 800a626:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a62c:	e841 2300 	strex	r3, r2, [r1]
 800a630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1e5      	bne.n	800a604 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a14      	ldr	r2, [pc, #80]	; (800a68c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a63c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	e853 3f00 	ldrex	r3, [r3]
 800a64a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f043 0320 	orr.w	r3, r3, #32
 800a652:	673b      	str	r3, [r7, #112]	; 0x70
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a660:	69b9      	ldr	r1, [r7, #24]
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	e841 2300 	strex	r3, r2, [r1]
 800a668:	617b      	str	r3, [r7, #20]
   return(result);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e6      	bne.n	800a63e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a670:	e007      	b.n	800a682 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699a      	ldr	r2, [r3, #24]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0208 	orr.w	r2, r2, #8
 800a680:	619a      	str	r2, [r3, #24]
}
 800a682:	bf00      	nop
 800a684:	37a0      	adds	r7, #160	; 0xa0
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	08009f37 	.word	0x08009f37

0800a690 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d101      	bne.n	800a6e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e027      	b.n	800a732 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2224      	movs	r2, #36	; 0x24
 800a6ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f022 0201 	bic.w	r2, r2, #1
 800a708:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a710:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a752:	2302      	movs	r3, #2
 800a754:	e02d      	b.n	800a7b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2224      	movs	r2, #36	; 0x24
 800a762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0201 	bic.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f850 	bl	800a838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d101      	bne.n	800a7d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e02d      	b.n	800a82e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2224      	movs	r2, #36	; 0x24
 800a7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0201 	bic.w	r2, r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f812 	bl	800a838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a844:	2b00      	cmp	r3, #0
 800a846:	d108      	bne.n	800a85a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a858:	e031      	b.n	800a8be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a85a:	2308      	movs	r3, #8
 800a85c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a85e:	2308      	movs	r3, #8
 800a860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	0e5b      	lsrs	r3, r3, #25
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	0f5b      	lsrs	r3, r3, #29
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	7b3a      	ldrb	r2, [r7, #12]
 800a886:	4911      	ldr	r1, [pc, #68]	; (800a8cc <UARTEx_SetNbDataToProcess+0x94>)
 800a888:	5c8a      	ldrb	r2, [r1, r2]
 800a88a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a88e:	7b3a      	ldrb	r2, [r7, #12]
 800a890:	490f      	ldr	r1, [pc, #60]	; (800a8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a894:	fb93 f3f2 	sdiv	r3, r3, r2
 800a898:	b29a      	uxth	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	7b7a      	ldrb	r2, [r7, #13]
 800a8a4:	4909      	ldr	r1, [pc, #36]	; (800a8cc <UARTEx_SetNbDataToProcess+0x94>)
 800a8a6:	5c8a      	ldrb	r2, [r1, r2]
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8ac:	7b7a      	ldrb	r2, [r7, #13]
 800a8ae:	4908      	ldr	r1, [pc, #32]	; (800a8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a8b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	08011aa0 	.word	0x08011aa0
 800a8d0:	08011aa8 	.word	0x08011aa8
 800a8d4:	00000000 	.word	0x00000000

0800a8d8 <get_ADC_encoder_data>:
#include "debug.h"

ADC_ENCODER_Def adc_encoder;

void get_ADC_encoder_data(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
	float angle_temp;

	adc_encoder.angle = adc_encoder.adc_value/4096.0f * 360.0f;
 800a8de:	4b38      	ldr	r3, [pc, #224]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8ea:	eddf 6a36 	vldr	s13, [pc, #216]	; 800a9c4 <get_ADC_encoder_data+0xec>
 800a8ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8f2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a9c8 <get_ADC_encoder_data+0xf0>
 800a8f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8fa:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a8fc:	edc3 7a01 	vstr	s15, [r3, #4]
	adc_encoder.angle_rad = adc_encoder.adc_value/4096.0f * 2 * PI;
 800a900:	4b2f      	ldr	r3, [pc, #188]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a90c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800a9c4 <get_ADC_encoder_data+0xec>
 800a910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a918:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800a9cc <get_ADC_encoder_data+0xf4>
 800a91c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a920:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a922:	edc3 7a02 	vstr	s15, [r3, #8]
//	adc_encoder.angle_rad_offset = 6.055f;					   // 手动找到的零点，后续通过函数调用获得
	if (adc_encoder.angle_rad >= adc_encoder.angle_rad_offset) // 减去零点偏置
 800a926:	4b26      	ldr	r3, [pc, #152]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a928:	ed93 7a02 	vldr	s14, [r3, #8]
 800a92c:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a92e:	edd3 7a04 	vldr	s15, [r3, #16]
 800a932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93a:	db0b      	blt.n	800a954 <get_ADC_encoder_data+0x7c>
	{
		adc_encoder.angle_rad = adc_encoder.angle_rad - adc_encoder.angle_rad_offset;
 800a93c:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a93e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a944:	edd3 7a04 	vldr	s15, [r3, #16]
 800a948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a94c:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a94e:	edc3 7a02 	vstr	s15, [r3, #8]
 800a952:	e00e      	b.n	800a972 <get_ADC_encoder_data+0x9a>
	}
	else
	{
		adc_encoder.angle_rad = 2 * PI - adc_encoder.angle_rad_offset + adc_encoder.angle_rad;
 800a954:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a956:	edd3 7a04 	vldr	s15, [r3, #16]
 800a95a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a9d0 <get_ADC_encoder_data+0xf8>
 800a95e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a962:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a964:	edd3 7a02 	vldr	s15, [r3, #8]
 800a968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a96c:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a96e:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	angle_temp =  adc_encoder.angle_rad * MOTOR_POLE;
 800a972:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a974:	edd3 7a02 	vldr	s15, [r3, #8]
 800a978:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800a97c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a980:	edc7 7a01 	vstr	s15, [r7, #4]
	adc_encoder.electronic_angle = fmod(angle_temp,2 * PI);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7f5 fe07 	bl	8000598 <__aeabi_f2d>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 800a9b8 <get_ADC_encoder_data+0xe0>
 800a992:	ec43 2b10 	vmov	d0, r2, r3
 800a996:	f005 fe8f 	bl	80106b8 <fmod>
 800a99a:	ec53 2b10 	vmov	r2, r3, d0
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7f6 f949 	bl	8000c38 <__aeabi_d2f>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4a05      	ldr	r2, [pc, #20]	; (800a9c0 <get_ADC_encoder_data+0xe8>)
 800a9aa:	60d3      	str	r3, [r2, #12]

}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	f3af 8000 	nop.w
 800a9b8:	60000000 	.word	0x60000000
 800a9bc:	401921fb 	.word	0x401921fb
 800a9c0:	20000498 	.word	0x20000498
 800a9c4:	45800000 	.word	0x45800000
 800a9c8:	43b40000 	.word	0x43b40000
 800a9cc:	40490fdb 	.word	0x40490fdb
 800a9d0:	40c90fdb 	.word	0x40c90fdb

0800a9d4 <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a21      	ldr	r2, [pc, #132]	; (800aa68 <HAL_TIM_IC_CaptureCallback+0x94>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d13b      	bne.n	800aa5e <HAL_TIM_IC_CaptureCallback+0x8a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7f1b      	ldrb	r3, [r3, #28]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d12c      	bne.n	800aa48 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			pwm_encoder.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fc fb27 	bl	8007044 <HAL_TIM_ReadCapturedValue>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4a1c      	ldr	r2, [pc, #112]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800a9fa:	6013      	str	r3, [r2, #0]
			pwm_encoder.frq = pwm_encoder.period * 0.1f;
 800a9fc:	4b1b      	ldr	r3, [pc, #108]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa08:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800aa70 <HAL_TIM_IC_CaptureCallback+0x9c>
 800aa0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa14:	ee17 3a90 	vmov	r3, s15
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800aa1c:	809a      	strh	r2, [r3, #4]
			pwm_encoder.duty = (pwm_encoder.high_time*0.9995f / pwm_encoder.period); //0.994是编码器角度补偿误差系数
 800aa1e:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800aa74 <HAL_TIM_IC_CaptureCallback+0xa0>
 800aa2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa32:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa42:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800aa44:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	7f1b      	ldrb	r3, [r3, #28]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d106      	bne.n	800aa5e <HAL_TIM_IC_CaptureCallback+0x8a>
		{
			pwm_encoder.high_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800aa50:	2104      	movs	r1, #4
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7fc faf6 	bl	8007044 <HAL_TIM_ReadCapturedValue>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	4a04      	ldr	r2, [pc, #16]	; (800aa6c <HAL_TIM_IC_CaptureCallback+0x98>)
 800aa5c:	6093      	str	r3, [r2, #8]
		}
	}
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	200004ac 	.word	0x200004ac
 800aa70:	3dcccccd 	.word	0x3dcccccd
 800aa74:	3f7fdf3b 	.word	0x3f7fdf3b

0800aa78 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */

/*重构回调函数*/
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa88:	f040 8088 	bne.w	800ab9c <HAL_ADCEx_InjectedConvCpltCallback+0x124>
	{
		current.ADC_a = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800aa8c:	2109      	movs	r1, #9
 800aa8e:	486c      	ldr	r0, [pc, #432]	; (800ac40 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aa90:	f7f9 f920 	bl	8003cd4 <HAL_ADCEx_InjectedGetValue>
 800aa94:	4603      	mov	r3, r0
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	4b6a      	ldr	r3, [pc, #424]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aa9a:	821a      	strh	r2, [r3, #16]
		current.ADC_b = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800aa9c:	f240 110f 	movw	r1, #271	; 0x10f
 800aaa0:	4867      	ldr	r0, [pc, #412]	; (800ac40 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aaa2:	f7f9 f917 	bl	8003cd4 <HAL_ADCEx_InjectedGetValue>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	4b66      	ldr	r3, [pc, #408]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aaac:	825a      	strh	r2, [r3, #18]
		current.ADC_bus = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800aaae:	f240 2115 	movw	r1, #533	; 0x215
 800aab2:	4863      	ldr	r0, [pc, #396]	; (800ac40 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800aab4:	f7f9 f90e 	bl	8003cd4 <HAL_ADCEx_InjectedGetValue>
 800aab8:	4603      	mov	r3, r0
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	4b61      	ldr	r3, [pc, #388]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aabe:	82da      	strh	r2, [r3, #22]

		current.Ia =  ADC_V_K*(current.ADC_a-current.ADC_Ia_offset)/AM_GAIN/R_SENSE ;
 800aac0:	4b60      	ldr	r3, [pc, #384]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aac2:	8a1b      	ldrh	r3, [r3, #16]
 800aac4:	461a      	mov	r2, r3
 800aac6:	4b5f      	ldr	r3, [pc, #380]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800aac8:	8b1b      	ldrh	r3, [r3, #24]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	4618      	mov	r0, r3
 800aace:	f7f5 fd51 	bl	8000574 <__aeabi_i2d>
 800aad2:	a355      	add	r3, pc, #340	; (adr r3, 800ac28 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fdb6 	bl	8000648 <__aeabi_dmul>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4610      	mov	r0, r2
 800aae2:	4619      	mov	r1, r3
 800aae4:	a352      	add	r3, pc, #328	; (adr r3, 800ac30 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fed7 	bl	800089c <__aeabi_ddiv>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	a350      	add	r3, pc, #320	; (adr r3, 800ac38 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fece 	bl	800089c <__aeabi_ddiv>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4610      	mov	r0, r2
 800ab06:	4619      	mov	r1, r3
 800ab08:	f7f6 f896 	bl	8000c38 <__aeabi_d2f>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	4a4d      	ldr	r2, [pc, #308]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab10:	6013      	str	r3, [r2, #0]
		current.Ib = ADC_V_K*(current.ADC_b-current.ADC_Ib_offset)/AM_GAIN/R_SENSE ;
 800ab12:	4b4c      	ldr	r3, [pc, #304]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab14:	8a5b      	ldrh	r3, [r3, #18]
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b4a      	ldr	r3, [pc, #296]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab1a:	8b5b      	ldrh	r3, [r3, #26]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f5 fd28 	bl	8000574 <__aeabi_i2d>
 800ab24:	a340      	add	r3, pc, #256	; (adr r3, 800ac28 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fd8d 	bl	8000648 <__aeabi_dmul>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4610      	mov	r0, r2
 800ab34:	4619      	mov	r1, r3
 800ab36:	a33e      	add	r3, pc, #248	; (adr r3, 800ac30 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 feae 	bl	800089c <__aeabi_ddiv>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4610      	mov	r0, r2
 800ab46:	4619      	mov	r1, r3
 800ab48:	a33b      	add	r3, pc, #236	; (adr r3, 800ac38 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fea5 	bl	800089c <__aeabi_ddiv>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f7f6 f86d 	bl	8000c38 <__aeabi_d2f>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4a38      	ldr	r2, [pc, #224]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab62:	6053      	str	r3, [r2, #4]
		current.Vbus = ADC_V_K*current.ADC_bus/VBUS_k;
 800ab64:	4b37      	ldr	r3, [pc, #220]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab66:	8adb      	ldrh	r3, [r3, #22]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7f5 fd03 	bl	8000574 <__aeabi_i2d>
 800ab6e:	a32e      	add	r3, pc, #184	; (adr r3, 800ac28 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 fd68 	bl	8000648 <__aeabi_dmul>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800ab86:	f7f5 fe89 	bl	800089c <__aeabi_ddiv>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4619      	mov	r1, r3
 800ab92:	f7f6 f851 	bl	8000c38 <__aeabi_d2f>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4a2a      	ldr	r2, [pc, #168]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ab9a:	60d3      	str	r3, [r2, #12]

	}
	if(hadc->Instance == ADC2)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a2a      	ldr	r2, [pc, #168]	; (800ac4c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d139      	bne.n	800ac1a <HAL_ADCEx_InjectedConvCpltCallback+0x1a2>
	{
		current.ADC_c = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800aba6:	2109      	movs	r1, #9
 800aba8:	4829      	ldr	r0, [pc, #164]	; (800ac50 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800abaa:	f7f9 f893 	bl	8003cd4 <HAL_ADCEx_InjectedGetValue>
 800abae:	4603      	mov	r3, r0
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800abb4:	829a      	strh	r2, [r3, #20]
		current.Ic = ADC_V_K*(current.ADC_c-current.ADC_Ic_offset)/AM_GAIN/R_SENSE;
 800abb6:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800abb8:	8a9b      	ldrh	r3, [r3, #20]
 800abba:	461a      	mov	r2, r3
 800abbc:	4b21      	ldr	r3, [pc, #132]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800abbe:	8b9b      	ldrh	r3, [r3, #28]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f5 fcd6 	bl	8000574 <__aeabi_i2d>
 800abc8:	a317      	add	r3, pc, #92	; (adr r3, 800ac28 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fd3b 	bl	8000648 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4610      	mov	r0, r2
 800abd8:	4619      	mov	r1, r3
 800abda:	a315      	add	r3, pc, #84	; (adr r3, 800ac30 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 fe5c 	bl	800089c <__aeabi_ddiv>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4610      	mov	r0, r2
 800abea:	4619      	mov	r1, r3
 800abec:	a312      	add	r3, pc, #72	; (adr r3, 800ac38 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	f7f5 fe53 	bl	800089c <__aeabi_ddiv>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4610      	mov	r0, r2
 800abfc:	4619      	mov	r1, r3
 800abfe:	f7f6 f81b 	bl	8000c38 <__aeabi_d2f>
 800ac02:	4603      	mov	r3, r0
 800ac04:	4a0f      	ldr	r2, [pc, #60]	; (800ac44 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800ac06:	6093      	str	r3, [r2, #8]
		adc_encoder.adc_value = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800ac08:	f240 110f 	movw	r1, #271	; 0x10f
 800ac0c:	4810      	ldr	r0, [pc, #64]	; (800ac50 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800ac0e:	f7f9 f861 	bl	8003cd4 <HAL_ADCEx_InjectedGetValue>
 800ac12:	4603      	mov	r3, r0
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800ac18:	801a      	strh	r2, [r3, #0]
	}

}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	f3af 8000 	nop.w
 800ac28:	eb1c432d 	.word	0xeb1c432d
 800ac2c:	3f4a36e2 	.word	0x3f4a36e2
 800ac30:	47ae147b 	.word	0x47ae147b
 800ac34:	3ff87ae1 	.word	0x3ff87ae1
 800ac38:	51eb851f 	.word	0x51eb851f
 800ac3c:	3fd51eb8 	.word	0x3fd51eb8
 800ac40:	200001f4 	.word	0x200001f4
 800ac44:	200004cc 	.word	0x200004cc
 800ac48:	3fb00000 	.word	0x3fb00000
 800ac4c:	50000100 	.word	0x50000100
 800ac50:	20000260 	.word	0x20000260
 800ac54:	20000498 	.word	0x20000498

0800ac58 <GetCurrentOffset>:

void GetCurrentOffset(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 uint16_t i;
 uint16_t a_offset,b_offset,c_offset;
 uint32_t a_offset_sum,b_offset_sum,c_offset_sum;
 a_offset_sum = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	613b      	str	r3, [r7, #16]
 b_offset_sum = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
 c_offset_sum = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60bb      	str	r3, [r7, #8]
 for(i=0;i<1000;i++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	82fb      	strh	r3, [r7, #22]
 800ac6e:	e01a      	b.n	800aca6 <GetCurrentOffset+0x4e>
 {
	 a_offset = current.ADC_a;
 800ac70:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <GetCurrentOffset+0x90>)
 800ac72:	8a1b      	ldrh	r3, [r3, #16]
 800ac74:	80fb      	strh	r3, [r7, #6]
	 b_offset = current.ADC_b;
 800ac76:	4b1c      	ldr	r3, [pc, #112]	; (800ace8 <GetCurrentOffset+0x90>)
 800ac78:	8a5b      	ldrh	r3, [r3, #18]
 800ac7a:	80bb      	strh	r3, [r7, #4]
	 c_offset = current.ADC_c;
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	; (800ace8 <GetCurrentOffset+0x90>)
 800ac7e:	8a9b      	ldrh	r3, [r3, #20]
 800ac80:	807b      	strh	r3, [r7, #2]
	 a_offset_sum = a_offset_sum + a_offset;
 800ac82:	88fb      	ldrh	r3, [r7, #6]
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4413      	add	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
	 b_offset_sum = b_offset_sum + b_offset;
 800ac8a:	88bb      	ldrh	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
	 c_offset_sum = c_offset_sum + c_offset;
 800ac92:	887b      	ldrh	r3, [r7, #2]
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	4413      	add	r3, r2
 800ac98:	60bb      	str	r3, [r7, #8]
	 HAL_Delay(1);
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	f7f7 fb86 	bl	80023ac <HAL_Delay>
 for(i=0;i<1000;i++)
 800aca0:	8afb      	ldrh	r3, [r7, #22]
 800aca2:	3301      	adds	r3, #1
 800aca4:	82fb      	strh	r3, [r7, #22]
 800aca6:	8afb      	ldrh	r3, [r7, #22]
 800aca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acac:	d3e0      	bcc.n	800ac70 <GetCurrentOffset+0x18>
 }
 current.ADC_Ia_offset = a_offset_sum/1000;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	4a0e      	ldr	r2, [pc, #56]	; (800acec <GetCurrentOffset+0x94>)
 800acb2:	fba2 2303 	umull	r2, r3, r2, r3
 800acb6:	099b      	lsrs	r3, r3, #6
 800acb8:	b29a      	uxth	r2, r3
 800acba:	4b0b      	ldr	r3, [pc, #44]	; (800ace8 <GetCurrentOffset+0x90>)
 800acbc:	831a      	strh	r2, [r3, #24]
 current.ADC_Ib_offset = b_offset_sum/1000;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4a0a      	ldr	r2, [pc, #40]	; (800acec <GetCurrentOffset+0x94>)
 800acc2:	fba2 2303 	umull	r2, r3, r2, r3
 800acc6:	099b      	lsrs	r3, r3, #6
 800acc8:	b29a      	uxth	r2, r3
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <GetCurrentOffset+0x90>)
 800accc:	835a      	strh	r2, [r3, #26]
 current.ADC_Ic_offset = c_offset_sum/1000;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	4a06      	ldr	r2, [pc, #24]	; (800acec <GetCurrentOffset+0x94>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	099b      	lsrs	r3, r3, #6
 800acd8:	b29a      	uxth	r2, r3
 800acda:	4b03      	ldr	r3, [pc, #12]	; (800ace8 <GetCurrentOffset+0x90>)
 800acdc:	839a      	strh	r2, [r3, #28]
}
 800acde:	bf00      	nop
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200004cc 	.word	0x200004cc
 800acec:	10624dd3 	.word	0x10624dd3

0800acf0 <window_filter>:
 * @param window_Array
 * @param i
 * @param sliding_Window_Length
 */
float window_filter(float data, float *buf, uint8_t len)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	ed87 0a03 	vstr	s0, [r7, #12]
 800acfa:	60b8      	str	r0, [r7, #8]
 800acfc:	460b      	mov	r3, r1
 800acfe:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    float sum = 0;
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]

    for (i = 1; i < len; i++)
 800ad06:	2301      	movs	r3, #1
 800ad08:	75fb      	strb	r3, [r7, #23]
 800ad0a:	e00f      	b.n	800ad2c <window_filter+0x3c>
    {
        buf[i - 1] = buf[i];
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	441a      	add	r2, r3
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	440b      	add	r3, r1
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	601a      	str	r2, [r3, #0]
    for (i = 1; i < len; i++)
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	75fb      	strb	r3, [r7, #23]
 800ad2c:	7dfa      	ldrb	r2, [r7, #23]
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d3eb      	bcc.n	800ad0c <window_filter+0x1c>
    }
    buf[len - 1] = data;
 800ad34:	79fb      	ldrb	r3, [r7, #7]
 800ad36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	4413      	add	r3, r2
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	601a      	str	r2, [r3, #0]

    for (i = 0; i < len; i++)
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
 800ad4a:	e00e      	b.n	800ad6a <window_filter+0x7a>
    {
        sum += buf[i];
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	4413      	add	r3, r2
 800ad54:	edd3 7a00 	vldr	s15, [r3]
 800ad58:	ed97 7a04 	vldr	s14, [r7, #16]
 800ad5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad60:	edc7 7a04 	vstr	s15, [r7, #16]
    for (i = 0; i < len; i++)
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	3301      	adds	r3, #1
 800ad68:	75fb      	strb	r3, [r7, #23]
 800ad6a:	7dfa      	ldrb	r2, [r7, #23]
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d3ec      	bcc.n	800ad4c <window_filter+0x5c>
    }

    sum /= len;
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad7c:	edd7 6a04 	vldr	s13, [r7, #16]
 800ad80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad84:	edc7 7a04 	vstr	s15, [r7, #16]

    return sum;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	ee07 3a90 	vmov	s15, r3
}
 800ad8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <uart_debug_init>:
  HAL_UART_Receive(&huart2, &ch, 1, 0xffff);
  return ch;
}

void uart_debug_init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0

  HAL_UART_Transmit_IT(&huart2, (uint8_t *)StaMessages, sizeof(StaMessages));
 800ada0:	2204      	movs	r2, #4
 800ada2:	4905      	ldr	r1, [pc, #20]	; (800adb8 <uart_debug_init+0x1c>)
 800ada4:	4805      	ldr	r0, [pc, #20]	; (800adbc <uart_debug_init+0x20>)
 800ada6:	f7fd fbeb 	bl	8008580 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 800adaa:	2201      	movs	r2, #1
 800adac:	4904      	ldr	r1, [pc, #16]	; (800adc0 <uart_debug_init+0x24>)
 800adae:	4803      	ldr	r0, [pc, #12]	; (800adbc <uart_debug_init+0x20>)
 800adb0:	f7fd fc8e 	bl	80086d0 <HAL_UART_Receive_IT>
}
 800adb4:	bf00      	nop
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	2000000c 	.word	0x2000000c
 800adbc:	200003fc 	.word	0x200003fc
 800adc0:	200005b4 	.word	0x200005b4

0800adc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart2, (uint8_t *)RxBuffer, 1, 0xFFFF); // 发送接收到的数据
 800adcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800add0:	2201      	movs	r2, #1
 800add2:	4906      	ldr	r1, [pc, #24]	; (800adec <HAL_UART_RxCpltCallback+0x28>)
 800add4:	4806      	ldr	r0, [pc, #24]	; (800adf0 <HAL_UART_RxCpltCallback+0x2c>)
 800add6:	f7fd fb3d 	bl	8008454 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 800adda:	2201      	movs	r2, #1
 800addc:	4903      	ldr	r1, [pc, #12]	; (800adec <HAL_UART_RxCpltCallback+0x28>)
 800adde:	4804      	ldr	r0, [pc, #16]	; (800adf0 <HAL_UART_RxCpltCallback+0x2c>)
 800ade0:	f7fd fc76 	bl	80086d0 <HAL_UART_Receive_IT>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200005b4 	.word	0x200005b4
 800adf0:	200003fc 	.word	0x200003fc

0800adf4 <vofa_JustFloat_output>:
  	printf("simples:%f,%f,%f\n", s1, s2,s3);
}

// 本协议是纯十六进制浮点传输
void vofa_JustFloat_output(float s1, float s2, float s3, float s4)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	ed87 0a03 	vstr	s0, [r7, #12]
 800adfe:	edc7 0a02 	vstr	s1, [r7, #8]
 800ae02:	ed87 1a01 	vstr	s2, [r7, #4]
 800ae06:	edc7 1a00 	vstr	s3, [r7]
  float data[4];
  uint8_t tail[4] = {0x00, 0x00, 0x80, 0x7f};
 800ae0a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ae0e:	617b      	str	r3, [r7, #20]
  // 发送数据
  data[0] = s1;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	61bb      	str	r3, [r7, #24]
  data[1] = s2;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	61fb      	str	r3, [r7, #28]
  data[2] = s3;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	623b      	str	r3, [r7, #32]
  data[3] = s4;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(float) * 4, 100); // 发送数据
 800ae20:	f107 0118 	add.w	r1, r7, #24
 800ae24:	2364      	movs	r3, #100	; 0x64
 800ae26:	2210      	movs	r2, #16
 800ae28:	4806      	ldr	r0, [pc, #24]	; (800ae44 <vofa_JustFloat_output+0x50>)
 800ae2a:	f7fd fb13 	bl	8008454 <HAL_UART_Transmit>
  // 发送帧尾
  HAL_UART_Transmit(&huart2, tail, 4, 100);
 800ae2e:	f107 0114 	add.w	r1, r7, #20
 800ae32:	2364      	movs	r3, #100	; 0x64
 800ae34:	2204      	movs	r2, #4
 800ae36:	4803      	ldr	r0, [pc, #12]	; (800ae44 <vofa_JustFloat_output+0x50>)
 800ae38:	f7fd fb0c 	bl	8008454 <HAL_UART_Transmit>
}
 800ae3c:	bf00      	nop
 800ae3e:	3728      	adds	r7, #40	; 0x28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	200003fc 	.word	0x200003fc

0800ae48 <FOC_hardware_init>:
#include "debug.h"
#include "PWM_Encoder.h"
FOC_Def FOC;

void FOC_hardware_init(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
    PWM_ADC_init();
 800ae4c:	f000 fc1a 	bl	800b684 <PWM_ADC_init>
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <clarkeTransform>:
Clarke变换 输入三相电流，输出alpha，bate电流
Iα = Ia
Iβ = (Ia + 2Ib) / sqrt(3)
**********************************************************************************************************/
void clarkeTransform(ABC_Def *abc, AlphaBeta_Def *alphaBeta)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
    alphaBeta->alpha = abc->Ua;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	601a      	str	r2, [r3, #0]
    alphaBeta->beta = (abc->Ua + 2 * abc->Ub) * 0.57735027f;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	edd3 7a04 	vldr	s15, [r3, #16]
 800ae72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ae76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae7a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ae94 <clarkeTransform+0x40>
 800ae7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	3f13cd3a 	.word	0x3f13cd3a

0800ae98 <parkTransform>:
Park变换，输入电角度、Ialpha和Ibeta，经过Park变换得到Iq、Id
Id = Iα · cosθ + Iβ · sinθ
Iq = Iα · sinθ + Iβ · cosθ
**********************************************************************************************************/
void parkTransform(const AlphaBeta_Def *alphaBeta, float angle, DQ_Def *dq)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	ed87 0a02 	vstr	s0, [r7, #8]
 800aea4:	6079      	str	r1, [r7, #4]
    float sinAngle = sin(angle);
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f7f5 fb76 	bl	8000598 <__aeabi_f2d>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	ec43 2b10 	vmov	d0, r2, r3
 800aeb4:	f005 fc84 	bl	80107c0 <sin>
 800aeb8:	ec53 2b10 	vmov	r2, r3, d0
 800aebc:	4610      	mov	r0, r2
 800aebe:	4619      	mov	r1, r3
 800aec0:	f7f5 feba 	bl	8000c38 <__aeabi_d2f>
 800aec4:	4603      	mov	r3, r0
 800aec6:	617b      	str	r3, [r7, #20]
    float cosAngle = cos(angle);
 800aec8:	68b8      	ldr	r0, [r7, #8]
 800aeca:	f7f5 fb65 	bl	8000598 <__aeabi_f2d>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	ec43 2b10 	vmov	d0, r2, r3
 800aed6:	f005 fc1f 	bl	8010718 <cos>
 800aeda:	ec53 2b10 	vmov	r2, r3, d0
 800aede:	4610      	mov	r0, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	f7f5 fea9 	bl	8000c38 <__aeabi_d2f>
 800aee6:	4603      	mov	r3, r0
 800aee8:	613b      	str	r3, [r7, #16]

    dq->d = cosAngle * alphaBeta->alpha + sinAngle * alphaBeta->beta;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	ed93 7a00 	vldr	s14, [r3]
 800aef0:	edd7 7a04 	vldr	s15, [r7, #16]
 800aef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	edd3 6a01 	vldr	s13, [r3, #4]
 800aefe:	edd7 7a05 	vldr	s15, [r7, #20]
 800af02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	edc3 7a00 	vstr	s15, [r3]
    dq->q = -sinAngle * alphaBeta->alpha + cosAngle * alphaBeta->beta;
 800af10:	edd7 7a05 	vldr	s15, [r7, #20]
 800af14:	eeb1 7a67 	vneg.f32	s14, s15
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	edd3 7a00 	vldr	s15, [r3]
 800af1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	edd3 6a01 	vldr	s13, [r3, #4]
 800af28:	edd7 7a04 	vldr	s15, [r7, #16]
 800af2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800af3a:	bf00      	nop
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <inverseParkTransform>:
park逆变换，输入Uq、Ud得到Ualpha、Ubeta
Uα = Ud · cosθ - Uq · sinθ
Uβ = Ud · sinθ + Uq · cosθ
**********************************************************************************************************/
void inverseParkTransform(DQ_Def *dq, AlphaBeta_Def *alphaBeta, float angle)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	ed87 0a01 	vstr	s0, [r7, #4]
    float cosAngle = cos(angle);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7f5 fb21 	bl	8000598 <__aeabi_f2d>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	ec43 2b10 	vmov	d0, r2, r3
 800af5e:	f005 fbdb 	bl	8010718 <cos>
 800af62:	ec53 2b10 	vmov	r2, r3, d0
 800af66:	4610      	mov	r0, r2
 800af68:	4619      	mov	r1, r3
 800af6a:	f7f5 fe65 	bl	8000c38 <__aeabi_d2f>
 800af6e:	4603      	mov	r3, r0
 800af70:	617b      	str	r3, [r7, #20]
    float sinAngle = sin(angle);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7f5 fb10 	bl	8000598 <__aeabi_f2d>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	ec43 2b10 	vmov	d0, r2, r3
 800af80:	f005 fc1e 	bl	80107c0 <sin>
 800af84:	ec53 2b10 	vmov	r2, r3, d0
 800af88:	4610      	mov	r0, r2
 800af8a:	4619      	mov	r1, r3
 800af8c:	f7f5 fe54 	bl	8000c38 <__aeabi_d2f>
 800af90:	4603      	mov	r3, r0
 800af92:	613b      	str	r3, [r7, #16]

    alphaBeta->alpha = dq->d * cosAngle - dq->q * sinAngle;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	ed93 7a00 	vldr	s14, [r3]
 800af9a:	edd7 7a05 	vldr	s15, [r7, #20]
 800af9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	edd3 6a01 	vldr	s13, [r3, #4]
 800afa8:	edd7 7a04 	vldr	s15, [r7, #16]
 800afac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800afb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	edc3 7a00 	vstr	s15, [r3]
    alphaBeta->beta = dq->d * sinAngle + dq->q * cosAngle;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	ed93 7a00 	vldr	s14, [r3]
 800afc0:	edd7 7a04 	vldr	s15, [r7, #16]
 800afc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	edd3 6a01 	vldr	s13, [r3, #4]
 800afce:	edd7 7a05 	vldr	s15, [r7, #20]
 800afd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800afd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800afe0:	bf00      	nop
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <SVPWM>:
/**********************************************************************************************************
将坐标变换中的反Park变换得到的 Valpha 、Vbeta 转换六路PWM输出。

**********************************************************************************************************/
void SVPWM(AlphaBeta_Def *U_alphaBeta, SVPWM_Def *svpwm)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
    float sum;
    float k_svpwm;

    svpwm->Ts = 1.0f; // SVPWM的采样周期
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aff8:	625a      	str	r2, [r3, #36]	; 0x24

    svpwm->U_alpha = U_alphaBeta->alpha;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	601a      	str	r2, [r3, #0]
    svpwm->U_beta = U_alphaBeta->beta;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	605a      	str	r2, [r3, #4]

	  // step1 计算u1、u2和u3
    // 计算SVPWM算法中的三个控制电压u1、u2和u3
    svpwm->u1 = U_alphaBeta->beta;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	60da      	str	r2, [r3, #12]
    svpwm->u2 = -0.8660254f * U_alphaBeta->alpha - 0.5f * U_alphaBeta->beta; // sqrt(3)/2 ≈ 0.86603
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	edd3 7a00 	vldr	s15, [r3]
 800b018:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b298 <SVPWM+0x2b0>
 800b01c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	edd3 7a01 	vldr	s15, [r3, #4]
 800b026:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b02a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b02e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	edc3 7a04 	vstr	s15, [r3, #16]
    svpwm->u3 = 0.8660254f * U_alphaBeta->alpha - 0.5f * U_alphaBeta->beta;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	edd3 7a00 	vldr	s15, [r3]
 800b03e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800b29c <SVPWM+0x2b4>
 800b042:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	edd3 7a01 	vldr	s15, [r3, #4]
 800b04c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b054:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	edc3 7a05 	vstr	s15, [r3, #20]
	 // step2：扇区判断
    // 根据u1、u2和u3的正负情况确定所处的扇区
    svpwm->sector = (svpwm->u1 > 0.0f) + ((svpwm->u2 > 0.0f) << 1) + ((svpwm->u3 > 0.0f) << 2); // N=4*C+2*B+A
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	edd3 7a03 	vldr	s15, [r3, #12]
 800b064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	bfcc      	ite	gt
 800b06e:	2301      	movgt	r3, #1
 800b070:	2300      	movle	r3, #0
 800b072:	b2db      	uxtb	r3, r3
 800b074:	461a      	mov	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	edd3 7a04 	vldr	s15, [r3, #16]
 800b07c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b084:	dd01      	ble.n	800b08a <SVPWM+0xa2>
 800b086:	2302      	movs	r3, #2
 800b088:	e000      	b.n	800b08c <SVPWM+0xa4>
 800b08a:	2300      	movs	r3, #0
 800b08c:	4413      	add	r3, r2
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	edd2 7a05 	vldr	s15, [r2, #20]
 800b094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09c:	dd01      	ble.n	800b0a2 <SVPWM+0xba>
 800b09e:	2204      	movs	r2, #4
 800b0a0:	e000      	b.n	800b0a4 <SVPWM+0xbc>
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	441a      	add	r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	609a      	str	r2, [r3, #8]

    // step3:计算基本矢量电压作用时间（占空比）
    // 根据扇区的不同，计算对应的t_a、t_b和t_c的值，表示生成的三相电压的时间
    switch (svpwm->sector)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	f200 82b9 	bhi.w	800b628 <SVPWM+0x640>
 800b0b6:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <SVPWM+0xd4>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b1af 	.word	0x0800b1af
 800b0c0:	0800b37b 	.word	0x0800b37b
 800b0c4:	0800b2a1 	.word	0x0800b2a1
 800b0c8:	0800b53f 	.word	0x0800b53f
 800b0cc:	0800b0d5 	.word	0x0800b0d5
 800b0d0:	0800b465 	.word	0x0800b465
    {
    case 5:
        // 扇区5
        svpwm->t4 = svpwm->u3;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	695a      	ldr	r2, [r3, #20]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38
        svpwm->t6 = svpwm->u1;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	641a      	str	r2, [r3, #64]	; 0x40
        sum = svpwm->t4 + svpwm->t6;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b0f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f4:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b0fe:	ed97 7a03 	vldr	s14, [r7, #12]
 800b102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	dd1c      	ble.n	800b146 <SVPWM+0x15e>
        {
            k_svpwm = svpwm->Ts / sum; //
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b112:	ed97 7a03 	vldr	s14, [r7, #12]
 800b116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b11a:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t4 = k_svpwm * svpwm->t4;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b124:	edd7 7a02 	vldr	s15, [r7, #8]
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            svpwm->t6 = k_svpwm * svpwm->t6;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b138:	edd7 7a02 	vldr	s15, [r7, #8]
 800b13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t4 - svpwm->t6) / 2;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b152:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b15c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b160:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t4 + svpwm->t6 + svpwm->t7;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b17a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t6 + svpwm->t7;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t7;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	621a      	str	r2, [r3, #32]
        break;
 800b1ac:	e23d      	b.n	800b62a <SVPWM+0x642>
      case 1:
        // 扇区1
        svpwm->t2 = -svpwm->u3;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	edd3 7a05 	vldr	s15, [r3, #20]
 800b1b4:	eef1 7a67 	vneg.f32	s15, s15
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        svpwm->t6 = -svpwm->u2;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b1c4:	eef1 7a67 	vneg.f32	s15, s15
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        sum = svpwm->t2 + svpwm->t6;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b1da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1de:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b1e8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b1ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f4:	dd1c      	ble.n	800b230 <SVPWM+0x248>
        {
            k_svpwm = svpwm->Ts / sum; // 计算缩放系数
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b1fc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b204:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t2 = k_svpwm * svpwm->t2;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b20e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            svpwm->t6 = k_svpwm * svpwm->t6;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b222:	edd7 7a02 	vldr	s15, [r7, #8]
 800b226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t2 - svpwm->t6) / 2;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b23c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b24a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b24e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t6 + svpwm->t7;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b264:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t2 + svpwm->t6 + svpwm->t7;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t7;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	621a      	str	r2, [r3, #32]
        break;
 800b296:	e1c8      	b.n	800b62a <SVPWM+0x642>
 800b298:	bf5db3d7 	.word	0xbf5db3d7
 800b29c:	3f5db3d7 	.word	0x3f5db3d7
    case 3:
        // 扇区3
        svpwm->t2 = svpwm->u1;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	631a      	str	r2, [r3, #48]	; 0x30
        svpwm->t3 = svpwm->u2;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	635a      	str	r2, [r3, #52]	; 0x34
        sum = svpwm->t2 + svpwm->t3;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b2ca:	ed97 7a03 	vldr	s14, [r7, #12]
 800b2ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d6:	dd1c      	ble.n	800b312 <SVPWM+0x32a>
        {
            k_svpwm = svpwm->Ts / sum; //
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b2de:	ed97 7a03 	vldr	s14, [r7, #12]
 800b2e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e6:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t2 = k_svpwm * svpwm->t2;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b2f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            svpwm->t3 = k_svpwm * svpwm->t3;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b304:	edd7 7a02 	vldr	s15, [r7, #8]
 800b308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t2 - svpwm->t3) / 2;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b31e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b32c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t7;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	619a      	str	r2, [r3, #24]
        svpwm->tb = svpwm->t2 + svpwm->t3 + svpwm->t7;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b34e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t3 + svpwm->t7;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b36e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 800b378:	e157      	b.n	800b62a <SVPWM+0x642>

    case 2:
        // 扇区2
        svpwm->t1 = -svpwm->u1;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b380:	eef1 7a67 	vneg.f32	s15, s15
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        svpwm->t3 = -svpwm->u3;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	edd3 7a05 	vldr	s15, [r3, #20]
 800b390:	eef1 7a67 	vneg.f32	s15, s15
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        sum = svpwm->t1 + svpwm->t3;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3aa:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b3b4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b3b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c0:	dd1c      	ble.n	800b3fc <SVPWM+0x414>
        {
            k_svpwm = svpwm->Ts / sum; //
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b3c8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d0:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t1 = k_svpwm * svpwm->t1;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b3da:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            svpwm->t3 = k_svpwm * svpwm->t3;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b3ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t1 - svpwm->t3) / 2;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b412:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b416:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b41a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t7;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	619a      	str	r2, [r3, #24]
        svpwm->tb = svpwm->t3 + svpwm->t7;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	edc3 7a07 	vstr	s15, [r3, #28]
        svpwm->tc = svpwm->t1 + svpwm->t3 + svpwm->t7;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b44e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 800b462:	e0e2      	b.n	800b62a <SVPWM+0x642>

    case 6:
        // 扇区6
        svpwm->t1 = svpwm->u2;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	62da      	str	r2, [r3, #44]	; 0x2c
        svpwm->t5 = svpwm->u3;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	695a      	ldr	r2, [r3, #20]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	63da      	str	r2, [r3, #60]	; 0x3c
        sum = svpwm->t1 + svpwm->t5;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b480:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b484:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b48e:	ed97 7a03 	vldr	s14, [r7, #12]
 800b492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49a:	dd1c      	ble.n	800b4d6 <SVPWM+0x4ee>
        {
            k_svpwm = svpwm->Ts / sum; //
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b4a2:	ed97 7a03 	vldr	s14, [r7, #12]
 800b4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4aa:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t1 = k_svpwm * svpwm->t1;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b4b4:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            svpwm->t5 = k_svpwm * svpwm->t5;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b4c8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t1 - svpwm->t5) / 2;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b4e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b4ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b4f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t5 + svpwm->t7;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b50a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t7;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	61da      	str	r2, [r3, #28]
        svpwm->tc = svpwm->t1 + svpwm->t5 + svpwm->t7;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 800b53c:	e075      	b.n	800b62a <SVPWM+0x642>

    case 4:
        // 扇区4
        svpwm->t4 = -svpwm->u2;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	edd3 7a04 	vldr	s15, [r3, #16]
 800b544:	eef1 7a67 	vneg.f32	s15, s15
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        svpwm->t5 = -svpwm->u1;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	edd3 7a03 	vldr	s15, [r3, #12]
 800b554:	eef1 7a67 	vneg.f32	s15, s15
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        sum = svpwm->t4 + svpwm->t5;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b56a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b56e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (sum > svpwm->Ts)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b578:	ed97 7a03 	vldr	s14, [r7, #12]
 800b57c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	dd1c      	ble.n	800b5c0 <SVPWM+0x5d8>
        {
            k_svpwm = svpwm->Ts / sum; //
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800b58c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b594:	edc7 7a02 	vstr	s15, [r7, #8]
            svpwm->t4 = k_svpwm * svpwm->t4;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b59e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            svpwm->t5 = k_svpwm * svpwm->t5;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b5b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        }
        svpwm->t7 = (svpwm->Ts - svpwm->t4 - svpwm->t5) / 2;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b5cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b5d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b5de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        svpwm->ta = svpwm->t4 + svpwm->t5 + svpwm->t7;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b5f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b5fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	edc3 7a06 	vstr	s15, [r3, #24]
        svpwm->tb = svpwm->t7;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	61da      	str	r2, [r3, #28]
        svpwm->tc = svpwm->t5 + svpwm->t7;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	edc3 7a08 	vstr	s15, [r3, #32]
        break;
 800b626:	e000      	b.n	800b62a <SVPWM+0x642>


    default:
        break;
 800b628:	bf00      	nop
    }

		// step4：6路PWM输出
    set_PWM_value(PWM_PERIOD*svpwm->ta,PWM_PERIOD*svpwm->tb,PWM_PERIOD*svpwm->tc);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b630:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800b680 <SVPWM+0x698>
 800b634:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b63c:	ee17 3a90 	vmov	r3, s15
 800b640:	b298      	uxth	r0, r3
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	edd3 7a07 	vldr	s15, [r3, #28]
 800b648:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800b680 <SVPWM+0x698>
 800b64c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b654:	ee17 3a90 	vmov	r3, s15
 800b658:	b299      	uxth	r1, r3
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	edd3 7a08 	vldr	s15, [r3, #32]
 800b660:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800b680 <SVPWM+0x698>
 800b664:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b66c:	ee17 3a90 	vmov	r3, s15
 800b670:	b29b      	uxth	r3, r3
 800b672:	461a      	mov	r2, r3
 800b674:	f000 f84a 	bl	800b70c <set_PWM_value>
//    vofa_JustFloat_output(PWM_PERIOD * svpwm->ta,PWM_PERIOD * svpwm->tb,PWM_PERIOD * svpwm->tc,0.0f);
}
 800b678:	bf00      	nop
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	45311000 	.word	0x45311000

0800b684 <PWM_ADC_init>:
extern TIM_HandleTypeDef htim1;
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;

void PWM_ADC_init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 800b688:	481d      	ldr	r0, [pc, #116]	; (800b700 <PWM_ADC_init+0x7c>)
 800b68a:	f7fa fde1 	bl	8006250 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b68e:	2100      	movs	r1, #0
 800b690:	481b      	ldr	r0, [pc, #108]	; (800b700 <PWM_ADC_init+0x7c>)
 800b692:	f7fa ff0b 	bl	80064ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b696:	2104      	movs	r1, #4
 800b698:	4819      	ldr	r0, [pc, #100]	; (800b700 <PWM_ADC_init+0x7c>)
 800b69a:	f7fa ff07 	bl	80064ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800b69e:	2108      	movs	r1, #8
 800b6a0:	4817      	ldr	r0, [pc, #92]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6a2:	f7fa ff03 	bl	80064ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800b6a6:	210c      	movs	r1, #12
 800b6a8:	4815      	ldr	r0, [pc, #84]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6aa:	f7fa feff 	bl	80064ac <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4813      	ldr	r0, [pc, #76]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6b2:	f7fc fb53 	bl	8007d5c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	4811      	ldr	r0, [pc, #68]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6ba:	f7fc fb4f 	bl	8007d5c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800b6be:	2108      	movs	r1, #8
 800b6c0:	480f      	ldr	r0, [pc, #60]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6c2:	f7fc fb4b 	bl	8007d5c <HAL_TIMEx_PWMN_Start>

	HAL_ADCEx_InjectedStart(&hadc1);
 800b6c6:	480f      	ldr	r0, [pc, #60]	; (800b704 <PWM_ADC_init+0x80>)
 800b6c8:	f7f8 fa54 	bl	8003b74 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart(&hadc2);
 800b6cc:	480e      	ldr	r0, [pc, #56]	; (800b708 <PWM_ADC_init+0x84>)
 800b6ce:	f7f8 fa51 	bl	8003b74 <HAL_ADCEx_InjectedStart>
	__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_JEOC);
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <PWM_ADC_init+0x80>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <PWM_ADC_init+0x80>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0220 	orr.w	r2, r2, #32
 800b6e0:	605a      	str	r2, [r3, #4]
	__HAL_ADC_ENABLE_IT(&hadc2, ADC_IT_JEOC);
 800b6e2:	4b09      	ldr	r3, [pc, #36]	; (800b708 <PWM_ADC_init+0x84>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	4b07      	ldr	r3, [pc, #28]	; (800b708 <PWM_ADC_init+0x84>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f042 0220 	orr.w	r2, r2, #32
 800b6f0:	605a      	str	r2, [r3, #4]

	//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, PWM_PERIOD - 1); // TIM1通道4的PWM配置  关联ADC采样时间 // 在PWM波的正中间采样
 800b6f2:	4b03      	ldr	r3, [pc, #12]	; (800b700 <PWM_ADC_init+0x7c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f44f 6231 	mov.w	r2, #2832	; 0xb10
 800b6fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b6fc:	bf00      	nop
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20000318 	.word	0x20000318
 800b704:	200001f4 	.word	0x200001f4
 800b708:	20000260 	.word	0x20000260

0800b70c <set_PWM_value>:

void set_PWM_value(uint16_t pwm_u, uint16_t pwm_v, uint16_t pwm_w)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	80fb      	strh	r3, [r7, #6]
 800b716:	460b      	mov	r3, r1
 800b718:	80bb      	strh	r3, [r7, #4]
 800b71a:	4613      	mov	r3, r2
 800b71c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_u);
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <set_PWM_value+0x38>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	88fa      	ldrh	r2, [r7, #6]
 800b724:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_v);
 800b726:	4b07      	ldr	r3, [pc, #28]	; (800b744 <set_PWM_value+0x38>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	88ba      	ldrh	r2, [r7, #4]
 800b72c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_w);
 800b72e:	4b05      	ldr	r3, [pc, #20]	; (800b744 <set_PWM_value+0x38>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	887a      	ldrh	r2, [r7, #2]
 800b734:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20000318 	.word	0x20000318

0800b748 <motor_function_init>:
extern TIM_HandleTypeDef htim2;

MOTOR_CONTROL m_c;

void motor_function_init(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2); //打开定时器，1ms
 800b74c:	4803      	ldr	r0, [pc, #12]	; (800b75c <motor_function_init+0x14>)
 800b74e:	f7fa fde1 	bl	8006314 <HAL_TIM_Base_Start_IT>
	m_c.mode = SPEED_LOOP_MODE;
 800b752:	4b03      	ldr	r3, [pc, #12]	; (800b760 <motor_function_init+0x18>)
 800b754:	2203      	movs	r2, #3
 800b756:	701a      	strb	r2, [r3, #0]
}
 800b758:	bf00      	nop
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000364 	.word	0x20000364
 800b760:	200005f4 	.word	0x200005f4

0800b764 <motor_stop>:


void motor_stop(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
	set_PWM_value(0,0,0);
 800b768:	2200      	movs	r2, #0
 800b76a:	2100      	movs	r1, #0
 800b76c:	2000      	movs	r0, #0
 800b76e:	f7ff ffcd 	bl	800b70c <set_PWM_value>
}
 800b772:	bf00      	nop
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <Motor_Align>:

void Motor_Align(float ud) // 电机预定位，找电角度零点
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b09e      	sub	sp, #120	; 0x78
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	ed87 0a01 	vstr	s0, [r7, #4]
	float theta = 0;
 800b782:	f04f 0300 	mov.w	r3, #0
 800b786:	677b      	str	r3, [r7, #116]	; 0x74
	SVPWM_Def svpwm_out;
	float offset_1,offset_2,offset_3;
    float offset_sum;


	align_dq.d = ud;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	65fb      	str	r3, [r7, #92]	; 0x5c
	align_dq.q = 0.0f;
 800b78c:	f04f 0300 	mov.w	r3, #0
 800b790:	663b      	str	r3, [r7, #96]	; 0x60

    /*找三次零点，取平均值，这样做的目的是，保证正转跟反转一致，否则正转和反转会有差别*/
	//第一次定位到0，
	theta = 0;
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	677b      	str	r3, [r7, #116]	; 0x74
	inverseParkTransform(&align_dq, &align_ab, theta);
 800b798:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b79c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b7a0:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fbcb 	bl	800af42 <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 800b7ac:	f107 020c 	add.w	r2, r7, #12
 800b7b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fc16 	bl	800afe8 <SVPWM>
	HAL_Delay(500);
 800b7bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7c0:	f7f6 fdf4 	bl	80023ac <HAL_Delay>
	offset_1 = adc_encoder.adc_value/4096.0f * 2 * PI;
 800b7c4:	4b59      	ldr	r3, [pc, #356]	; (800b92c <Motor_Align+0x1b4>)
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	ee07 3a90 	vmov	s15, r3
 800b7cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 800b930 <Motor_Align+0x1b8>
 800b7d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b7dc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800b934 <Motor_Align+0x1bc>
 800b7e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7e4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	//定位到+90°
	theta = 0.5*PI;
 800b7e8:	4b53      	ldr	r3, [pc, #332]	; (800b938 <Motor_Align+0x1c0>)
 800b7ea:	677b      	str	r3, [r7, #116]	; 0x74
	inverseParkTransform(&align_dq, &align_ab, theta);
 800b7ec:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b7f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b7f4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff fba1 	bl	800af42 <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 800b800:	f107 020c 	add.w	r2, r7, #12
 800b804:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fbec 	bl	800afe8 <SVPWM>
	HAL_Delay(500);
 800b810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b814:	f7f6 fdca 	bl	80023ac <HAL_Delay>

	//第二次定位到0
	theta = 0;
 800b818:	f04f 0300 	mov.w	r3, #0
 800b81c:	677b      	str	r3, [r7, #116]	; 0x74
	inverseParkTransform(&align_dq, &align_ab, theta);
 800b81e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b822:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b826:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff fb88 	bl	800af42 <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 800b832:	f107 020c 	add.w	r2, r7, #12
 800b836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fbd3 	bl	800afe8 <SVPWM>
	HAL_Delay(500);
 800b842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b846:	f7f6 fdb1 	bl	80023ac <HAL_Delay>
	offset_2 = adc_encoder.adc_value/4096.0f * 2 * PI;
 800b84a:	4b38      	ldr	r3, [pc, #224]	; (800b92c <Motor_Align+0x1b4>)
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b856:	eddf 6a36 	vldr	s13, [pc, #216]	; 800b930 <Motor_Align+0x1b8>
 800b85a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b85e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b862:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b934 <Motor_Align+0x1bc>
 800b866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b86a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	//定位到-90°
	theta = -0.5*PI;
 800b86e:	4b33      	ldr	r3, [pc, #204]	; (800b93c <Motor_Align+0x1c4>)
 800b870:	677b      	str	r3, [r7, #116]	; 0x74
	inverseParkTransform(&align_dq, &align_ab, theta);
 800b872:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b876:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b87a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fb5e 	bl	800af42 <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 800b886:	f107 020c 	add.w	r2, r7, #12
 800b88a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fba9 	bl	800afe8 <SVPWM>
	HAL_Delay(500);
 800b896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b89a:	f7f6 fd87 	bl	80023ac <HAL_Delay>

	//第三次定位到0
	theta = 0;
 800b89e:	f04f 0300 	mov.w	r3, #0
 800b8a2:	677b      	str	r3, [r7, #116]	; 0x74
	inverseParkTransform(&align_dq, &align_ab, theta);
 800b8a4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b8a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b8ac:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fb45 	bl	800af42 <inverseParkTransform>
	SVPWM(&align_ab, &svpwm_out); // 电机停到电角度零点
 800b8b8:	f107 020c 	add.w	r2, r7, #12
 800b8bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fb90 	bl	800afe8 <SVPWM>
	HAL_Delay(500);
 800b8c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8cc:	f7f6 fd6e 	bl	80023ac <HAL_Delay>
	offset_3 = adc_encoder.adc_value/4096.0f * 2 * PI;
 800b8d0:	4b16      	ldr	r3, [pc, #88]	; (800b92c <Motor_Align+0x1b4>)
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	ee07 3a90 	vmov	s15, r3
 800b8d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8dc:	eddf 6a14 	vldr	s13, [pc, #80]	; 800b930 <Motor_Align+0x1b8>
 800b8e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b8e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800b934 <Motor_Align+0x1bc>
 800b8ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8f0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    //求平均
	offset_sum = offset_1 + offset_2 + offset_3;
 800b8f4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800b8f8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800b8fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b900:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800b904:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b908:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	adc_encoder.angle_rad_offset = offset_sum/3.0f; // 获取当前机械角度
 800b90c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800b910:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <Motor_Align+0x1b4>)
 800b91a:	edc3 7a04 	vstr	s15, [r3, #16]
//	inverseParkTransform(&align_dq, &align_ab, theta);
//	svpwm_out.ta = 0.0f;
//	svpwm_out.tb = 0.0f;
//	svpwm_out.tc = 0.0f;
//	SVPWM(&align_ab, &svpwm_out);
	motor_stop();
 800b91e:	f7ff ff21 	bl	800b764 <motor_stop>

}
 800b922:	bf00      	nop
 800b924:	3778      	adds	r7, #120	; 0x78
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000498 	.word	0x20000498
 800b930:	45800000 	.word	0x45800000
 800b934:	40490fdb 	.word	0x40490fdb
 800b938:	3fc90fdb 	.word	0x3fc90fdb
 800b93c:	bfc90fdb 	.word	0xbfc90fdb

0800b940 <motor_open_loop_control>:

void motor_open_loop_control(float ud,float uq) // 开环控制电机
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b09a      	sub	sp, #104	; 0x68
 800b944:	af00      	add	r7, sp, #0
 800b946:	ed87 0a01 	vstr	s0, [r7, #4]
 800b94a:	edc7 0a00 	vstr	s1, [r7]

	float theta = 0.0f;
 800b94e:	f04f 0300 	mov.w	r3, #0
 800b952:	667b      	str	r3, [r7, #100]	; 0x64
	DQ_Def open_loop_dq;
	AlphaBeta_Def open_loop_ab;
	SVPWM_Def svpwm_out;

	open_loop_dq.d = ud;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	65fb      	str	r3, [r7, #92]	; 0x5c
	open_loop_dq.q = uq;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	663b      	str	r3, [r7, #96]	; 0x60

	if((ud==0.0f)&&(uq==0.0f))
 800b95c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b960:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	d109      	bne.n	800b97e <motor_open_loop_control+0x3e>
 800b96a:	edd7 7a00 	vldr	s15, [r7]
 800b96e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b976:	d102      	bne.n	800b97e <motor_open_loop_control+0x3e>
	{
		motor_stop();
 800b978:	f7ff fef4 	bl	800b764 <motor_stop>
 800b97c:	e016      	b.n	800b9ac <motor_open_loop_control+0x6c>
		return;
	}
	get_ADC_encoder_data();
 800b97e:	f7fe ffab 	bl	800a8d8 <get_ADC_encoder_data>
	theta = adc_encoder.electronic_angle;
 800b982:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <motor_open_loop_control+0x74>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	667b      	str	r3, [r7, #100]	; 0x64
	inverseParkTransform(&open_loop_dq, &open_loop_ab, theta); // 电角度传入FOC SVPWM中
 800b988:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b98c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b990:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800b994:	4611      	mov	r1, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff fad3 	bl	800af42 <inverseParkTransform>
	SVPWM(&open_loop_ab, &svpwm_out);
 800b99c:	f107 020c 	add.w	r2, r7, #12
 800b9a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff fb1e 	bl	800afe8 <SVPWM>

}
 800b9ac:	3768      	adds	r7, #104	; 0x68
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000498 	.word	0x20000498

0800b9b8 <motor_current_loop_control>:
float pid_uq_set = 0;
float pid_out_ud,pid_out_uq;
float Iq_set = 0.2f;

void motor_current_loop_control(float I_set) // 电流环
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	ed87 0a01 	vstr	s0, [r7, #4]
//	float pid_out_ud,pid_out_uq;

	FOC.Phase_Curr.Ua = current.Ia ;
 800b9c2:	4b25      	ldr	r3, [pc, #148]	; (800ba58 <motor_current_loop_control+0xa0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a25      	ldr	r2, [pc, #148]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9c8:	6113      	str	r3, [r2, #16]
	FOC.Phase_Curr.Ub = current.Ib ;
 800b9ca:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <motor_current_loop_control+0xa0>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4a23      	ldr	r2, [pc, #140]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9d0:	6153      	str	r3, [r2, #20]
	FOC.Phase_Curr.Uc = current.Ic ;
 800b9d2:	4b21      	ldr	r3, [pc, #132]	; (800ba58 <motor_current_loop_control+0xa0>)
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	4a21      	ldr	r2, [pc, #132]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9d8:	6193      	str	r3, [r2, #24]

	//转换
	clarkeTransform(&FOC.Phase_Curr,&FOC.AlphaBeta);
 800b9da:	4921      	ldr	r1, [pc, #132]	; (800ba60 <motor_current_loop_control+0xa8>)
 800b9dc:	4821      	ldr	r0, [pc, #132]	; (800ba64 <motor_current_loop_control+0xac>)
 800b9de:	f7ff fa39 	bl	800ae54 <clarkeTransform>
	FOC.theta = adc_encoder.electronic_angle;//FOC电角度赋值
 800b9e2:	4b21      	ldr	r3, [pc, #132]	; (800ba68 <motor_current_loop_control+0xb0>)
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4a1d      	ldr	r2, [pc, #116]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9e8:	6013      	str	r3, [r2, #0]
	parkTransform(&FOC.AlphaBeta,FOC.theta,&FOC.DQ);
 800b9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9ec:	edd3 7a00 	vldr	s15, [r3]
 800b9f0:	491e      	ldr	r1, [pc, #120]	; (800ba6c <motor_current_loop_control+0xb4>)
 800b9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b9f6:	481a      	ldr	r0, [pc, #104]	; (800ba60 <motor_current_loop_control+0xa8>)
 800b9f8:	f7ff fa4e 	bl	800ae98 <parkTransform>

	pid_out_ud = PID_control(&curret_Id_pid,0.0,FOC.DQ.d);
 800b9fc:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <motor_current_loop_control+0xa4>)
 800b9fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ba02:	eef0 0a67 	vmov.f32	s1, s15
 800ba06:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800ba70 <motor_current_loop_control+0xb8>
 800ba0a:	481a      	ldr	r0, [pc, #104]	; (800ba74 <motor_current_loop_control+0xbc>)
 800ba0c:	f000 fa12 	bl	800be34 <PID_control>
 800ba10:	eef0 7a40 	vmov.f32	s15, s0
 800ba14:	4b18      	ldr	r3, [pc, #96]	; (800ba78 <motor_current_loop_control+0xc0>)
 800ba16:	edc3 7a00 	vstr	s15, [r3]
	pid_out_uq = PID_control(&curret_Iq_pid,I_set,FOC.DQ.q);
 800ba1a:	4b10      	ldr	r3, [pc, #64]	; (800ba5c <motor_current_loop_control+0xa4>)
 800ba1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ba20:	eef0 0a67 	vmov.f32	s1, s15
 800ba24:	ed97 0a01 	vldr	s0, [r7, #4]
 800ba28:	4814      	ldr	r0, [pc, #80]	; (800ba7c <motor_current_loop_control+0xc4>)
 800ba2a:	f000 fa03 	bl	800be34 <PID_control>
 800ba2e:	eef0 7a40 	vmov.f32	s15, s0
 800ba32:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <motor_current_loop_control+0xc8>)
 800ba34:	edc3 7a00 	vstr	s15, [r3]

	motor_open_loop_control(pid_out_ud,pid_out_uq);
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <motor_current_loop_control+0xc0>)
 800ba3a:	edd3 7a00 	vldr	s15, [r3]
 800ba3e:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <motor_current_loop_control+0xc8>)
 800ba40:	ed93 7a00 	vldr	s14, [r3]
 800ba44:	eef0 0a47 	vmov.f32	s1, s14
 800ba48:	eeb0 0a67 	vmov.f32	s0, s15
 800ba4c:	f7ff ff78 	bl	800b940 <motor_open_loop_control>


}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	200004cc 	.word	0x200004cc
 800ba5c:	200005c8 	.word	0x200005c8
 800ba60:	200005e4 	.word	0x200005e4
 800ba64:	200005cc 	.word	0x200005cc
 800ba68:	20000498 	.word	0x20000498
 800ba6c:	200005ec 	.word	0x200005ec
 800ba70:	00000000 	.word	0x00000000
 800ba74:	20000638 	.word	0x20000638
 800ba78:	20000628 	.word	0x20000628
 800ba7c:	20000668 	.word	0x20000668
 800ba80:	2000062c 	.word	0x2000062c

0800ba84 <motor_ramp>:
float motor_ramp(float t_value,float acc_time) //电机爬坡  爬坡时间s
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	ed87 0a01 	vstr	s0, [r7, #4]
 800ba8e:	edc7 0a00 	vstr	s1, [r7]
	static float actual_value = 0.0f;
	float ram_acc_value ;
	float delta;
	delta = acc_time/CONTROL_PERIOD;
 800ba92:	ed97 7a00 	vldr	s14, [r7]
 800ba96:	eddf 6a31 	vldr	s13, [pc, #196]	; 800bb5c <motor_ramp+0xd8>
 800ba9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba9e:	edc7 7a03 	vstr	s15, [r7, #12]
	ram_acc_value = fabs(t_value-actual_value)*delta;
 800baa2:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <motor_ramp+0xdc>)
 800baa4:	edd3 7a00 	vldr	s15, [r3]
 800baa8:	ed97 7a01 	vldr	s14, [r7, #4]
 800baac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bab0:	eef0 7ae7 	vabs.f32	s15, s15
 800bab4:	ed97 7a03 	vldr	s14, [r7, #12]
 800bab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babc:	edc7 7a02 	vstr	s15, [r7, #8]

	if((t_value>0.0f))
 800bac0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bacc:	dd17      	ble.n	800bafe <motor_ramp+0x7a>
	{
		actual_value += ram_acc_value;
 800bace:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <motor_ramp+0xdc>)
 800bad0:	ed93 7a00 	vldr	s14, [r3]
 800bad4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800badc:	4b20      	ldr	r3, [pc, #128]	; (800bb60 <motor_ramp+0xdc>)
 800bade:	edc3 7a00 	vstr	s15, [r3]
		if(actual_value>t_value)
 800bae2:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <motor_ramp+0xdc>)
 800bae4:	edd3 7a00 	vldr	s15, [r3]
 800bae8:	ed97 7a01 	vldr	s14, [r7, #4]
 800baec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf4:	d526      	bpl.n	800bb44 <motor_ramp+0xc0>
		{
		  actual_value = t_value;
 800baf6:	4a1a      	ldr	r2, [pc, #104]	; (800bb60 <motor_ramp+0xdc>)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	e022      	b.n	800bb44 <motor_ramp+0xc0>
		}
	}
	else if(t_value<0.0f)
 800bafe:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0a:	d517      	bpl.n	800bb3c <motor_ramp+0xb8>
	{
		actual_value -= ram_acc_value;
 800bb0c:	4b14      	ldr	r3, [pc, #80]	; (800bb60 <motor_ramp+0xdc>)
 800bb0e:	ed93 7a00 	vldr	s14, [r3]
 800bb12:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb1a:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <motor_ramp+0xdc>)
 800bb1c:	edc3 7a00 	vstr	s15, [r3]
		if(actual_value<t_value)
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <motor_ramp+0xdc>)
 800bb22:	edd3 7a00 	vldr	s15, [r3]
 800bb26:	ed97 7a01 	vldr	s14, [r7, #4]
 800bb2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb32:	dd07      	ble.n	800bb44 <motor_ramp+0xc0>
		{
		  actual_value = t_value;
 800bb34:	4a0a      	ldr	r2, [pc, #40]	; (800bb60 <motor_ramp+0xdc>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	e003      	b.n	800bb44 <motor_ramp+0xc0>

		}
	}
	else
	{
		actual_value = 0;
 800bb3c:	4b08      	ldr	r3, [pc, #32]	; (800bb60 <motor_ramp+0xdc>)
 800bb3e:	f04f 0200 	mov.w	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
	}
   return actual_value;
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <motor_ramp+0xdc>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	ee07 3a90 	vmov	s15, r3
}
 800bb4c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	44fa0000 	.word	0x44fa0000
 800bb60:	20000630 	.word	0x20000630

0800bb64 <motor_speed_loop_control>:

void motor_speed_loop_control(float speed_set) // 速度环控制
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	ed87 0a01 	vstr	s0, [r7, #4]
	float delta;
	float speed_pid_out,speed_temp;

	if(speed_set==0.0f)
 800bb6e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb72:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7a:	d102      	bne.n	800bb82 <motor_speed_loop_control+0x1e>
	{
		motor_stop();
 800bb7c:	f7ff fdf2 	bl	800b764 <motor_stop>
		return;
 800bb80:	e06c      	b.n	800bc5c <motor_speed_loop_control+0xf8>
	}
   //计算速度
	get_ADC_encoder_data();
 800bb82:	f7fe fea9 	bl	800a8d8 <get_ADC_encoder_data>
	m_c.current_angle = adc_encoder.angle;
 800bb86:	4b37      	ldr	r3, [pc, #220]	; (800bc64 <motor_speed_loop_control+0x100>)
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4a37      	ldr	r2, [pc, #220]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bb8c:	6193      	str	r3, [r2, #24]
	delta = m_c.current_angle - m_c.angle_old;  //两次采集的角度差值
 800bb8e:	4b36      	ldr	r3, [pc, #216]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bb90:	ed93 7a06 	vldr	s14, [r3, #24]
 800bb94:	4b34      	ldr	r3, [pc, #208]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bb96:	edd3 7a08 	vldr	s15, [r3, #32]
 800bb9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb9e:	edc7 7a03 	vstr	s15, [r7, #12]
	m_c.angle_err = delta;
 800bba2:	4a31      	ldr	r2, [pc, #196]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	61d3      	str	r3, [r2, #28]
	if(delta<-180.0f)  //处理0，360°角度突变点  正转
 800bba8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800bc6c <motor_speed_loop_control+0x108>
 800bbb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb8:	d508      	bpl.n	800bbcc <motor_speed_loop_control+0x68>
	{
		m_c.angle_err = delta + 360.0f;
 800bbba:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbbe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800bc70 <motor_speed_loop_control+0x10c>
 800bbc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc6:	4b28      	ldr	r3, [pc, #160]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bbc8:	edc3 7a07 	vstr	s15, [r3, #28]
	}
	if(delta>180.0f)  //处理0，360°角度突变点  反转
 800bbcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbd0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bc74 <motor_speed_loop_control+0x110>
 800bbd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbdc:	dd08      	ble.n	800bbf0 <motor_speed_loop_control+0x8c>
	{
		m_c.angle_err = 360.0f - delta;
 800bbde:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800bc70 <motor_speed_loop_control+0x10c>
 800bbe2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbea:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bbec:	edc3 7a07 	vstr	s15, [r3, #28]

	}
	m_c.speed = m_c.angle_err*ANGLE_SPEED_RATIO;  //转换系数
 800bbf0:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bbf2:	edd3 7a07 	vldr	s15, [r3, #28]
 800bbf6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800bc78 <motor_speed_loop_control+0x114>
 800bbfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbfe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bc7c <motor_speed_loop_control+0x118>
 800bc02:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bc06:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800bc70 <motor_speed_loop_control+0x10c>
 800bc0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc10:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	m_c.angle_old = m_c.current_angle;
 800bc14:	4b14      	ldr	r3, [pc, #80]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	4a13      	ldr	r2, [pc, #76]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc1a:	6213      	str	r3, [r2, #32]
	//滤波
	m_c.speed_filter_win = window_filter(m_c.speed,window_speed,WIN_SIZE);
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bc22:	2132      	movs	r1, #50	; 0x32
 800bc24:	4816      	ldr	r0, [pc, #88]	; (800bc80 <motor_speed_loop_control+0x11c>)
 800bc26:	eeb0 0a67 	vmov.f32	s0, s15
 800bc2a:	f7ff f861 	bl	800acf0 <window_filter>
 800bc2e:	eef0 7a40 	vmov.f32	s15, s0
 800bc32:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc34:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	speed_pid_out = PID_control(&speed_loop_pid,speed_set,m_c.speed_filter_win);
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <motor_speed_loop_control+0x104>)
 800bc3a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bc3e:	eef0 0a67 	vmov.f32	s1, s15
 800bc42:	ed97 0a01 	vldr	s0, [r7, #4]
 800bc46:	480f      	ldr	r0, [pc, #60]	; (800bc84 <motor_speed_loop_control+0x120>)
 800bc48:	f000 f8f4 	bl	800be34 <PID_control>
 800bc4c:	ed87 0a02 	vstr	s0, [r7, #8]
//	speed_temp = motor_ramp(speed_pid_out,0.2f);
	motor_open_loop_control(0.0f,speed_pid_out);
 800bc50:	edd7 0a02 	vldr	s1, [r7, #8]
 800bc54:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bc88 <motor_speed_loop_control+0x124>
 800bc58:	f7ff fe72 	bl	800b940 <motor_open_loop_control>

}
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000498 	.word	0x20000498
 800bc68:	200005f4 	.word	0x200005f4
 800bc6c:	c3340000 	.word	0xc3340000
 800bc70:	43b40000 	.word	0x43b40000
 800bc74:	43340000 	.word	0x43340000
 800bc78:	44fa0000 	.word	0x44fa0000
 800bc7c:	42700000 	.word	0x42700000
 800bc80:	200004ec 	.word	0x200004ec
 800bc84:	20000698 	.word	0x20000698
 800bc88:	00000000 	.word	0x00000000

0800bc8c <motor_position_loop_control>:


void motor_position_loop_control(float position_set) // 位置环控制
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	ed87 0a01 	vstr	s0, [r7, #4]

}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	static uint16_t TimerCount = 0;
	TimerCount++;
 800bcac:	4b3c      	ldr	r3, [pc, #240]	; (800bda0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	4b3a      	ldr	r3, [pc, #232]	; (800bda0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800bcb6:	801a      	strh	r2, [r3, #0]

    if (htim == (&htim2))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a3a      	ldr	r2, [pc, #232]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d16b      	bne.n	800bd98 <HAL_TIM_PeriodElapsedCallback+0xf4>
    {
    	if(m_c.mode==OPEN_LOOP_MODE)
 800bcc0:	4b39      	ldr	r3, [pc, #228]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d11b      	bne.n	800bd00 <HAL_TIM_PeriodElapsedCallback+0x5c>
    	{
    		m_c.ramp_acc_value = motor_ramp(m_c.open_value,OPEN_ACC_TIME);  //爬坡，防止电机急停急起
 800bcc8:	4b37      	ldr	r3, [pc, #220]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bcca:	edd3 7a04 	vldr	s15, [r3, #16]
 800bcce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bcd2:	eeb0 0a67 	vmov.f32	s0, s15
 800bcd6:	f7ff fed5 	bl	800ba84 <motor_ramp>
 800bcda:	eef0 7a40 	vmov.f32	s15, s0
 800bcde:	4b32      	ldr	r3, [pc, #200]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bce0:	edc3 7a02 	vstr	s15, [r3, #8]
    		motor_open_loop_control(0.0f,m_c.ramp_acc_value);
 800bce4:	4b30      	ldr	r3, [pc, #192]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bce6:	edd3 7a02 	vldr	s15, [r3, #8]
 800bcea:	eef0 0a67 	vmov.f32	s1, s15
 800bcee:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800bdac <HAL_TIM_PeriodElapsedCallback+0x108>
 800bcf2:	f7ff fe25 	bl	800b940 <motor_open_loop_control>
    		motor_speed_loop_control(0.0f);
 800bcf6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800bdac <HAL_TIM_PeriodElapsedCallback+0x108>
 800bcfa:	f7ff ff33 	bl	800bb64 <motor_speed_loop_control>
 800bcfe:	e03e      	b.n	800bd7e <HAL_TIM_PeriodElapsedCallback+0xda>

    	}
    	else if(m_c.mode==CUREENT_LOOP_MODE)
 800bd00:	4b29      	ldr	r3, [pc, #164]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d115      	bne.n	800bd34 <HAL_TIM_PeriodElapsedCallback+0x90>
    	{
    		m_c.ramp_acc_value = motor_ramp(m_c.current_value,OPEN_ACC_TIME);  //爬坡，防止电机急停急起
 800bd08:	4b27      	ldr	r3, [pc, #156]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd0a:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd0e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bd12:	eeb0 0a67 	vmov.f32	s0, s15
 800bd16:	f7ff feb5 	bl	800ba84 <motor_ramp>
 800bd1a:	eef0 7a40 	vmov.f32	s15, s0
 800bd1e:	4b22      	ldr	r3, [pc, #136]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd20:	edc3 7a02 	vstr	s15, [r3, #8]
    		motor_current_loop_control(m_c.ramp_acc_value);
 800bd24:	4b20      	ldr	r3, [pc, #128]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd26:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd2a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd2e:	f7ff fe43 	bl	800b9b8 <motor_current_loop_control>
 800bd32:	e024      	b.n	800bd7e <HAL_TIM_PeriodElapsedCallback+0xda>
    	}
    	else if(m_c.mode==SPEED_LOOP_MODE)
 800bd34:	4b1c      	ldr	r3, [pc, #112]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d107      	bne.n	800bd4c <HAL_TIM_PeriodElapsedCallback+0xa8>
    	{
    		motor_speed_loop_control(m_c.speed_set);
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd3e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800bd42:	eeb0 0a67 	vmov.f32	s0, s15
 800bd46:	f7ff ff0d 	bl	800bb64 <motor_speed_loop_control>
 800bd4a:	e018      	b.n	800bd7e <HAL_TIM_PeriodElapsedCallback+0xda>
    	}
    	else if(m_c.mode==POSITION_LOOP_MODE)
 800bd4c:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b04      	cmp	r3, #4
 800bd52:	d114      	bne.n	800bd7e <HAL_TIM_PeriodElapsedCallback+0xda>
    	{
    		m_c.ramp_acc_value = motor_ramp(m_c.position_value,OPEN_ACC_TIME);  //爬坡，防止电机急停急起
 800bd54:	4b14      	ldr	r3, [pc, #80]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800bd5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd62:	f7ff fe8f 	bl	800ba84 <motor_ramp>
 800bd66:	eef0 7a40 	vmov.f32	s15, s0
 800bd6a:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd6c:	edc3 7a02 	vstr	s15, [r3, #8]
    		motor_position_loop_control(m_c.ramp_acc_value);
 800bd70:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800bd72:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd76:	eeb0 0a67 	vmov.f32	s0, s15
 800bd7a:	f7ff ff87 	bl	800bc8c <motor_position_loop_control>
    	}
//    	motor_open_loop_control(0.0f,0.0f);   //0.5ms控制周期  2KHz
//    	motor_current_loop_control(Iq_set);

		if(TimerCount == 1000)
 800bd7e:	4b08      	ldr	r3, [pc, #32]	; (800bda0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd86:	d107      	bne.n	800bd98 <HAL_TIM_PeriodElapsedCallback+0xf4>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800bd88:	2120      	movs	r1, #32
 800bd8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd8e:	f7f9 f8ef 	bl	8004f70 <HAL_GPIO_TogglePin>
			TimerCount = 0;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	801a      	strh	r2, [r3, #0]
		}
    }

}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20000634 	.word	0x20000634
 800bda4:	20000364 	.word	0x20000364
 800bda8:	200005f4 	.word	0x200005f4
 800bdac:	00000000 	.word	0x00000000

0800bdb0 <PID_init>:
PID_Def curret_Id_pid;
PID_Def curret_Iq_pid;
PID_Def speed_loop_pid;

void PID_init(void)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
	curret_Id_pid.Kp = 0.5f;
 800bdb4:	4b17      	ldr	r3, [pc, #92]	; (800be14 <PID_init+0x64>)
 800bdb6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800bdba:	619a      	str	r2, [r3, #24]
	curret_Id_pid.Ki = 0.001f;
 800bdbc:	4b15      	ldr	r3, [pc, #84]	; (800be14 <PID_init+0x64>)
 800bdbe:	4a16      	ldr	r2, [pc, #88]	; (800be18 <PID_init+0x68>)
 800bdc0:	61da      	str	r2, [r3, #28]
	curret_Id_pid.Kd = 0;
 800bdc2:	4b14      	ldr	r3, [pc, #80]	; (800be14 <PID_init+0x64>)
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	621a      	str	r2, [r3, #32]
	curret_Id_pid.Integral_max = 6.93f;
 800bdca:	4b12      	ldr	r3, [pc, #72]	; (800be14 <PID_init+0x64>)
 800bdcc:	4a13      	ldr	r2, [pc, #76]	; (800be1c <PID_init+0x6c>)
 800bdce:	629a      	str	r2, [r3, #40]	; 0x28


	curret_Iq_pid.Kp = curret_Id_pid.Kp;
 800bdd0:	4b10      	ldr	r3, [pc, #64]	; (800be14 <PID_init+0x64>)
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	4a12      	ldr	r2, [pc, #72]	; (800be20 <PID_init+0x70>)
 800bdd6:	6193      	str	r3, [r2, #24]
	curret_Iq_pid.Ki = curret_Id_pid.Ki;
 800bdd8:	4b0e      	ldr	r3, [pc, #56]	; (800be14 <PID_init+0x64>)
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	4a10      	ldr	r2, [pc, #64]	; (800be20 <PID_init+0x70>)
 800bdde:	61d3      	str	r3, [r2, #28]
	curret_Iq_pid.Kd = curret_Id_pid.Kd;
 800bde0:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <PID_init+0x64>)
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	4a0e      	ldr	r2, [pc, #56]	; (800be20 <PID_init+0x70>)
 800bde6:	6213      	str	r3, [r2, #32]
	curret_Iq_pid.Integral_max = curret_Id_pid.Integral_max;
 800bde8:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <PID_init+0x64>)
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <PID_init+0x70>)
 800bdee:	6293      	str	r3, [r2, #40]	; 0x28

	speed_loop_pid.Kp = 0.00255f;
 800bdf0:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <PID_init+0x74>)
 800bdf2:	4a0d      	ldr	r2, [pc, #52]	; (800be28 <PID_init+0x78>)
 800bdf4:	619a      	str	r2, [r3, #24]
	speed_loop_pid.Ki = 0.00015f;
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <PID_init+0x74>)
 800bdf8:	4a0c      	ldr	r2, [pc, #48]	; (800be2c <PID_init+0x7c>)
 800bdfa:	61da      	str	r2, [r3, #28]
	speed_loop_pid.Kd = 0;
 800bdfc:	4b09      	ldr	r3, [pc, #36]	; (800be24 <PID_init+0x74>)
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	621a      	str	r2, [r3, #32]
	speed_loop_pid.Integral_max = 100.0f;
 800be04:	4b07      	ldr	r3, [pc, #28]	; (800be24 <PID_init+0x74>)
 800be06:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <PID_init+0x80>)
 800be08:	629a      	str	r2, [r3, #40]	; 0x28

}
 800be0a:	bf00      	nop
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	20000638 	.word	0x20000638
 800be18:	3a83126f 	.word	0x3a83126f
 800be1c:	40ddc28f 	.word	0x40ddc28f
 800be20:	20000668 	.word	0x20000668
 800be24:	20000698 	.word	0x20000698
 800be28:	3b271de7 	.word	0x3b271de7
 800be2c:	391d4952 	.word	0x391d4952
 800be30:	42c80000 	.word	0x42c80000

0800be34 <PID_control>:


float PID_control(PID_Def *PID,float set_Val,float Actual_Val)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	ed87 0a02 	vstr	s0, [r7, #8]
 800be40:	edc7 0a01 	vstr	s1, [r7, #4]

	PID->SetVal=set_Val;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	601a      	str	r2, [r3, #0]
	PID->ActualVal=Actual_Val;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	605a      	str	r2, [r3, #4]
	PID->err=set_Val-Actual_Val;
 800be50:	ed97 7a02 	vldr	s14, [r7, #8]
 800be54:	edd7 7a01 	vldr	s15, [r7, #4]
 800be58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Integral += PID->err;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	edd3 7a03 	vldr	s15, [r3, #12]
 800be6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	PID->Integral=LIMIT((PID->Integral),-PID->Integral_max,PID->Integral_max);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800be84:	eef1 7a67 	vneg.f32	s15, s15
 800be88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	d505      	bpl.n	800be9e <PID_control+0x6a>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800be98:	eef1 7a67 	vneg.f32	s15, s15
 800be9c:	e011      	b.n	800bec2 <PID_control+0x8e>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800beaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800beae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb2:	dd03      	ble.n	800bebc <PID_control+0x88>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800beba:	e002      	b.n	800bec2 <PID_control+0x8e>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	PID->out=PID->Kp*PID->err + PID->Ki*(PID->Integral) + PID->Kd*(PID->err-PID->err_next);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	ed93 7a06 	vldr	s14, [r3, #24]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	edd3 7a03 	vldr	s15, [r3, #12]
 800bed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	edd3 6a07 	vldr	s13, [r3, #28]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	edd3 6a08 	vldr	s13, [r3, #32]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	ed93 6a03 	vldr	s12, [r3, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	edd3 7a04 	vldr	s15, [r3, #16]
 800befe:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bf02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	edc3 7a02 	vstr	s15, [r3, #8]
	PID->err_next=PID->err;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	68da      	ldr	r2, [r3, #12]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	611a      	str	r2, [r3, #16]
    return PID->out;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	ee07 3a90 	vmov	s15, r3
}
 800bf20:	eeb0 0a67 	vmov.f32	s0, s15
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <__cvt>:
 800bf2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf32:	ec55 4b10 	vmov	r4, r5, d0
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	460e      	mov	r6, r1
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	bfbb      	ittet	lt
 800bf40:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf44:	461d      	movlt	r5, r3
 800bf46:	2300      	movge	r3, #0
 800bf48:	232d      	movlt	r3, #45	; 0x2d
 800bf4a:	700b      	strb	r3, [r1, #0]
 800bf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf52:	4691      	mov	r9, r2
 800bf54:	f023 0820 	bic.w	r8, r3, #32
 800bf58:	bfbc      	itt	lt
 800bf5a:	4622      	movlt	r2, r4
 800bf5c:	4614      	movlt	r4, r2
 800bf5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf62:	d005      	beq.n	800bf70 <__cvt+0x42>
 800bf64:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf68:	d100      	bne.n	800bf6c <__cvt+0x3e>
 800bf6a:	3601      	adds	r6, #1
 800bf6c:	2102      	movs	r1, #2
 800bf6e:	e000      	b.n	800bf72 <__cvt+0x44>
 800bf70:	2103      	movs	r1, #3
 800bf72:	ab03      	add	r3, sp, #12
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	ab02      	add	r3, sp, #8
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	ec45 4b10 	vmov	d0, r4, r5
 800bf7e:	4653      	mov	r3, sl
 800bf80:	4632      	mov	r2, r6
 800bf82:	f001 f86d 	bl	800d060 <_dtoa_r>
 800bf86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf8a:	4607      	mov	r7, r0
 800bf8c:	d102      	bne.n	800bf94 <__cvt+0x66>
 800bf8e:	f019 0f01 	tst.w	r9, #1
 800bf92:	d022      	beq.n	800bfda <__cvt+0xac>
 800bf94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf98:	eb07 0906 	add.w	r9, r7, r6
 800bf9c:	d110      	bne.n	800bfc0 <__cvt+0x92>
 800bf9e:	783b      	ldrb	r3, [r7, #0]
 800bfa0:	2b30      	cmp	r3, #48	; 0x30
 800bfa2:	d10a      	bne.n	800bfba <__cvt+0x8c>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f7f4 fdb4 	bl	8000b18 <__aeabi_dcmpeq>
 800bfb0:	b918      	cbnz	r0, 800bfba <__cvt+0x8c>
 800bfb2:	f1c6 0601 	rsb	r6, r6, #1
 800bfb6:	f8ca 6000 	str.w	r6, [sl]
 800bfba:	f8da 3000 	ldr.w	r3, [sl]
 800bfbe:	4499      	add	r9, r3
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fda6 	bl	8000b18 <__aeabi_dcmpeq>
 800bfcc:	b108      	cbz	r0, 800bfd2 <__cvt+0xa4>
 800bfce:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfd2:	2230      	movs	r2, #48	; 0x30
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	454b      	cmp	r3, r9
 800bfd8:	d307      	bcc.n	800bfea <__cvt+0xbc>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfde:	1bdb      	subs	r3, r3, r7
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	b004      	add	sp, #16
 800bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfea:	1c59      	adds	r1, r3, #1
 800bfec:	9103      	str	r1, [sp, #12]
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	e7f0      	b.n	800bfd4 <__cvt+0xa6>

0800bff2 <__exponent>:
 800bff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bff4:	4603      	mov	r3, r0
 800bff6:	2900      	cmp	r1, #0
 800bff8:	bfb8      	it	lt
 800bffa:	4249      	neglt	r1, r1
 800bffc:	f803 2b02 	strb.w	r2, [r3], #2
 800c000:	bfb4      	ite	lt
 800c002:	222d      	movlt	r2, #45	; 0x2d
 800c004:	222b      	movge	r2, #43	; 0x2b
 800c006:	2909      	cmp	r1, #9
 800c008:	7042      	strb	r2, [r0, #1]
 800c00a:	dd2a      	ble.n	800c062 <__exponent+0x70>
 800c00c:	f10d 0207 	add.w	r2, sp, #7
 800c010:	4617      	mov	r7, r2
 800c012:	260a      	movs	r6, #10
 800c014:	4694      	mov	ip, r2
 800c016:	fb91 f5f6 	sdiv	r5, r1, r6
 800c01a:	fb06 1415 	mls	r4, r6, r5, r1
 800c01e:	3430      	adds	r4, #48	; 0x30
 800c020:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c024:	460c      	mov	r4, r1
 800c026:	2c63      	cmp	r4, #99	; 0x63
 800c028:	f102 32ff 	add.w	r2, r2, #4294967295
 800c02c:	4629      	mov	r1, r5
 800c02e:	dcf1      	bgt.n	800c014 <__exponent+0x22>
 800c030:	3130      	adds	r1, #48	; 0x30
 800c032:	f1ac 0402 	sub.w	r4, ip, #2
 800c036:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c03a:	1c41      	adds	r1, r0, #1
 800c03c:	4622      	mov	r2, r4
 800c03e:	42ba      	cmp	r2, r7
 800c040:	d30a      	bcc.n	800c058 <__exponent+0x66>
 800c042:	f10d 0209 	add.w	r2, sp, #9
 800c046:	eba2 020c 	sub.w	r2, r2, ip
 800c04a:	42bc      	cmp	r4, r7
 800c04c:	bf88      	it	hi
 800c04e:	2200      	movhi	r2, #0
 800c050:	4413      	add	r3, r2
 800c052:	1a18      	subs	r0, r3, r0
 800c054:	b003      	add	sp, #12
 800c056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c058:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c05c:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c060:	e7ed      	b.n	800c03e <__exponent+0x4c>
 800c062:	2330      	movs	r3, #48	; 0x30
 800c064:	3130      	adds	r1, #48	; 0x30
 800c066:	7083      	strb	r3, [r0, #2]
 800c068:	70c1      	strb	r1, [r0, #3]
 800c06a:	1d03      	adds	r3, r0, #4
 800c06c:	e7f1      	b.n	800c052 <__exponent+0x60>
	...

0800c070 <_printf_float>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	ed2d 8b02 	vpush	{d8}
 800c078:	b08d      	sub	sp, #52	; 0x34
 800c07a:	460c      	mov	r4, r1
 800c07c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c080:	4616      	mov	r6, r2
 800c082:	461f      	mov	r7, r3
 800c084:	4605      	mov	r5, r0
 800c086:	f000 fee5 	bl	800ce54 <_localeconv_r>
 800c08a:	f8d0 a000 	ldr.w	sl, [r0]
 800c08e:	4650      	mov	r0, sl
 800c090:	f7f4 f916 	bl	80002c0 <strlen>
 800c094:	2300      	movs	r3, #0
 800c096:	930a      	str	r3, [sp, #40]	; 0x28
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c0a4:	3307      	adds	r3, #7
 800c0a6:	f023 0307 	bic.w	r3, r3, #7
 800c0aa:	f103 0208 	add.w	r2, r3, #8
 800c0ae:	f8c8 2000 	str.w	r2, [r8]
 800c0b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0ba:	9307      	str	r3, [sp, #28]
 800c0bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0c0:	ee08 0a10 	vmov	s16, r0
 800c0c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0cc:	4b9e      	ldr	r3, [pc, #632]	; (800c348 <_printf_float+0x2d8>)
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	f7f4 fd53 	bl	8000b7c <__aeabi_dcmpun>
 800c0d6:	bb88      	cbnz	r0, 800c13c <_printf_float+0xcc>
 800c0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0dc:	4b9a      	ldr	r3, [pc, #616]	; (800c348 <_printf_float+0x2d8>)
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	f7f4 fd2d 	bl	8000b40 <__aeabi_dcmple>
 800c0e6:	bb48      	cbnz	r0, 800c13c <_printf_float+0xcc>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f4 fd1c 	bl	8000b2c <__aeabi_dcmplt>
 800c0f4:	b110      	cbz	r0, 800c0fc <_printf_float+0x8c>
 800c0f6:	232d      	movs	r3, #45	; 0x2d
 800c0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0fc:	4a93      	ldr	r2, [pc, #588]	; (800c34c <_printf_float+0x2dc>)
 800c0fe:	4b94      	ldr	r3, [pc, #592]	; (800c350 <_printf_float+0x2e0>)
 800c100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c104:	bf94      	ite	ls
 800c106:	4690      	movls	r8, r2
 800c108:	4698      	movhi	r8, r3
 800c10a:	2303      	movs	r3, #3
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	9b05      	ldr	r3, [sp, #20]
 800c110:	f023 0304 	bic.w	r3, r3, #4
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	f04f 0900 	mov.w	r9, #0
 800c11a:	9700      	str	r7, [sp, #0]
 800c11c:	4633      	mov	r3, r6
 800c11e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c120:	4621      	mov	r1, r4
 800c122:	4628      	mov	r0, r5
 800c124:	f000 f9da 	bl	800c4dc <_printf_common>
 800c128:	3001      	adds	r0, #1
 800c12a:	f040 8090 	bne.w	800c24e <_printf_float+0x1de>
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	b00d      	add	sp, #52	; 0x34
 800c134:	ecbd 8b02 	vpop	{d8}
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	4640      	mov	r0, r8
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 fd1a 	bl	8000b7c <__aeabi_dcmpun>
 800c148:	b140      	cbz	r0, 800c15c <_printf_float+0xec>
 800c14a:	464b      	mov	r3, r9
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfbc      	itt	lt
 800c150:	232d      	movlt	r3, #45	; 0x2d
 800c152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c156:	4a7f      	ldr	r2, [pc, #508]	; (800c354 <_printf_float+0x2e4>)
 800c158:	4b7f      	ldr	r3, [pc, #508]	; (800c358 <_printf_float+0x2e8>)
 800c15a:	e7d1      	b.n	800c100 <_printf_float+0x90>
 800c15c:	6863      	ldr	r3, [r4, #4]
 800c15e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c162:	9206      	str	r2, [sp, #24]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	d13f      	bne.n	800c1e8 <_printf_float+0x178>
 800c168:	2306      	movs	r3, #6
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	6861      	ldr	r1, [r4, #4]
 800c170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c174:	2300      	movs	r3, #0
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	ab0a      	add	r3, sp, #40	; 0x28
 800c17a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c17e:	ab09      	add	r3, sp, #36	; 0x24
 800c180:	ec49 8b10 	vmov	d0, r8, r9
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	6022      	str	r2, [r4, #0]
 800c188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c18c:	4628      	mov	r0, r5
 800c18e:	f7ff fece 	bl	800bf2e <__cvt>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c196:	2b47      	cmp	r3, #71	; 0x47
 800c198:	4680      	mov	r8, r0
 800c19a:	d108      	bne.n	800c1ae <_printf_float+0x13e>
 800c19c:	1cc8      	adds	r0, r1, #3
 800c19e:	db02      	blt.n	800c1a6 <_printf_float+0x136>
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	dd41      	ble.n	800c22a <_printf_float+0x1ba>
 800c1a6:	f1ab 0302 	sub.w	r3, fp, #2
 800c1aa:	fa5f fb83 	uxtb.w	fp, r3
 800c1ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1b2:	d820      	bhi.n	800c1f6 <_printf_float+0x186>
 800c1b4:	3901      	subs	r1, #1
 800c1b6:	465a      	mov	r2, fp
 800c1b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1bc:	9109      	str	r1, [sp, #36]	; 0x24
 800c1be:	f7ff ff18 	bl	800bff2 <__exponent>
 800c1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1c4:	1813      	adds	r3, r2, r0
 800c1c6:	2a01      	cmp	r2, #1
 800c1c8:	4681      	mov	r9, r0
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	dc02      	bgt.n	800c1d4 <_printf_float+0x164>
 800c1ce:	6822      	ldr	r2, [r4, #0]
 800c1d0:	07d2      	lsls	r2, r2, #31
 800c1d2:	d501      	bpl.n	800c1d8 <_printf_float+0x168>
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d09c      	beq.n	800c11a <_printf_float+0xaa>
 800c1e0:	232d      	movs	r3, #45	; 0x2d
 800c1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e6:	e798      	b.n	800c11a <_printf_float+0xaa>
 800c1e8:	9a06      	ldr	r2, [sp, #24]
 800c1ea:	2a47      	cmp	r2, #71	; 0x47
 800c1ec:	d1be      	bne.n	800c16c <_printf_float+0xfc>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1bc      	bne.n	800c16c <_printf_float+0xfc>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e7b9      	b.n	800c16a <_printf_float+0xfa>
 800c1f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c1fa:	d118      	bne.n	800c22e <_printf_float+0x1be>
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	6863      	ldr	r3, [r4, #4]
 800c200:	dd0b      	ble.n	800c21a <_printf_float+0x1aa>
 800c202:	6121      	str	r1, [r4, #16]
 800c204:	b913      	cbnz	r3, 800c20c <_printf_float+0x19c>
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	07d0      	lsls	r0, r2, #31
 800c20a:	d502      	bpl.n	800c212 <_printf_float+0x1a2>
 800c20c:	3301      	adds	r3, #1
 800c20e:	440b      	add	r3, r1
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	65a1      	str	r1, [r4, #88]	; 0x58
 800c214:	f04f 0900 	mov.w	r9, #0
 800c218:	e7de      	b.n	800c1d8 <_printf_float+0x168>
 800c21a:	b913      	cbnz	r3, 800c222 <_printf_float+0x1b2>
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	07d2      	lsls	r2, r2, #31
 800c220:	d501      	bpl.n	800c226 <_printf_float+0x1b6>
 800c222:	3302      	adds	r3, #2
 800c224:	e7f4      	b.n	800c210 <_printf_float+0x1a0>
 800c226:	2301      	movs	r3, #1
 800c228:	e7f2      	b.n	800c210 <_printf_float+0x1a0>
 800c22a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c230:	4299      	cmp	r1, r3
 800c232:	db05      	blt.n	800c240 <_printf_float+0x1d0>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	6121      	str	r1, [r4, #16]
 800c238:	07d8      	lsls	r0, r3, #31
 800c23a:	d5ea      	bpl.n	800c212 <_printf_float+0x1a2>
 800c23c:	1c4b      	adds	r3, r1, #1
 800c23e:	e7e7      	b.n	800c210 <_printf_float+0x1a0>
 800c240:	2900      	cmp	r1, #0
 800c242:	bfd4      	ite	le
 800c244:	f1c1 0202 	rsble	r2, r1, #2
 800c248:	2201      	movgt	r2, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	e7e0      	b.n	800c210 <_printf_float+0x1a0>
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	055a      	lsls	r2, r3, #21
 800c252:	d407      	bmi.n	800c264 <_printf_float+0x1f4>
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	4642      	mov	r2, r8
 800c258:	4631      	mov	r1, r6
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b8      	blx	r7
 800c25e:	3001      	adds	r0, #1
 800c260:	d12c      	bne.n	800c2bc <_printf_float+0x24c>
 800c262:	e764      	b.n	800c12e <_printf_float+0xbe>
 800c264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c268:	f240 80e0 	bls.w	800c42c <_printf_float+0x3bc>
 800c26c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c270:	2200      	movs	r2, #0
 800c272:	2300      	movs	r3, #0
 800c274:	f7f4 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d034      	beq.n	800c2e6 <_printf_float+0x276>
 800c27c:	4a37      	ldr	r2, [pc, #220]	; (800c35c <_printf_float+0x2ec>)
 800c27e:	2301      	movs	r3, #1
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	f43f af51 	beq.w	800c12e <_printf_float+0xbe>
 800c28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c290:	429a      	cmp	r2, r3
 800c292:	db02      	blt.n	800c29a <_printf_float+0x22a>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	07d8      	lsls	r0, r3, #31
 800c298:	d510      	bpl.n	800c2bc <_printf_float+0x24c>
 800c29a:	ee18 3a10 	vmov	r3, s16
 800c29e:	4652      	mov	r2, sl
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af41 	beq.w	800c12e <_printf_float+0xbe>
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	f104 091a 	add.w	r9, r4, #26
 800c2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4543      	cmp	r3, r8
 800c2ba:	dc09      	bgt.n	800c2d0 <_printf_float+0x260>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	079b      	lsls	r3, r3, #30
 800c2c0:	f100 8107 	bmi.w	800c4d2 <_printf_float+0x462>
 800c2c4:	68e0      	ldr	r0, [r4, #12]
 800c2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c8:	4298      	cmp	r0, r3
 800c2ca:	bfb8      	it	lt
 800c2cc:	4618      	movlt	r0, r3
 800c2ce:	e730      	b.n	800c132 <_printf_float+0xc2>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	464a      	mov	r2, r9
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f af27 	beq.w	800c12e <_printf_float+0xbe>
 800c2e0:	f108 0801 	add.w	r8, r8, #1
 800c2e4:	e7e6      	b.n	800c2b4 <_printf_float+0x244>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc39      	bgt.n	800c360 <_printf_float+0x2f0>
 800c2ec:	4a1b      	ldr	r2, [pc, #108]	; (800c35c <_printf_float+0x2ec>)
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b8      	blx	r7
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	f43f af19 	beq.w	800c12e <_printf_float+0xbe>
 800c2fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c300:	4313      	orrs	r3, r2
 800c302:	d102      	bne.n	800c30a <_printf_float+0x29a>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	07d9      	lsls	r1, r3, #31
 800c308:	d5d8      	bpl.n	800c2bc <_printf_float+0x24c>
 800c30a:	ee18 3a10 	vmov	r3, s16
 800c30e:	4652      	mov	r2, sl
 800c310:	4631      	mov	r1, r6
 800c312:	4628      	mov	r0, r5
 800c314:	47b8      	blx	r7
 800c316:	3001      	adds	r0, #1
 800c318:	f43f af09 	beq.w	800c12e <_printf_float+0xbe>
 800c31c:	f04f 0900 	mov.w	r9, #0
 800c320:	f104 0a1a 	add.w	sl, r4, #26
 800c324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c326:	425b      	negs	r3, r3
 800c328:	454b      	cmp	r3, r9
 800c32a:	dc01      	bgt.n	800c330 <_printf_float+0x2c0>
 800c32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c32e:	e792      	b.n	800c256 <_printf_float+0x1e6>
 800c330:	2301      	movs	r3, #1
 800c332:	4652      	mov	r2, sl
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f aef7 	beq.w	800c12e <_printf_float+0xbe>
 800c340:	f109 0901 	add.w	r9, r9, #1
 800c344:	e7ee      	b.n	800c324 <_printf_float+0x2b4>
 800c346:	bf00      	nop
 800c348:	7fefffff 	.word	0x7fefffff
 800c34c:	08011ab0 	.word	0x08011ab0
 800c350:	08011ab4 	.word	0x08011ab4
 800c354:	08011ab8 	.word	0x08011ab8
 800c358:	08011abc 	.word	0x08011abc
 800c35c:	08011ac0 	.word	0x08011ac0
 800c360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c364:	429a      	cmp	r2, r3
 800c366:	bfa8      	it	ge
 800c368:	461a      	movge	r2, r3
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	4691      	mov	r9, r2
 800c36e:	dc37      	bgt.n	800c3e0 <_printf_float+0x370>
 800c370:	f04f 0b00 	mov.w	fp, #0
 800c374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c378:	f104 021a 	add.w	r2, r4, #26
 800c37c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	eba3 0309 	sub.w	r3, r3, r9
 800c384:	455b      	cmp	r3, fp
 800c386:	dc33      	bgt.n	800c3f0 <_printf_float+0x380>
 800c388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c38c:	429a      	cmp	r2, r3
 800c38e:	db3b      	blt.n	800c408 <_printf_float+0x398>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	07da      	lsls	r2, r3, #31
 800c394:	d438      	bmi.n	800c408 <_printf_float+0x398>
 800c396:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c39a:	eba2 0903 	sub.w	r9, r2, r3
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	4591      	cmp	r9, r2
 800c3a4:	bfa8      	it	ge
 800c3a6:	4691      	movge	r9, r2
 800c3a8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ac:	dc35      	bgt.n	800c41a <_printf_float+0x3aa>
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b6:	f104 0a1a 	add.w	sl, r4, #26
 800c3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	eba3 0309 	sub.w	r3, r3, r9
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	f77f af79 	ble.w	800c2bc <_printf_float+0x24c>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b8      	blx	r7
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f43f aeaa 	beq.w	800c12e <_printf_float+0xbe>
 800c3da:	f108 0801 	add.w	r8, r8, #1
 800c3de:	e7ec      	b.n	800c3ba <_printf_float+0x34a>
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	4642      	mov	r2, r8
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b8      	blx	r7
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d1c0      	bne.n	800c370 <_printf_float+0x300>
 800c3ee:	e69e      	b.n	800c12e <_printf_float+0xbe>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	9205      	str	r2, [sp, #20]
 800c3f8:	47b8      	blx	r7
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f43f ae97 	beq.w	800c12e <_printf_float+0xbe>
 800c400:	9a05      	ldr	r2, [sp, #20]
 800c402:	f10b 0b01 	add.w	fp, fp, #1
 800c406:	e7b9      	b.n	800c37c <_printf_float+0x30c>
 800c408:	ee18 3a10 	vmov	r3, s16
 800c40c:	4652      	mov	r2, sl
 800c40e:	4631      	mov	r1, r6
 800c410:	4628      	mov	r0, r5
 800c412:	47b8      	blx	r7
 800c414:	3001      	adds	r0, #1
 800c416:	d1be      	bne.n	800c396 <_printf_float+0x326>
 800c418:	e689      	b.n	800c12e <_printf_float+0xbe>
 800c41a:	9a05      	ldr	r2, [sp, #20]
 800c41c:	464b      	mov	r3, r9
 800c41e:	4442      	add	r2, r8
 800c420:	4631      	mov	r1, r6
 800c422:	4628      	mov	r0, r5
 800c424:	47b8      	blx	r7
 800c426:	3001      	adds	r0, #1
 800c428:	d1c1      	bne.n	800c3ae <_printf_float+0x33e>
 800c42a:	e680      	b.n	800c12e <_printf_float+0xbe>
 800c42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c42e:	2a01      	cmp	r2, #1
 800c430:	dc01      	bgt.n	800c436 <_printf_float+0x3c6>
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d53a      	bpl.n	800c4ac <_printf_float+0x43c>
 800c436:	2301      	movs	r3, #1
 800c438:	4642      	mov	r2, r8
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	f43f ae74 	beq.w	800c12e <_printf_float+0xbe>
 800c446:	ee18 3a10 	vmov	r3, s16
 800c44a:	4652      	mov	r2, sl
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f ae6b 	beq.w	800c12e <_printf_float+0xbe>
 800c458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c464:	f7f4 fb58 	bl	8000b18 <__aeabi_dcmpeq>
 800c468:	b9d8      	cbnz	r0, 800c4a2 <_printf_float+0x432>
 800c46a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c46e:	f108 0201 	add.w	r2, r8, #1
 800c472:	4631      	mov	r1, r6
 800c474:	4628      	mov	r0, r5
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	d10e      	bne.n	800c49a <_printf_float+0x42a>
 800c47c:	e657      	b.n	800c12e <_printf_float+0xbe>
 800c47e:	2301      	movs	r3, #1
 800c480:	4652      	mov	r2, sl
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	f43f ae50 	beq.w	800c12e <_printf_float+0xbe>
 800c48e:	f108 0801 	add.w	r8, r8, #1
 800c492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c494:	3b01      	subs	r3, #1
 800c496:	4543      	cmp	r3, r8
 800c498:	dcf1      	bgt.n	800c47e <_printf_float+0x40e>
 800c49a:	464b      	mov	r3, r9
 800c49c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4a0:	e6da      	b.n	800c258 <_printf_float+0x1e8>
 800c4a2:	f04f 0800 	mov.w	r8, #0
 800c4a6:	f104 0a1a 	add.w	sl, r4, #26
 800c4aa:	e7f2      	b.n	800c492 <_printf_float+0x422>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	e7df      	b.n	800c472 <_printf_float+0x402>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	464a      	mov	r2, r9
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b8      	blx	r7
 800c4bc:	3001      	adds	r0, #1
 800c4be:	f43f ae36 	beq.w	800c12e <_printf_float+0xbe>
 800c4c2:	f108 0801 	add.w	r8, r8, #1
 800c4c6:	68e3      	ldr	r3, [r4, #12]
 800c4c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4ca:	1a5b      	subs	r3, r3, r1
 800c4cc:	4543      	cmp	r3, r8
 800c4ce:	dcf0      	bgt.n	800c4b2 <_printf_float+0x442>
 800c4d0:	e6f8      	b.n	800c2c4 <_printf_float+0x254>
 800c4d2:	f04f 0800 	mov.w	r8, #0
 800c4d6:	f104 0919 	add.w	r9, r4, #25
 800c4da:	e7f4      	b.n	800c4c6 <_printf_float+0x456>

0800c4dc <_printf_common>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	4616      	mov	r6, r2
 800c4e2:	4699      	mov	r9, r3
 800c4e4:	688a      	ldr	r2, [r1, #8]
 800c4e6:	690b      	ldr	r3, [r1, #16]
 800c4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	bfb8      	it	lt
 800c4f0:	4613      	movlt	r3, r2
 800c4f2:	6033      	str	r3, [r6, #0]
 800c4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b10a      	cbz	r2, 800c502 <_printf_common+0x26>
 800c4fe:	3301      	adds	r3, #1
 800c500:	6033      	str	r3, [r6, #0]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	0699      	lsls	r1, r3, #26
 800c506:	bf42      	ittt	mi
 800c508:	6833      	ldrmi	r3, [r6, #0]
 800c50a:	3302      	addmi	r3, #2
 800c50c:	6033      	strmi	r3, [r6, #0]
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	f015 0506 	ands.w	r5, r5, #6
 800c514:	d106      	bne.n	800c524 <_printf_common+0x48>
 800c516:	f104 0a19 	add.w	sl, r4, #25
 800c51a:	68e3      	ldr	r3, [r4, #12]
 800c51c:	6832      	ldr	r2, [r6, #0]
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	42ab      	cmp	r3, r5
 800c522:	dc26      	bgt.n	800c572 <_printf_common+0x96>
 800c524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c528:	1e13      	subs	r3, r2, #0
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	bf18      	it	ne
 800c52e:	2301      	movne	r3, #1
 800c530:	0692      	lsls	r2, r2, #26
 800c532:	d42b      	bmi.n	800c58c <_printf_common+0xb0>
 800c534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c538:	4649      	mov	r1, r9
 800c53a:	4638      	mov	r0, r7
 800c53c:	47c0      	blx	r8
 800c53e:	3001      	adds	r0, #1
 800c540:	d01e      	beq.n	800c580 <_printf_common+0xa4>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	f003 0306 	and.w	r3, r3, #6
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	bf02      	ittt	eq
 800c54e:	68e5      	ldreq	r5, [r4, #12]
 800c550:	6833      	ldreq	r3, [r6, #0]
 800c552:	1aed      	subeq	r5, r5, r3
 800c554:	68a3      	ldr	r3, [r4, #8]
 800c556:	bf0c      	ite	eq
 800c558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c55c:	2500      	movne	r5, #0
 800c55e:	4293      	cmp	r3, r2
 800c560:	bfc4      	itt	gt
 800c562:	1a9b      	subgt	r3, r3, r2
 800c564:	18ed      	addgt	r5, r5, r3
 800c566:	2600      	movs	r6, #0
 800c568:	341a      	adds	r4, #26
 800c56a:	42b5      	cmp	r5, r6
 800c56c:	d11a      	bne.n	800c5a4 <_printf_common+0xc8>
 800c56e:	2000      	movs	r0, #0
 800c570:	e008      	b.n	800c584 <_printf_common+0xa8>
 800c572:	2301      	movs	r3, #1
 800c574:	4652      	mov	r2, sl
 800c576:	4649      	mov	r1, r9
 800c578:	4638      	mov	r0, r7
 800c57a:	47c0      	blx	r8
 800c57c:	3001      	adds	r0, #1
 800c57e:	d103      	bne.n	800c588 <_printf_common+0xac>
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c588:	3501      	adds	r5, #1
 800c58a:	e7c6      	b.n	800c51a <_printf_common+0x3e>
 800c58c:	18e1      	adds	r1, r4, r3
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	2030      	movs	r0, #48	; 0x30
 800c592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c596:	4422      	add	r2, r4
 800c598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	e7c7      	b.n	800c534 <_printf_common+0x58>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	47c0      	blx	r8
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d0e6      	beq.n	800c580 <_printf_common+0xa4>
 800c5b2:	3601      	adds	r6, #1
 800c5b4:	e7d9      	b.n	800c56a <_printf_common+0x8e>
	...

0800c5b8 <_printf_i>:
 800c5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5bc:	7e0f      	ldrb	r7, [r1, #24]
 800c5be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5c0:	2f78      	cmp	r7, #120	; 0x78
 800c5c2:	4691      	mov	r9, r2
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5ce:	d807      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5d0:	2f62      	cmp	r7, #98	; 0x62
 800c5d2:	d80a      	bhi.n	800c5ea <_printf_i+0x32>
 800c5d4:	2f00      	cmp	r7, #0
 800c5d6:	f000 80d4 	beq.w	800c782 <_printf_i+0x1ca>
 800c5da:	2f58      	cmp	r7, #88	; 0x58
 800c5dc:	f000 80c0 	beq.w	800c760 <_printf_i+0x1a8>
 800c5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5e8:	e03a      	b.n	800c660 <_printf_i+0xa8>
 800c5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5ee:	2b15      	cmp	r3, #21
 800c5f0:	d8f6      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5f2:	a101      	add	r1, pc, #4	; (adr r1, 800c5f8 <_printf_i+0x40>)
 800c5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c665 	.word	0x0800c665
 800c600:	0800c5e1 	.word	0x0800c5e1
 800c604:	0800c5e1 	.word	0x0800c5e1
 800c608:	0800c5e1 	.word	0x0800c5e1
 800c60c:	0800c5e1 	.word	0x0800c5e1
 800c610:	0800c665 	.word	0x0800c665
 800c614:	0800c5e1 	.word	0x0800c5e1
 800c618:	0800c5e1 	.word	0x0800c5e1
 800c61c:	0800c5e1 	.word	0x0800c5e1
 800c620:	0800c5e1 	.word	0x0800c5e1
 800c624:	0800c769 	.word	0x0800c769
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c723 	.word	0x0800c723
 800c630:	0800c5e1 	.word	0x0800c5e1
 800c634:	0800c5e1 	.word	0x0800c5e1
 800c638:	0800c78b 	.word	0x0800c78b
 800c63c:	0800c5e1 	.word	0x0800c5e1
 800c640:	0800c691 	.word	0x0800c691
 800c644:	0800c5e1 	.word	0x0800c5e1
 800c648:	0800c5e1 	.word	0x0800c5e1
 800c64c:	0800c72b 	.word	0x0800c72b
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	602a      	str	r2, [r5, #0]
 800c658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c660:	2301      	movs	r3, #1
 800c662:	e09f      	b.n	800c7a4 <_printf_i+0x1ec>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	0607      	lsls	r7, r0, #24
 800c66a:	f103 0104 	add.w	r1, r3, #4
 800c66e:	6029      	str	r1, [r5, #0]
 800c670:	d501      	bpl.n	800c676 <_printf_i+0xbe>
 800c672:	681e      	ldr	r6, [r3, #0]
 800c674:	e003      	b.n	800c67e <_printf_i+0xc6>
 800c676:	0646      	lsls	r6, r0, #25
 800c678:	d5fb      	bpl.n	800c672 <_printf_i+0xba>
 800c67a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c67e:	2e00      	cmp	r6, #0
 800c680:	da03      	bge.n	800c68a <_printf_i+0xd2>
 800c682:	232d      	movs	r3, #45	; 0x2d
 800c684:	4276      	negs	r6, r6
 800c686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c68a:	485a      	ldr	r0, [pc, #360]	; (800c7f4 <_printf_i+0x23c>)
 800c68c:	230a      	movs	r3, #10
 800c68e:	e012      	b.n	800c6b6 <_printf_i+0xfe>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	6029      	str	r1, [r5, #0]
 800c698:	0605      	lsls	r5, r0, #24
 800c69a:	d501      	bpl.n	800c6a0 <_printf_i+0xe8>
 800c69c:	681e      	ldr	r6, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <_printf_i+0xee>
 800c6a0:	0641      	lsls	r1, r0, #25
 800c6a2:	d5fb      	bpl.n	800c69c <_printf_i+0xe4>
 800c6a4:	881e      	ldrh	r6, [r3, #0]
 800c6a6:	4853      	ldr	r0, [pc, #332]	; (800c7f4 <_printf_i+0x23c>)
 800c6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c6aa:	bf0c      	ite	eq
 800c6ac:	2308      	moveq	r3, #8
 800c6ae:	230a      	movne	r3, #10
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6b6:	6865      	ldr	r5, [r4, #4]
 800c6b8:	60a5      	str	r5, [r4, #8]
 800c6ba:	2d00      	cmp	r5, #0
 800c6bc:	bfa2      	ittt	ge
 800c6be:	6821      	ldrge	r1, [r4, #0]
 800c6c0:	f021 0104 	bicge.w	r1, r1, #4
 800c6c4:	6021      	strge	r1, [r4, #0]
 800c6c6:	b90e      	cbnz	r6, 800c6cc <_printf_i+0x114>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d04b      	beq.n	800c764 <_printf_i+0x1ac>
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6d6:	5dc7      	ldrb	r7, [r0, r7]
 800c6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6dc:	4637      	mov	r7, r6
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	460e      	mov	r6, r1
 800c6e2:	d9f4      	bls.n	800c6ce <_printf_i+0x116>
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d10b      	bne.n	800c700 <_printf_i+0x148>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	07de      	lsls	r6, r3, #31
 800c6ec:	d508      	bpl.n	800c700 <_printf_i+0x148>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	6861      	ldr	r1, [r4, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	bfde      	ittt	le
 800c6f6:	2330      	movle	r3, #48	; 0x30
 800c6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c700:	1b52      	subs	r2, r2, r5
 800c702:	6122      	str	r2, [r4, #16]
 800c704:	f8cd a000 	str.w	sl, [sp]
 800c708:	464b      	mov	r3, r9
 800c70a:	aa03      	add	r2, sp, #12
 800c70c:	4621      	mov	r1, r4
 800c70e:	4640      	mov	r0, r8
 800c710:	f7ff fee4 	bl	800c4dc <_printf_common>
 800c714:	3001      	adds	r0, #1
 800c716:	d14a      	bne.n	800c7ae <_printf_i+0x1f6>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b004      	add	sp, #16
 800c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f043 0320 	orr.w	r3, r3, #32
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	4833      	ldr	r0, [pc, #204]	; (800c7f8 <_printf_i+0x240>)
 800c72c:	2778      	movs	r7, #120	; 0x78
 800c72e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	061f      	lsls	r7, r3, #24
 800c738:	f851 6b04 	ldr.w	r6, [r1], #4
 800c73c:	d402      	bmi.n	800c744 <_printf_i+0x18c>
 800c73e:	065f      	lsls	r7, r3, #25
 800c740:	bf48      	it	mi
 800c742:	b2b6      	uxthmi	r6, r6
 800c744:	07df      	lsls	r7, r3, #31
 800c746:	bf48      	it	mi
 800c748:	f043 0320 	orrmi.w	r3, r3, #32
 800c74c:	6029      	str	r1, [r5, #0]
 800c74e:	bf48      	it	mi
 800c750:	6023      	strmi	r3, [r4, #0]
 800c752:	b91e      	cbnz	r6, 800c75c <_printf_i+0x1a4>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	f023 0320 	bic.w	r3, r3, #32
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	2310      	movs	r3, #16
 800c75e:	e7a7      	b.n	800c6b0 <_printf_i+0xf8>
 800c760:	4824      	ldr	r0, [pc, #144]	; (800c7f4 <_printf_i+0x23c>)
 800c762:	e7e4      	b.n	800c72e <_printf_i+0x176>
 800c764:	4615      	mov	r5, r2
 800c766:	e7bd      	b.n	800c6e4 <_printf_i+0x12c>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	6826      	ldr	r6, [r4, #0]
 800c76c:	6961      	ldr	r1, [r4, #20]
 800c76e:	1d18      	adds	r0, r3, #4
 800c770:	6028      	str	r0, [r5, #0]
 800c772:	0635      	lsls	r5, r6, #24
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	d501      	bpl.n	800c77c <_printf_i+0x1c4>
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	e002      	b.n	800c782 <_printf_i+0x1ca>
 800c77c:	0670      	lsls	r0, r6, #25
 800c77e:	d5fb      	bpl.n	800c778 <_printf_i+0x1c0>
 800c780:	8019      	strh	r1, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	4615      	mov	r5, r2
 800c788:	e7bc      	b.n	800c704 <_printf_i+0x14c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	602a      	str	r2, [r5, #0]
 800c790:	681d      	ldr	r5, [r3, #0]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	2100      	movs	r1, #0
 800c796:	4628      	mov	r0, r5
 800c798:	f7f3 fd42 	bl	8000220 <memchr>
 800c79c:	b108      	cbz	r0, 800c7a2 <_printf_i+0x1ea>
 800c79e:	1b40      	subs	r0, r0, r5
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ac:	e7aa      	b.n	800c704 <_printf_i+0x14c>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	47d0      	blx	sl
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d0ad      	beq.n	800c718 <_printf_i+0x160>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	079b      	lsls	r3, r3, #30
 800c7c0:	d413      	bmi.n	800c7ea <_printf_i+0x232>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e7a6      	b.n	800c71c <_printf_i+0x164>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d09d      	beq.n	800c718 <_printf_i+0x160>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	1a5b      	subs	r3, r3, r1
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dcf2      	bgt.n	800c7ce <_printf_i+0x216>
 800c7e8:	e7eb      	b.n	800c7c2 <_printf_i+0x20a>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f104 0619 	add.w	r6, r4, #25
 800c7f0:	e7f5      	b.n	800c7de <_printf_i+0x226>
 800c7f2:	bf00      	nop
 800c7f4:	08011ac2 	.word	0x08011ac2
 800c7f8:	08011ad3 	.word	0x08011ad3

0800c7fc <_scanf_float>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	b087      	sub	sp, #28
 800c802:	4617      	mov	r7, r2
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	688b      	ldr	r3, [r1, #8]
 800c808:	1e5a      	subs	r2, r3, #1
 800c80a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c80e:	bf83      	ittte	hi
 800c810:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c814:	195b      	addhi	r3, r3, r5
 800c816:	9302      	strhi	r3, [sp, #8]
 800c818:	2300      	movls	r3, #0
 800c81a:	bf86      	itte	hi
 800c81c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c820:	608b      	strhi	r3, [r1, #8]
 800c822:	9302      	strls	r3, [sp, #8]
 800c824:	680b      	ldr	r3, [r1, #0]
 800c826:	468b      	mov	fp, r1
 800c828:	2500      	movs	r5, #0
 800c82a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c82e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c832:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c836:	4680      	mov	r8, r0
 800c838:	460c      	mov	r4, r1
 800c83a:	465e      	mov	r6, fp
 800c83c:	46aa      	mov	sl, r5
 800c83e:	46a9      	mov	r9, r5
 800c840:	9501      	str	r5, [sp, #4]
 800c842:	68a2      	ldr	r2, [r4, #8]
 800c844:	b152      	cbz	r2, 800c85c <_scanf_float+0x60>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b4e      	cmp	r3, #78	; 0x4e
 800c84c:	d864      	bhi.n	800c918 <_scanf_float+0x11c>
 800c84e:	2b40      	cmp	r3, #64	; 0x40
 800c850:	d83c      	bhi.n	800c8cc <_scanf_float+0xd0>
 800c852:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c856:	b2c8      	uxtb	r0, r1
 800c858:	280e      	cmp	r0, #14
 800c85a:	d93a      	bls.n	800c8d2 <_scanf_float+0xd6>
 800c85c:	f1b9 0f00 	cmp.w	r9, #0
 800c860:	d003      	beq.n	800c86a <_scanf_float+0x6e>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c86e:	f1ba 0f01 	cmp.w	sl, #1
 800c872:	f200 8113 	bhi.w	800ca9c <_scanf_float+0x2a0>
 800c876:	455e      	cmp	r6, fp
 800c878:	f200 8105 	bhi.w	800ca86 <_scanf_float+0x28a>
 800c87c:	2501      	movs	r5, #1
 800c87e:	4628      	mov	r0, r5
 800c880:	b007      	add	sp, #28
 800c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c886:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c88a:	2a0d      	cmp	r2, #13
 800c88c:	d8e6      	bhi.n	800c85c <_scanf_float+0x60>
 800c88e:	a101      	add	r1, pc, #4	; (adr r1, 800c894 <_scanf_float+0x98>)
 800c890:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c894:	0800c9d3 	.word	0x0800c9d3
 800c898:	0800c85d 	.word	0x0800c85d
 800c89c:	0800c85d 	.word	0x0800c85d
 800c8a0:	0800c85d 	.word	0x0800c85d
 800c8a4:	0800ca33 	.word	0x0800ca33
 800c8a8:	0800ca0b 	.word	0x0800ca0b
 800c8ac:	0800c85d 	.word	0x0800c85d
 800c8b0:	0800c85d 	.word	0x0800c85d
 800c8b4:	0800c9e1 	.word	0x0800c9e1
 800c8b8:	0800c85d 	.word	0x0800c85d
 800c8bc:	0800c85d 	.word	0x0800c85d
 800c8c0:	0800c85d 	.word	0x0800c85d
 800c8c4:	0800c85d 	.word	0x0800c85d
 800c8c8:	0800c999 	.word	0x0800c999
 800c8cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c8d0:	e7db      	b.n	800c88a <_scanf_float+0x8e>
 800c8d2:	290e      	cmp	r1, #14
 800c8d4:	d8c2      	bhi.n	800c85c <_scanf_float+0x60>
 800c8d6:	a001      	add	r0, pc, #4	; (adr r0, 800c8dc <_scanf_float+0xe0>)
 800c8d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8dc:	0800c98b 	.word	0x0800c98b
 800c8e0:	0800c85d 	.word	0x0800c85d
 800c8e4:	0800c98b 	.word	0x0800c98b
 800c8e8:	0800ca1f 	.word	0x0800ca1f
 800c8ec:	0800c85d 	.word	0x0800c85d
 800c8f0:	0800c939 	.word	0x0800c939
 800c8f4:	0800c975 	.word	0x0800c975
 800c8f8:	0800c975 	.word	0x0800c975
 800c8fc:	0800c975 	.word	0x0800c975
 800c900:	0800c975 	.word	0x0800c975
 800c904:	0800c975 	.word	0x0800c975
 800c908:	0800c975 	.word	0x0800c975
 800c90c:	0800c975 	.word	0x0800c975
 800c910:	0800c975 	.word	0x0800c975
 800c914:	0800c975 	.word	0x0800c975
 800c918:	2b6e      	cmp	r3, #110	; 0x6e
 800c91a:	d809      	bhi.n	800c930 <_scanf_float+0x134>
 800c91c:	2b60      	cmp	r3, #96	; 0x60
 800c91e:	d8b2      	bhi.n	800c886 <_scanf_float+0x8a>
 800c920:	2b54      	cmp	r3, #84	; 0x54
 800c922:	d077      	beq.n	800ca14 <_scanf_float+0x218>
 800c924:	2b59      	cmp	r3, #89	; 0x59
 800c926:	d199      	bne.n	800c85c <_scanf_float+0x60>
 800c928:	2d07      	cmp	r5, #7
 800c92a:	d197      	bne.n	800c85c <_scanf_float+0x60>
 800c92c:	2508      	movs	r5, #8
 800c92e:	e029      	b.n	800c984 <_scanf_float+0x188>
 800c930:	2b74      	cmp	r3, #116	; 0x74
 800c932:	d06f      	beq.n	800ca14 <_scanf_float+0x218>
 800c934:	2b79      	cmp	r3, #121	; 0x79
 800c936:	e7f6      	b.n	800c926 <_scanf_float+0x12a>
 800c938:	6821      	ldr	r1, [r4, #0]
 800c93a:	05c8      	lsls	r0, r1, #23
 800c93c:	d51a      	bpl.n	800c974 <_scanf_float+0x178>
 800c93e:	9b02      	ldr	r3, [sp, #8]
 800c940:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c944:	6021      	str	r1, [r4, #0]
 800c946:	f109 0901 	add.w	r9, r9, #1
 800c94a:	b11b      	cbz	r3, 800c954 <_scanf_float+0x158>
 800c94c:	3b01      	subs	r3, #1
 800c94e:	3201      	adds	r2, #1
 800c950:	9302      	str	r3, [sp, #8]
 800c952:	60a2      	str	r2, [r4, #8]
 800c954:	68a3      	ldr	r3, [r4, #8]
 800c956:	3b01      	subs	r3, #1
 800c958:	60a3      	str	r3, [r4, #8]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	3301      	adds	r3, #1
 800c95e:	6123      	str	r3, [r4, #16]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3b01      	subs	r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	607b      	str	r3, [r7, #4]
 800c968:	f340 8084 	ble.w	800ca74 <_scanf_float+0x278>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	3301      	adds	r3, #1
 800c970:	603b      	str	r3, [r7, #0]
 800c972:	e766      	b.n	800c842 <_scanf_float+0x46>
 800c974:	eb1a 0f05 	cmn.w	sl, r5
 800c978:	f47f af70 	bne.w	800c85c <_scanf_float+0x60>
 800c97c:	6822      	ldr	r2, [r4, #0]
 800c97e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c982:	6022      	str	r2, [r4, #0]
 800c984:	f806 3b01 	strb.w	r3, [r6], #1
 800c988:	e7e4      	b.n	800c954 <_scanf_float+0x158>
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	0610      	lsls	r0, r2, #24
 800c98e:	f57f af65 	bpl.w	800c85c <_scanf_float+0x60>
 800c992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c996:	e7f4      	b.n	800c982 <_scanf_float+0x186>
 800c998:	f1ba 0f00 	cmp.w	sl, #0
 800c99c:	d10e      	bne.n	800c9bc <_scanf_float+0x1c0>
 800c99e:	f1b9 0f00 	cmp.w	r9, #0
 800c9a2:	d10e      	bne.n	800c9c2 <_scanf_float+0x1c6>
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c9aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c9ae:	d108      	bne.n	800c9c2 <_scanf_float+0x1c6>
 800c9b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9b4:	6022      	str	r2, [r4, #0]
 800c9b6:	f04f 0a01 	mov.w	sl, #1
 800c9ba:	e7e3      	b.n	800c984 <_scanf_float+0x188>
 800c9bc:	f1ba 0f02 	cmp.w	sl, #2
 800c9c0:	d055      	beq.n	800ca6e <_scanf_float+0x272>
 800c9c2:	2d01      	cmp	r5, #1
 800c9c4:	d002      	beq.n	800c9cc <_scanf_float+0x1d0>
 800c9c6:	2d04      	cmp	r5, #4
 800c9c8:	f47f af48 	bne.w	800c85c <_scanf_float+0x60>
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	b2ed      	uxtb	r5, r5
 800c9d0:	e7d8      	b.n	800c984 <_scanf_float+0x188>
 800c9d2:	f1ba 0f01 	cmp.w	sl, #1
 800c9d6:	f47f af41 	bne.w	800c85c <_scanf_float+0x60>
 800c9da:	f04f 0a02 	mov.w	sl, #2
 800c9de:	e7d1      	b.n	800c984 <_scanf_float+0x188>
 800c9e0:	b97d      	cbnz	r5, 800ca02 <_scanf_float+0x206>
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	f47f af3c 	bne.w	800c862 <_scanf_float+0x66>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c9f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c9f4:	f47f af39 	bne.w	800c86a <_scanf_float+0x6e>
 800c9f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	2501      	movs	r5, #1
 800ca00:	e7c0      	b.n	800c984 <_scanf_float+0x188>
 800ca02:	2d03      	cmp	r5, #3
 800ca04:	d0e2      	beq.n	800c9cc <_scanf_float+0x1d0>
 800ca06:	2d05      	cmp	r5, #5
 800ca08:	e7de      	b.n	800c9c8 <_scanf_float+0x1cc>
 800ca0a:	2d02      	cmp	r5, #2
 800ca0c:	f47f af26 	bne.w	800c85c <_scanf_float+0x60>
 800ca10:	2503      	movs	r5, #3
 800ca12:	e7b7      	b.n	800c984 <_scanf_float+0x188>
 800ca14:	2d06      	cmp	r5, #6
 800ca16:	f47f af21 	bne.w	800c85c <_scanf_float+0x60>
 800ca1a:	2507      	movs	r5, #7
 800ca1c:	e7b2      	b.n	800c984 <_scanf_float+0x188>
 800ca1e:	6822      	ldr	r2, [r4, #0]
 800ca20:	0591      	lsls	r1, r2, #22
 800ca22:	f57f af1b 	bpl.w	800c85c <_scanf_float+0x60>
 800ca26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca30:	e7a8      	b.n	800c984 <_scanf_float+0x188>
 800ca32:	6822      	ldr	r2, [r4, #0]
 800ca34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ca38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ca3c:	d006      	beq.n	800ca4c <_scanf_float+0x250>
 800ca3e:	0550      	lsls	r0, r2, #21
 800ca40:	f57f af0c 	bpl.w	800c85c <_scanf_float+0x60>
 800ca44:	f1b9 0f00 	cmp.w	r9, #0
 800ca48:	f43f af0f 	beq.w	800c86a <_scanf_float+0x6e>
 800ca4c:	0591      	lsls	r1, r2, #22
 800ca4e:	bf58      	it	pl
 800ca50:	9901      	ldrpl	r1, [sp, #4]
 800ca52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca56:	bf58      	it	pl
 800ca58:	eba9 0101 	subpl.w	r1, r9, r1
 800ca5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ca60:	bf58      	it	pl
 800ca62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	f04f 0900 	mov.w	r9, #0
 800ca6c:	e78a      	b.n	800c984 <_scanf_float+0x188>
 800ca6e:	f04f 0a03 	mov.w	sl, #3
 800ca72:	e787      	b.n	800c984 <_scanf_float+0x188>
 800ca74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4798      	blx	r3
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f aedf 	beq.w	800c842 <_scanf_float+0x46>
 800ca84:	e6ea      	b.n	800c85c <_scanf_float+0x60>
 800ca86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4640      	mov	r0, r8
 800ca92:	4798      	blx	r3
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	e6ec      	b.n	800c876 <_scanf_float+0x7a>
 800ca9c:	1e6b      	subs	r3, r5, #1
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	d825      	bhi.n	800caee <_scanf_float+0x2f2>
 800caa2:	2d02      	cmp	r5, #2
 800caa4:	d836      	bhi.n	800cb14 <_scanf_float+0x318>
 800caa6:	455e      	cmp	r6, fp
 800caa8:	f67f aee8 	bls.w	800c87c <_scanf_float+0x80>
 800caac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cab4:	463a      	mov	r2, r7
 800cab6:	4640      	mov	r0, r8
 800cab8:	4798      	blx	r3
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	e7f1      	b.n	800caa6 <_scanf_float+0x2aa>
 800cac2:	9802      	ldr	r0, [sp, #8]
 800cac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cac8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cacc:	9002      	str	r0, [sp, #8]
 800cace:	463a      	mov	r2, r7
 800cad0:	4640      	mov	r0, r8
 800cad2:	4798      	blx	r3
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	6123      	str	r3, [r4, #16]
 800cada:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cade:	fa5f fa8a 	uxtb.w	sl, sl
 800cae2:	f1ba 0f02 	cmp.w	sl, #2
 800cae6:	d1ec      	bne.n	800cac2 <_scanf_float+0x2c6>
 800cae8:	3d03      	subs	r5, #3
 800caea:	b2ed      	uxtb	r5, r5
 800caec:	1b76      	subs	r6, r6, r5
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	05da      	lsls	r2, r3, #23
 800caf2:	d52f      	bpl.n	800cb54 <_scanf_float+0x358>
 800caf4:	055b      	lsls	r3, r3, #21
 800caf6:	d510      	bpl.n	800cb1a <_scanf_float+0x31e>
 800caf8:	455e      	cmp	r6, fp
 800cafa:	f67f aebf 	bls.w	800c87c <_scanf_float+0x80>
 800cafe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb06:	463a      	mov	r2, r7
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4798      	blx	r3
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	e7f1      	b.n	800caf8 <_scanf_float+0x2fc>
 800cb14:	46aa      	mov	sl, r5
 800cb16:	9602      	str	r6, [sp, #8]
 800cb18:	e7df      	b.n	800cada <_scanf_float+0x2de>
 800cb1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	2965      	cmp	r1, #101	; 0x65
 800cb22:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb26:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb2a:	6123      	str	r3, [r4, #16]
 800cb2c:	d00c      	beq.n	800cb48 <_scanf_float+0x34c>
 800cb2e:	2945      	cmp	r1, #69	; 0x45
 800cb30:	d00a      	beq.n	800cb48 <_scanf_float+0x34c>
 800cb32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb36:	463a      	mov	r2, r7
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4798      	blx	r3
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb42:	3b01      	subs	r3, #1
 800cb44:	1eb5      	subs	r5, r6, #2
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4798      	blx	r3
 800cb52:	462e      	mov	r6, r5
 800cb54:	6825      	ldr	r5, [r4, #0]
 800cb56:	f015 0510 	ands.w	r5, r5, #16
 800cb5a:	d158      	bne.n	800cc0e <_scanf_float+0x412>
 800cb5c:	7035      	strb	r5, [r6, #0]
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb68:	d11c      	bne.n	800cba4 <_scanf_float+0x3a8>
 800cb6a:	9b01      	ldr	r3, [sp, #4]
 800cb6c:	454b      	cmp	r3, r9
 800cb6e:	eba3 0209 	sub.w	r2, r3, r9
 800cb72:	d124      	bne.n	800cbbe <_scanf_float+0x3c2>
 800cb74:	2200      	movs	r2, #0
 800cb76:	4659      	mov	r1, fp
 800cb78:	4640      	mov	r0, r8
 800cb7a:	f002 fc1d 	bl	800f3b8 <_strtod_r>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	6821      	ldr	r1, [r4, #0]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f011 0f02 	tst.w	r1, #2
 800cb88:	ec57 6b10 	vmov	r6, r7, d0
 800cb8c:	f103 0204 	add.w	r2, r3, #4
 800cb90:	d020      	beq.n	800cbd4 <_scanf_float+0x3d8>
 800cb92:	9903      	ldr	r1, [sp, #12]
 800cb94:	600a      	str	r2, [r1, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	e9c3 6700 	strd	r6, r7, [r3]
 800cb9c:	68e3      	ldr	r3, [r4, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60e3      	str	r3, [r4, #12]
 800cba2:	e66c      	b.n	800c87e <_scanf_float+0x82>
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0e4      	beq.n	800cb74 <_scanf_float+0x378>
 800cbaa:	9905      	ldr	r1, [sp, #20]
 800cbac:	230a      	movs	r3, #10
 800cbae:	462a      	mov	r2, r5
 800cbb0:	3101      	adds	r1, #1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	f002 fc88 	bl	800f4c8 <_strtol_r>
 800cbb8:	9b04      	ldr	r3, [sp, #16]
 800cbba:	9e05      	ldr	r6, [sp, #20]
 800cbbc:	1ac2      	subs	r2, r0, r3
 800cbbe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cbc2:	429e      	cmp	r6, r3
 800cbc4:	bf28      	it	cs
 800cbc6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cbca:	4912      	ldr	r1, [pc, #72]	; (800cc14 <_scanf_float+0x418>)
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f000 f8d5 	bl	800cd7c <siprintf>
 800cbd2:	e7cf      	b.n	800cb74 <_scanf_float+0x378>
 800cbd4:	f011 0f04 	tst.w	r1, #4
 800cbd8:	9903      	ldr	r1, [sp, #12]
 800cbda:	600a      	str	r2, [r1, #0]
 800cbdc:	d1db      	bne.n	800cb96 <_scanf_float+0x39a>
 800cbde:	f8d3 8000 	ldr.w	r8, [r3]
 800cbe2:	ee10 2a10 	vmov	r2, s0
 800cbe6:	ee10 0a10 	vmov	r0, s0
 800cbea:	463b      	mov	r3, r7
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 ffc5 	bl	8000b7c <__aeabi_dcmpun>
 800cbf2:	b128      	cbz	r0, 800cc00 <_scanf_float+0x404>
 800cbf4:	4808      	ldr	r0, [pc, #32]	; (800cc18 <_scanf_float+0x41c>)
 800cbf6:	f000 f9a3 	bl	800cf40 <nanf>
 800cbfa:	ed88 0a00 	vstr	s0, [r8]
 800cbfe:	e7cd      	b.n	800cb9c <_scanf_float+0x3a0>
 800cc00:	4630      	mov	r0, r6
 800cc02:	4639      	mov	r1, r7
 800cc04:	f7f4 f818 	bl	8000c38 <__aeabi_d2f>
 800cc08:	f8c8 0000 	str.w	r0, [r8]
 800cc0c:	e7c6      	b.n	800cb9c <_scanf_float+0x3a0>
 800cc0e:	2500      	movs	r5, #0
 800cc10:	e635      	b.n	800c87e <_scanf_float+0x82>
 800cc12:	bf00      	nop
 800cc14:	08011ae4 	.word	0x08011ae4
 800cc18:	08011e75 	.word	0x08011e75

0800cc1c <std>:
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	b510      	push	{r4, lr}
 800cc20:	4604      	mov	r4, r0
 800cc22:	e9c0 3300 	strd	r3, r3, [r0]
 800cc26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc2a:	6083      	str	r3, [r0, #8]
 800cc2c:	8181      	strh	r1, [r0, #12]
 800cc2e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc30:	81c2      	strh	r2, [r0, #14]
 800cc32:	6183      	str	r3, [r0, #24]
 800cc34:	4619      	mov	r1, r3
 800cc36:	2208      	movs	r2, #8
 800cc38:	305c      	adds	r0, #92	; 0x5c
 800cc3a:	f000 f902 	bl	800ce42 <memset>
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x38>)
 800cc40:	6263      	str	r3, [r4, #36]	; 0x24
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x3c>)
 800cc44:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <std+0x40>)
 800cc48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc4a:	4b05      	ldr	r3, [pc, #20]	; (800cc60 <std+0x44>)
 800cc4c:	6224      	str	r4, [r4, #32]
 800cc4e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	bf00      	nop
 800cc54:	0800cdbd 	.word	0x0800cdbd
 800cc58:	0800cddf 	.word	0x0800cddf
 800cc5c:	0800ce17 	.word	0x0800ce17
 800cc60:	0800ce3b 	.word	0x0800ce3b

0800cc64 <stdio_exit_handler>:
 800cc64:	4a02      	ldr	r2, [pc, #8]	; (800cc70 <stdio_exit_handler+0xc>)
 800cc66:	4903      	ldr	r1, [pc, #12]	; (800cc74 <stdio_exit_handler+0x10>)
 800cc68:	4803      	ldr	r0, [pc, #12]	; (800cc78 <stdio_exit_handler+0x14>)
 800cc6a:	f000 b869 	b.w	800cd40 <_fwalk_sglue>
 800cc6e:	bf00      	nop
 800cc70:	20000010 	.word	0x20000010
 800cc74:	0800fb11 	.word	0x0800fb11
 800cc78:	2000001c 	.word	0x2000001c

0800cc7c <cleanup_stdio>:
 800cc7c:	6841      	ldr	r1, [r0, #4]
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <cleanup_stdio+0x34>)
 800cc80:	4299      	cmp	r1, r3
 800cc82:	b510      	push	{r4, lr}
 800cc84:	4604      	mov	r4, r0
 800cc86:	d001      	beq.n	800cc8c <cleanup_stdio+0x10>
 800cc88:	f002 ff42 	bl	800fb10 <_fflush_r>
 800cc8c:	68a1      	ldr	r1, [r4, #8]
 800cc8e:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <cleanup_stdio+0x38>)
 800cc90:	4299      	cmp	r1, r3
 800cc92:	d002      	beq.n	800cc9a <cleanup_stdio+0x1e>
 800cc94:	4620      	mov	r0, r4
 800cc96:	f002 ff3b 	bl	800fb10 <_fflush_r>
 800cc9a:	68e1      	ldr	r1, [r4, #12]
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <cleanup_stdio+0x3c>)
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	d004      	beq.n	800ccac <cleanup_stdio+0x30>
 800cca2:	4620      	mov	r0, r4
 800cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca8:	f002 bf32 	b.w	800fb10 <_fflush_r>
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	bf00      	nop
 800ccb0:	200006c8 	.word	0x200006c8
 800ccb4:	20000730 	.word	0x20000730
 800ccb8:	20000798 	.word	0x20000798

0800ccbc <global_stdio_init.part.0>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <global_stdio_init.part.0+0x30>)
 800ccc0:	4c0b      	ldr	r4, [pc, #44]	; (800ccf0 <global_stdio_init.part.0+0x34>)
 800ccc2:	4a0c      	ldr	r2, [pc, #48]	; (800ccf4 <global_stdio_init.part.0+0x38>)
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2104      	movs	r1, #4
 800cccc:	f7ff ffa6 	bl	800cc1c <std>
 800ccd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	2109      	movs	r1, #9
 800ccd8:	f7ff ffa0 	bl	800cc1c <std>
 800ccdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cce0:	2202      	movs	r2, #2
 800cce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce6:	2112      	movs	r1, #18
 800cce8:	f7ff bf98 	b.w	800cc1c <std>
 800ccec:	20000800 	.word	0x20000800
 800ccf0:	200006c8 	.word	0x200006c8
 800ccf4:	0800cc65 	.word	0x0800cc65

0800ccf8 <__sfp_lock_acquire>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	; (800cd00 <__sfp_lock_acquire+0x8>)
 800ccfa:	f000 b91f 	b.w	800cf3c <__retarget_lock_acquire_recursive>
 800ccfe:	bf00      	nop
 800cd00:	20000809 	.word	0x20000809

0800cd04 <__sfp_lock_release>:
 800cd04:	4801      	ldr	r0, [pc, #4]	; (800cd0c <__sfp_lock_release+0x8>)
 800cd06:	f000 b91a 	b.w	800cf3e <__retarget_lock_release_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	20000809 	.word	0x20000809

0800cd10 <__sinit>:
 800cd10:	b510      	push	{r4, lr}
 800cd12:	4604      	mov	r4, r0
 800cd14:	f7ff fff0 	bl	800ccf8 <__sfp_lock_acquire>
 800cd18:	6a23      	ldr	r3, [r4, #32]
 800cd1a:	b11b      	cbz	r3, 800cd24 <__sinit+0x14>
 800cd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd20:	f7ff bff0 	b.w	800cd04 <__sfp_lock_release>
 800cd24:	4b04      	ldr	r3, [pc, #16]	; (800cd38 <__sinit+0x28>)
 800cd26:	6223      	str	r3, [r4, #32]
 800cd28:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <__sinit+0x2c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1f5      	bne.n	800cd1c <__sinit+0xc>
 800cd30:	f7ff ffc4 	bl	800ccbc <global_stdio_init.part.0>
 800cd34:	e7f2      	b.n	800cd1c <__sinit+0xc>
 800cd36:	bf00      	nop
 800cd38:	0800cc7d 	.word	0x0800cc7d
 800cd3c:	20000800 	.word	0x20000800

0800cd40 <_fwalk_sglue>:
 800cd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd44:	4607      	mov	r7, r0
 800cd46:	4688      	mov	r8, r1
 800cd48:	4614      	mov	r4, r2
 800cd4a:	2600      	movs	r6, #0
 800cd4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd50:	f1b9 0901 	subs.w	r9, r9, #1
 800cd54:	d505      	bpl.n	800cd62 <_fwalk_sglue+0x22>
 800cd56:	6824      	ldr	r4, [r4, #0]
 800cd58:	2c00      	cmp	r4, #0
 800cd5a:	d1f7      	bne.n	800cd4c <_fwalk_sglue+0xc>
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd62:	89ab      	ldrh	r3, [r5, #12]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d907      	bls.n	800cd78 <_fwalk_sglue+0x38>
 800cd68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	d003      	beq.n	800cd78 <_fwalk_sglue+0x38>
 800cd70:	4629      	mov	r1, r5
 800cd72:	4638      	mov	r0, r7
 800cd74:	47c0      	blx	r8
 800cd76:	4306      	orrs	r6, r0
 800cd78:	3568      	adds	r5, #104	; 0x68
 800cd7a:	e7e9      	b.n	800cd50 <_fwalk_sglue+0x10>

0800cd7c <siprintf>:
 800cd7c:	b40e      	push	{r1, r2, r3}
 800cd7e:	b500      	push	{lr}
 800cd80:	b09c      	sub	sp, #112	; 0x70
 800cd82:	ab1d      	add	r3, sp, #116	; 0x74
 800cd84:	9002      	str	r0, [sp, #8]
 800cd86:	9006      	str	r0, [sp, #24]
 800cd88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <siprintf+0x38>)
 800cd8e:	9107      	str	r1, [sp, #28]
 800cd90:	9104      	str	r1, [sp, #16]
 800cd92:	4909      	ldr	r1, [pc, #36]	; (800cdb8 <siprintf+0x3c>)
 800cd94:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd98:	9105      	str	r1, [sp, #20]
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	a902      	add	r1, sp, #8
 800cda0:	f002 fbee 	bl	800f580 <_svfiprintf_r>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	b01c      	add	sp, #112	; 0x70
 800cdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb0:	b003      	add	sp, #12
 800cdb2:	4770      	bx	lr
 800cdb4:	20000068 	.word	0x20000068
 800cdb8:	ffff0208 	.word	0xffff0208

0800cdbc <__sread>:
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc4:	f000 f86c 	bl	800cea0 <_read_r>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	bfab      	itete	ge
 800cdcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdce:	89a3      	ldrhlt	r3, [r4, #12]
 800cdd0:	181b      	addge	r3, r3, r0
 800cdd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdd6:	bfac      	ite	ge
 800cdd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdda:	81a3      	strhlt	r3, [r4, #12]
 800cddc:	bd10      	pop	{r4, pc}

0800cdde <__swrite>:
 800cdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde2:	461f      	mov	r7, r3
 800cde4:	898b      	ldrh	r3, [r1, #12]
 800cde6:	05db      	lsls	r3, r3, #23
 800cde8:	4605      	mov	r5, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	4616      	mov	r6, r2
 800cdee:	d505      	bpl.n	800cdfc <__swrite+0x1e>
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f000 f840 	bl	800ce7c <_lseek_r>
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	4632      	mov	r2, r6
 800ce0a:	463b      	mov	r3, r7
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	f000 b857 	b.w	800cec4 <_write_r>

0800ce16 <__sseek>:
 800ce16:	b510      	push	{r4, lr}
 800ce18:	460c      	mov	r4, r1
 800ce1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1e:	f000 f82d 	bl	800ce7c <_lseek_r>
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	bf15      	itete	ne
 800ce28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce32:	81a3      	strheq	r3, [r4, #12]
 800ce34:	bf18      	it	ne
 800ce36:	81a3      	strhne	r3, [r4, #12]
 800ce38:	bd10      	pop	{r4, pc}

0800ce3a <__sclose>:
 800ce3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce3e:	f000 b80d 	b.w	800ce5c <_close_r>

0800ce42 <memset>:
 800ce42:	4402      	add	r2, r0
 800ce44:	4603      	mov	r3, r0
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d100      	bne.n	800ce4c <memset+0xa>
 800ce4a:	4770      	bx	lr
 800ce4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ce50:	e7f9      	b.n	800ce46 <memset+0x4>
	...

0800ce54 <_localeconv_r>:
 800ce54:	4800      	ldr	r0, [pc, #0]	; (800ce58 <_localeconv_r+0x4>)
 800ce56:	4770      	bx	lr
 800ce58:	2000015c 	.word	0x2000015c

0800ce5c <_close_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d06      	ldr	r5, [pc, #24]	; (800ce78 <_close_r+0x1c>)
 800ce60:	2300      	movs	r3, #0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	602b      	str	r3, [r5, #0]
 800ce68:	f7f5 f985 	bl	8002176 <_close>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_close_r+0x1a>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_close_r+0x1a>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	20000804 	.word	0x20000804

0800ce7c <_lseek_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	4d07      	ldr	r5, [pc, #28]	; (800ce9c <_lseek_r+0x20>)
 800ce80:	4604      	mov	r4, r0
 800ce82:	4608      	mov	r0, r1
 800ce84:	4611      	mov	r1, r2
 800ce86:	2200      	movs	r2, #0
 800ce88:	602a      	str	r2, [r5, #0]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f7f5 f99a 	bl	80021c4 <_lseek>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_lseek_r+0x1e>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_lseek_r+0x1e>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	20000804 	.word	0x20000804

0800cea0 <_read_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d07      	ldr	r5, [pc, #28]	; (800cec0 <_read_r+0x20>)
 800cea4:	4604      	mov	r4, r0
 800cea6:	4608      	mov	r0, r1
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7f5 f928 	bl	8002104 <_read>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_read_r+0x1e>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_read_r+0x1e>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	20000804 	.word	0x20000804

0800cec4 <_write_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_write_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f5 f933 	bl	800213e <_write>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_write_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_write_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	20000804 	.word	0x20000804

0800cee8 <__errno>:
 800cee8:	4b01      	ldr	r3, [pc, #4]	; (800cef0 <__errno+0x8>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20000068 	.word	0x20000068

0800cef4 <__libc_init_array>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4d0d      	ldr	r5, [pc, #52]	; (800cf2c <__libc_init_array+0x38>)
 800cef8:	4c0d      	ldr	r4, [pc, #52]	; (800cf30 <__libc_init_array+0x3c>)
 800cefa:	1b64      	subs	r4, r4, r5
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	2600      	movs	r6, #0
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	d109      	bne.n	800cf18 <__libc_init_array+0x24>
 800cf04:	4d0b      	ldr	r5, [pc, #44]	; (800cf34 <__libc_init_array+0x40>)
 800cf06:	4c0c      	ldr	r4, [pc, #48]	; (800cf38 <__libc_init_array+0x44>)
 800cf08:	f004 fda6 	bl	8011a58 <_init>
 800cf0c:	1b64      	subs	r4, r4, r5
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	2600      	movs	r6, #0
 800cf12:	42a6      	cmp	r6, r4
 800cf14:	d105      	bne.n	800cf22 <__libc_init_array+0x2e>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1c:	4798      	blx	r3
 800cf1e:	3601      	adds	r6, #1
 800cf20:	e7ee      	b.n	800cf00 <__libc_init_array+0xc>
 800cf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf26:	4798      	blx	r3
 800cf28:	3601      	adds	r6, #1
 800cf2a:	e7f2      	b.n	800cf12 <__libc_init_array+0x1e>
 800cf2c:	080120c8 	.word	0x080120c8
 800cf30:	080120c8 	.word	0x080120c8
 800cf34:	080120c8 	.word	0x080120c8
 800cf38:	080120cc 	.word	0x080120cc

0800cf3c <__retarget_lock_acquire_recursive>:
 800cf3c:	4770      	bx	lr

0800cf3e <__retarget_lock_release_recursive>:
 800cf3e:	4770      	bx	lr

0800cf40 <nanf>:
 800cf40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf48 <nanf+0x8>
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	7fc00000 	.word	0x7fc00000

0800cf4c <quorem>:
 800cf4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	6903      	ldr	r3, [r0, #16]
 800cf52:	690c      	ldr	r4, [r1, #16]
 800cf54:	42a3      	cmp	r3, r4
 800cf56:	4607      	mov	r7, r0
 800cf58:	db7e      	blt.n	800d058 <quorem+0x10c>
 800cf5a:	3c01      	subs	r4, #1
 800cf5c:	f101 0814 	add.w	r8, r1, #20
 800cf60:	f100 0514 	add.w	r5, r0, #20
 800cf64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf72:	3301      	adds	r3, #1
 800cf74:	429a      	cmp	r2, r3
 800cf76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf82:	d331      	bcc.n	800cfe8 <quorem+0x9c>
 800cf84:	f04f 0e00 	mov.w	lr, #0
 800cf88:	4640      	mov	r0, r8
 800cf8a:	46ac      	mov	ip, r5
 800cf8c:	46f2      	mov	sl, lr
 800cf8e:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf92:	b293      	uxth	r3, r2
 800cf94:	fb06 e303 	mla	r3, r6, r3, lr
 800cf98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf9c:	0c1a      	lsrs	r2, r3, #16
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	ebaa 0303 	sub.w	r3, sl, r3
 800cfa4:	f8dc a000 	ldr.w	sl, [ip]
 800cfa8:	fa13 f38a 	uxtah	r3, r3, sl
 800cfac:	fb06 220e 	mla	r2, r6, lr, r2
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	9b00      	ldr	r3, [sp, #0]
 800cfb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfb8:	b292      	uxth	r2, r2
 800cfba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cfbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfc2:	f8bd 3000 	ldrh.w	r3, [sp]
 800cfc6:	4581      	cmp	r9, r0
 800cfc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfcc:	f84c 3b04 	str.w	r3, [ip], #4
 800cfd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cfd4:	d2db      	bcs.n	800cf8e <quorem+0x42>
 800cfd6:	f855 300b 	ldr.w	r3, [r5, fp]
 800cfda:	b92b      	cbnz	r3, 800cfe8 <quorem+0x9c>
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	3b04      	subs	r3, #4
 800cfe0:	429d      	cmp	r5, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	d32c      	bcc.n	800d040 <quorem+0xf4>
 800cfe6:	613c      	str	r4, [r7, #16]
 800cfe8:	4638      	mov	r0, r7
 800cfea:	f001 f9f1 	bl	800e3d0 <__mcmp>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	db22      	blt.n	800d038 <quorem+0xec>
 800cff2:	3601      	adds	r6, #1
 800cff4:	4629      	mov	r1, r5
 800cff6:	2000      	movs	r0, #0
 800cff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cffc:	f8d1 c000 	ldr.w	ip, [r1]
 800d000:	b293      	uxth	r3, r2
 800d002:	1ac3      	subs	r3, r0, r3
 800d004:	0c12      	lsrs	r2, r2, #16
 800d006:	fa13 f38c 	uxtah	r3, r3, ip
 800d00a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d00e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d012:	b29b      	uxth	r3, r3
 800d014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d018:	45c1      	cmp	r9, r8
 800d01a:	f841 3b04 	str.w	r3, [r1], #4
 800d01e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d022:	d2e9      	bcs.n	800cff8 <quorem+0xac>
 800d024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d02c:	b922      	cbnz	r2, 800d038 <quorem+0xec>
 800d02e:	3b04      	subs	r3, #4
 800d030:	429d      	cmp	r5, r3
 800d032:	461a      	mov	r2, r3
 800d034:	d30a      	bcc.n	800d04c <quorem+0x100>
 800d036:	613c      	str	r4, [r7, #16]
 800d038:	4630      	mov	r0, r6
 800d03a:	b003      	add	sp, #12
 800d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d040:	6812      	ldr	r2, [r2, #0]
 800d042:	3b04      	subs	r3, #4
 800d044:	2a00      	cmp	r2, #0
 800d046:	d1ce      	bne.n	800cfe6 <quorem+0x9a>
 800d048:	3c01      	subs	r4, #1
 800d04a:	e7c9      	b.n	800cfe0 <quorem+0x94>
 800d04c:	6812      	ldr	r2, [r2, #0]
 800d04e:	3b04      	subs	r3, #4
 800d050:	2a00      	cmp	r2, #0
 800d052:	d1f0      	bne.n	800d036 <quorem+0xea>
 800d054:	3c01      	subs	r4, #1
 800d056:	e7eb      	b.n	800d030 <quorem+0xe4>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7ee      	b.n	800d03a <quorem+0xee>
 800d05c:	0000      	movs	r0, r0
	...

0800d060 <_dtoa_r>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	ed2d 8b04 	vpush	{d8-d9}
 800d068:	69c5      	ldr	r5, [r0, #28]
 800d06a:	b093      	sub	sp, #76	; 0x4c
 800d06c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d070:	ec57 6b10 	vmov	r6, r7, d0
 800d074:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d078:	9107      	str	r1, [sp, #28]
 800d07a:	4604      	mov	r4, r0
 800d07c:	920a      	str	r2, [sp, #40]	; 0x28
 800d07e:	930d      	str	r3, [sp, #52]	; 0x34
 800d080:	b975      	cbnz	r5, 800d0a0 <_dtoa_r+0x40>
 800d082:	2010      	movs	r0, #16
 800d084:	f000 fe2a 	bl	800dcdc <malloc>
 800d088:	4602      	mov	r2, r0
 800d08a:	61e0      	str	r0, [r4, #28]
 800d08c:	b920      	cbnz	r0, 800d098 <_dtoa_r+0x38>
 800d08e:	4bae      	ldr	r3, [pc, #696]	; (800d348 <_dtoa_r+0x2e8>)
 800d090:	21ef      	movs	r1, #239	; 0xef
 800d092:	48ae      	ldr	r0, [pc, #696]	; (800d34c <_dtoa_r+0x2ec>)
 800d094:	f002 fe4c 	bl	800fd30 <__assert_func>
 800d098:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d09c:	6005      	str	r5, [r0, #0]
 800d09e:	60c5      	str	r5, [r0, #12]
 800d0a0:	69e3      	ldr	r3, [r4, #28]
 800d0a2:	6819      	ldr	r1, [r3, #0]
 800d0a4:	b151      	cbz	r1, 800d0bc <_dtoa_r+0x5c>
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	604a      	str	r2, [r1, #4]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4093      	lsls	r3, r2
 800d0ae:	608b      	str	r3, [r1, #8]
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 ff07 	bl	800dec4 <_Bfree>
 800d0b6:	69e3      	ldr	r3, [r4, #28]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	1e3b      	subs	r3, r7, #0
 800d0be:	bfbb      	ittet	lt
 800d0c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0c4:	9303      	strlt	r3, [sp, #12]
 800d0c6:	2300      	movge	r3, #0
 800d0c8:	2201      	movlt	r2, #1
 800d0ca:	bfac      	ite	ge
 800d0cc:	f8c8 3000 	strge.w	r3, [r8]
 800d0d0:	f8c8 2000 	strlt.w	r2, [r8]
 800d0d4:	4b9e      	ldr	r3, [pc, #632]	; (800d350 <_dtoa_r+0x2f0>)
 800d0d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d0da:	ea33 0308 	bics.w	r3, r3, r8
 800d0de:	d11b      	bne.n	800d118 <_dtoa_r+0xb8>
 800d0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d0ec:	4333      	orrs	r3, r6
 800d0ee:	f000 8593 	beq.w	800dc18 <_dtoa_r+0xbb8>
 800d0f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f4:	b963      	cbnz	r3, 800d110 <_dtoa_r+0xb0>
 800d0f6:	4b97      	ldr	r3, [pc, #604]	; (800d354 <_dtoa_r+0x2f4>)
 800d0f8:	e027      	b.n	800d14a <_dtoa_r+0xea>
 800d0fa:	4b97      	ldr	r3, [pc, #604]	; (800d358 <_dtoa_r+0x2f8>)
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	3308      	adds	r3, #8
 800d100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	9800      	ldr	r0, [sp, #0]
 800d106:	b013      	add	sp, #76	; 0x4c
 800d108:	ecbd 8b04 	vpop	{d8-d9}
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	4b90      	ldr	r3, [pc, #576]	; (800d354 <_dtoa_r+0x2f4>)
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	3303      	adds	r3, #3
 800d116:	e7f3      	b.n	800d100 <_dtoa_r+0xa0>
 800d118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d11c:	2200      	movs	r2, #0
 800d11e:	ec51 0b17 	vmov	r0, r1, d7
 800d122:	eeb0 8a47 	vmov.f32	s16, s14
 800d126:	eef0 8a67 	vmov.f32	s17, s15
 800d12a:	2300      	movs	r3, #0
 800d12c:	f7f3 fcf4 	bl	8000b18 <__aeabi_dcmpeq>
 800d130:	4681      	mov	r9, r0
 800d132:	b160      	cbz	r0, 800d14e <_dtoa_r+0xee>
 800d134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d136:	2301      	movs	r3, #1
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 8568 	beq.w	800dc12 <_dtoa_r+0xbb2>
 800d142:	4b86      	ldr	r3, [pc, #536]	; (800d35c <_dtoa_r+0x2fc>)
 800d144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	3b01      	subs	r3, #1
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	e7da      	b.n	800d104 <_dtoa_r+0xa4>
 800d14e:	aa10      	add	r2, sp, #64	; 0x40
 800d150:	a911      	add	r1, sp, #68	; 0x44
 800d152:	4620      	mov	r0, r4
 800d154:	eeb0 0a48 	vmov.f32	s0, s16
 800d158:	eef0 0a68 	vmov.f32	s1, s17
 800d15c:	f001 fa4e 	bl	800e5fc <__d2b>
 800d160:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d164:	4682      	mov	sl, r0
 800d166:	2d00      	cmp	r5, #0
 800d168:	d07f      	beq.n	800d26a <_dtoa_r+0x20a>
 800d16a:	ee18 3a90 	vmov	r3, s17
 800d16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d172:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d176:	ec51 0b18 	vmov	r0, r1, d8
 800d17a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d17e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d182:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d186:	4619      	mov	r1, r3
 800d188:	2200      	movs	r2, #0
 800d18a:	4b75      	ldr	r3, [pc, #468]	; (800d360 <_dtoa_r+0x300>)
 800d18c:	f7f3 f8a4 	bl	80002d8 <__aeabi_dsub>
 800d190:	a367      	add	r3, pc, #412	; (adr r3, 800d330 <_dtoa_r+0x2d0>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 fa57 	bl	8000648 <__aeabi_dmul>
 800d19a:	a367      	add	r3, pc, #412	; (adr r3, 800d338 <_dtoa_r+0x2d8>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f3 f89c 	bl	80002dc <__adddf3>
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	460f      	mov	r7, r1
 800d1aa:	f7f3 f9e3 	bl	8000574 <__aeabi_i2d>
 800d1ae:	a364      	add	r3, pc, #400	; (adr r3, 800d340 <_dtoa_r+0x2e0>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	f7f3 fa48 	bl	8000648 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f7f3 f88c 	bl	80002dc <__adddf3>
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	460f      	mov	r7, r1
 800d1c8:	f7f3 fcee 	bl	8000ba8 <__aeabi_d2iz>
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	4683      	mov	fp, r0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	f7f3 fca9 	bl	8000b2c <__aeabi_dcmplt>
 800d1da:	b148      	cbz	r0, 800d1f0 <_dtoa_r+0x190>
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f7f3 f9c9 	bl	8000574 <__aeabi_i2d>
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	f7f3 fc97 	bl	8000b18 <__aeabi_dcmpeq>
 800d1ea:	b908      	cbnz	r0, 800d1f0 <_dtoa_r+0x190>
 800d1ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1f0:	f1bb 0f16 	cmp.w	fp, #22
 800d1f4:	d857      	bhi.n	800d2a6 <_dtoa_r+0x246>
 800d1f6:	4b5b      	ldr	r3, [pc, #364]	; (800d364 <_dtoa_r+0x304>)
 800d1f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	ec51 0b18 	vmov	r0, r1, d8
 800d204:	f7f3 fc92 	bl	8000b2c <__aeabi_dcmplt>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d04e      	beq.n	800d2aa <_dtoa_r+0x24a>
 800d20c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d210:	2300      	movs	r3, #0
 800d212:	930c      	str	r3, [sp, #48]	; 0x30
 800d214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d216:	1b5b      	subs	r3, r3, r5
 800d218:	1e5a      	subs	r2, r3, #1
 800d21a:	bf45      	ittet	mi
 800d21c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d220:	9305      	strmi	r3, [sp, #20]
 800d222:	2300      	movpl	r3, #0
 800d224:	2300      	movmi	r3, #0
 800d226:	9206      	str	r2, [sp, #24]
 800d228:	bf54      	ite	pl
 800d22a:	9305      	strpl	r3, [sp, #20]
 800d22c:	9306      	strmi	r3, [sp, #24]
 800d22e:	f1bb 0f00 	cmp.w	fp, #0
 800d232:	db3c      	blt.n	800d2ae <_dtoa_r+0x24e>
 800d234:	9b06      	ldr	r3, [sp, #24]
 800d236:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d23a:	445b      	add	r3, fp
 800d23c:	9306      	str	r3, [sp, #24]
 800d23e:	2300      	movs	r3, #0
 800d240:	9308      	str	r3, [sp, #32]
 800d242:	9b07      	ldr	r3, [sp, #28]
 800d244:	2b09      	cmp	r3, #9
 800d246:	d868      	bhi.n	800d31a <_dtoa_r+0x2ba>
 800d248:	2b05      	cmp	r3, #5
 800d24a:	bfc4      	itt	gt
 800d24c:	3b04      	subgt	r3, #4
 800d24e:	9307      	strgt	r3, [sp, #28]
 800d250:	9b07      	ldr	r3, [sp, #28]
 800d252:	f1a3 0302 	sub.w	r3, r3, #2
 800d256:	bfcc      	ite	gt
 800d258:	2500      	movgt	r5, #0
 800d25a:	2501      	movle	r5, #1
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	f200 8085 	bhi.w	800d36c <_dtoa_r+0x30c>
 800d262:	e8df f003 	tbb	[pc, r3]
 800d266:	3b2e      	.short	0x3b2e
 800d268:	5839      	.short	0x5839
 800d26a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d26e:	441d      	add	r5, r3
 800d270:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d274:	2b20      	cmp	r3, #32
 800d276:	bfc1      	itttt	gt
 800d278:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d27c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d280:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d284:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d288:	bfd6      	itet	le
 800d28a:	f1c3 0320 	rsble	r3, r3, #32
 800d28e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d292:	fa06 f003 	lslle.w	r0, r6, r3
 800d296:	f7f3 f95d 	bl	8000554 <__aeabi_ui2d>
 800d29a:	2201      	movs	r2, #1
 800d29c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d2a0:	3d01      	subs	r5, #1
 800d2a2:	920e      	str	r2, [sp, #56]	; 0x38
 800d2a4:	e76f      	b.n	800d186 <_dtoa_r+0x126>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e7b3      	b.n	800d212 <_dtoa_r+0x1b2>
 800d2aa:	900c      	str	r0, [sp, #48]	; 0x30
 800d2ac:	e7b2      	b.n	800d214 <_dtoa_r+0x1b4>
 800d2ae:	9b05      	ldr	r3, [sp, #20]
 800d2b0:	eba3 030b 	sub.w	r3, r3, fp
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	f1cb 0300 	rsb	r3, fp, #0
 800d2ba:	9308      	str	r3, [sp, #32]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2c0:	e7bf      	b.n	800d242 <_dtoa_r+0x1e2>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	dc52      	bgt.n	800d372 <_dtoa_r+0x312>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	9304      	str	r3, [sp, #16]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d2d6:	e00b      	b.n	800d2f0 <_dtoa_r+0x290>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e7f3      	b.n	800d2c4 <_dtoa_r+0x264>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e2:	445b      	add	r3, fp
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	bfb8      	it	lt
 800d2ee:	2301      	movlt	r3, #1
 800d2f0:	69e0      	ldr	r0, [r4, #28]
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	2204      	movs	r2, #4
 800d2f6:	f102 0614 	add.w	r6, r2, #20
 800d2fa:	429e      	cmp	r6, r3
 800d2fc:	d93d      	bls.n	800d37a <_dtoa_r+0x31a>
 800d2fe:	6041      	str	r1, [r0, #4]
 800d300:	4620      	mov	r0, r4
 800d302:	f000 fd9f 	bl	800de44 <_Balloc>
 800d306:	9000      	str	r0, [sp, #0]
 800d308:	2800      	cmp	r0, #0
 800d30a:	d139      	bne.n	800d380 <_dtoa_r+0x320>
 800d30c:	4b16      	ldr	r3, [pc, #88]	; (800d368 <_dtoa_r+0x308>)
 800d30e:	4602      	mov	r2, r0
 800d310:	f240 11af 	movw	r1, #431	; 0x1af
 800d314:	e6bd      	b.n	800d092 <_dtoa_r+0x32>
 800d316:	2301      	movs	r3, #1
 800d318:	e7e1      	b.n	800d2de <_dtoa_r+0x27e>
 800d31a:	2501      	movs	r5, #1
 800d31c:	2300      	movs	r3, #0
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	9509      	str	r5, [sp, #36]	; 0x24
 800d322:	f04f 33ff 	mov.w	r3, #4294967295
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	9304      	str	r3, [sp, #16]
 800d32a:	2200      	movs	r2, #0
 800d32c:	2312      	movs	r3, #18
 800d32e:	e7d1      	b.n	800d2d4 <_dtoa_r+0x274>
 800d330:	636f4361 	.word	0x636f4361
 800d334:	3fd287a7 	.word	0x3fd287a7
 800d338:	8b60c8b3 	.word	0x8b60c8b3
 800d33c:	3fc68a28 	.word	0x3fc68a28
 800d340:	509f79fb 	.word	0x509f79fb
 800d344:	3fd34413 	.word	0x3fd34413
 800d348:	08011af6 	.word	0x08011af6
 800d34c:	08011b0d 	.word	0x08011b0d
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	08011af2 	.word	0x08011af2
 800d358:	08011ae9 	.word	0x08011ae9
 800d35c:	08011ac1 	.word	0x08011ac1
 800d360:	3ff80000 	.word	0x3ff80000
 800d364:	08011bf8 	.word	0x08011bf8
 800d368:	08011b65 	.word	0x08011b65
 800d36c:	2301      	movs	r3, #1
 800d36e:	9309      	str	r3, [sp, #36]	; 0x24
 800d370:	e7d7      	b.n	800d322 <_dtoa_r+0x2c2>
 800d372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	9304      	str	r3, [sp, #16]
 800d378:	e7ba      	b.n	800d2f0 <_dtoa_r+0x290>
 800d37a:	3101      	adds	r1, #1
 800d37c:	0052      	lsls	r2, r2, #1
 800d37e:	e7ba      	b.n	800d2f6 <_dtoa_r+0x296>
 800d380:	69e3      	ldr	r3, [r4, #28]
 800d382:	9a00      	ldr	r2, [sp, #0]
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	2b0e      	cmp	r3, #14
 800d38a:	f200 80a8 	bhi.w	800d4de <_dtoa_r+0x47e>
 800d38e:	2d00      	cmp	r5, #0
 800d390:	f000 80a5 	beq.w	800d4de <_dtoa_r+0x47e>
 800d394:	f1bb 0f00 	cmp.w	fp, #0
 800d398:	dd38      	ble.n	800d40c <_dtoa_r+0x3ac>
 800d39a:	4bc0      	ldr	r3, [pc, #768]	; (800d69c <_dtoa_r+0x63c>)
 800d39c:	f00b 020f 	and.w	r2, fp, #15
 800d3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d3a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d3ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d3b0:	d019      	beq.n	800d3e6 <_dtoa_r+0x386>
 800d3b2:	4bbb      	ldr	r3, [pc, #748]	; (800d6a0 <_dtoa_r+0x640>)
 800d3b4:	ec51 0b18 	vmov	r0, r1, d8
 800d3b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3bc:	f7f3 fa6e 	bl	800089c <__aeabi_ddiv>
 800d3c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3c4:	f008 080f 	and.w	r8, r8, #15
 800d3c8:	2503      	movs	r5, #3
 800d3ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d6a0 <_dtoa_r+0x640>
 800d3ce:	f1b8 0f00 	cmp.w	r8, #0
 800d3d2:	d10a      	bne.n	800d3ea <_dtoa_r+0x38a>
 800d3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3d8:	4632      	mov	r2, r6
 800d3da:	463b      	mov	r3, r7
 800d3dc:	f7f3 fa5e 	bl	800089c <__aeabi_ddiv>
 800d3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3e4:	e02b      	b.n	800d43e <_dtoa_r+0x3de>
 800d3e6:	2502      	movs	r5, #2
 800d3e8:	e7ef      	b.n	800d3ca <_dtoa_r+0x36a>
 800d3ea:	f018 0f01 	tst.w	r8, #1
 800d3ee:	d008      	beq.n	800d402 <_dtoa_r+0x3a2>
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d3f8:	f7f3 f926 	bl	8000648 <__aeabi_dmul>
 800d3fc:	3501      	adds	r5, #1
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d406:	f109 0908 	add.w	r9, r9, #8
 800d40a:	e7e0      	b.n	800d3ce <_dtoa_r+0x36e>
 800d40c:	f000 809f 	beq.w	800d54e <_dtoa_r+0x4ee>
 800d410:	f1cb 0600 	rsb	r6, fp, #0
 800d414:	4ba1      	ldr	r3, [pc, #644]	; (800d69c <_dtoa_r+0x63c>)
 800d416:	4fa2      	ldr	r7, [pc, #648]	; (800d6a0 <_dtoa_r+0x640>)
 800d418:	f006 020f 	and.w	r2, r6, #15
 800d41c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	ec51 0b18 	vmov	r0, r1, d8
 800d428:	f7f3 f90e 	bl	8000648 <__aeabi_dmul>
 800d42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d430:	1136      	asrs	r6, r6, #4
 800d432:	2300      	movs	r3, #0
 800d434:	2502      	movs	r5, #2
 800d436:	2e00      	cmp	r6, #0
 800d438:	d17e      	bne.n	800d538 <_dtoa_r+0x4d8>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1d0      	bne.n	800d3e0 <_dtoa_r+0x380>
 800d43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d440:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 8084 	beq.w	800d552 <_dtoa_r+0x4f2>
 800d44a:	4b96      	ldr	r3, [pc, #600]	; (800d6a4 <_dtoa_r+0x644>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	f7f3 fb6b 	bl	8000b2c <__aeabi_dcmplt>
 800d456:	2800      	cmp	r0, #0
 800d458:	d07b      	beq.n	800d552 <_dtoa_r+0x4f2>
 800d45a:	9b04      	ldr	r3, [sp, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d078      	beq.n	800d552 <_dtoa_r+0x4f2>
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	dd39      	ble.n	800d4da <_dtoa_r+0x47a>
 800d466:	4b90      	ldr	r3, [pc, #576]	; (800d6a8 <_dtoa_r+0x648>)
 800d468:	2200      	movs	r2, #0
 800d46a:	4640      	mov	r0, r8
 800d46c:	4649      	mov	r1, r9
 800d46e:	f7f3 f8eb 	bl	8000648 <__aeabi_dmul>
 800d472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d476:	9e01      	ldr	r6, [sp, #4]
 800d478:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d47c:	3501      	adds	r5, #1
 800d47e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d482:	4628      	mov	r0, r5
 800d484:	f7f3 f876 	bl	8000574 <__aeabi_i2d>
 800d488:	4642      	mov	r2, r8
 800d48a:	464b      	mov	r3, r9
 800d48c:	f7f3 f8dc 	bl	8000648 <__aeabi_dmul>
 800d490:	4b86      	ldr	r3, [pc, #536]	; (800d6ac <_dtoa_r+0x64c>)
 800d492:	2200      	movs	r2, #0
 800d494:	f7f2 ff22 	bl	80002dc <__adddf3>
 800d498:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	d158      	bne.n	800d558 <_dtoa_r+0x4f8>
 800d4a6:	4b82      	ldr	r3, [pc, #520]	; (800d6b0 <_dtoa_r+0x650>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	f7f2 ff13 	bl	80002d8 <__aeabi_dsub>
 800d4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4b6:	4680      	mov	r8, r0
 800d4b8:	4689      	mov	r9, r1
 800d4ba:	f7f3 fb55 	bl	8000b68 <__aeabi_dcmpgt>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	f040 8296 	bne.w	800d9f0 <_dtoa_r+0x990>
 800d4c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	f7f3 fb2c 	bl	8000b2c <__aeabi_dcmplt>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 8289 	bne.w	800d9ec <_dtoa_r+0x98c>
 800d4da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d4de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f2c0 814e 	blt.w	800d782 <_dtoa_r+0x722>
 800d4e6:	f1bb 0f0e 	cmp.w	fp, #14
 800d4ea:	f300 814a 	bgt.w	800d782 <_dtoa_r+0x722>
 800d4ee:	4b6b      	ldr	r3, [pc, #428]	; (800d69c <_dtoa_r+0x63c>)
 800d4f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d4f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f280 80dc 	bge.w	800d6b8 <_dtoa_r+0x658>
 800d500:	9b04      	ldr	r3, [sp, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f300 80d8 	bgt.w	800d6b8 <_dtoa_r+0x658>
 800d508:	f040 826f 	bne.w	800d9ea <_dtoa_r+0x98a>
 800d50c:	4b68      	ldr	r3, [pc, #416]	; (800d6b0 <_dtoa_r+0x650>)
 800d50e:	2200      	movs	r2, #0
 800d510:	4640      	mov	r0, r8
 800d512:	4649      	mov	r1, r9
 800d514:	f7f3 f898 	bl	8000648 <__aeabi_dmul>
 800d518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d51c:	f7f3 fb1a 	bl	8000b54 <__aeabi_dcmpge>
 800d520:	9e04      	ldr	r6, [sp, #16]
 800d522:	4637      	mov	r7, r6
 800d524:	2800      	cmp	r0, #0
 800d526:	f040 8245 	bne.w	800d9b4 <_dtoa_r+0x954>
 800d52a:	9d00      	ldr	r5, [sp, #0]
 800d52c:	2331      	movs	r3, #49	; 0x31
 800d52e:	f805 3b01 	strb.w	r3, [r5], #1
 800d532:	f10b 0b01 	add.w	fp, fp, #1
 800d536:	e241      	b.n	800d9bc <_dtoa_r+0x95c>
 800d538:	07f2      	lsls	r2, r6, #31
 800d53a:	d505      	bpl.n	800d548 <_dtoa_r+0x4e8>
 800d53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d540:	f7f3 f882 	bl	8000648 <__aeabi_dmul>
 800d544:	3501      	adds	r5, #1
 800d546:	2301      	movs	r3, #1
 800d548:	1076      	asrs	r6, r6, #1
 800d54a:	3708      	adds	r7, #8
 800d54c:	e773      	b.n	800d436 <_dtoa_r+0x3d6>
 800d54e:	2502      	movs	r5, #2
 800d550:	e775      	b.n	800d43e <_dtoa_r+0x3de>
 800d552:	9e04      	ldr	r6, [sp, #16]
 800d554:	465f      	mov	r7, fp
 800d556:	e792      	b.n	800d47e <_dtoa_r+0x41e>
 800d558:	9900      	ldr	r1, [sp, #0]
 800d55a:	4b50      	ldr	r3, [pc, #320]	; (800d69c <_dtoa_r+0x63c>)
 800d55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d560:	4431      	add	r1, r6
 800d562:	9102      	str	r1, [sp, #8]
 800d564:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d566:	eeb0 9a47 	vmov.f32	s18, s14
 800d56a:	eef0 9a67 	vmov.f32	s19, s15
 800d56e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d576:	2900      	cmp	r1, #0
 800d578:	d044      	beq.n	800d604 <_dtoa_r+0x5a4>
 800d57a:	494e      	ldr	r1, [pc, #312]	; (800d6b4 <_dtoa_r+0x654>)
 800d57c:	2000      	movs	r0, #0
 800d57e:	f7f3 f98d 	bl	800089c <__aeabi_ddiv>
 800d582:	ec53 2b19 	vmov	r2, r3, d9
 800d586:	f7f2 fea7 	bl	80002d8 <__aeabi_dsub>
 800d58a:	9d00      	ldr	r5, [sp, #0]
 800d58c:	ec41 0b19 	vmov	d9, r0, r1
 800d590:	4649      	mov	r1, r9
 800d592:	4640      	mov	r0, r8
 800d594:	f7f3 fb08 	bl	8000ba8 <__aeabi_d2iz>
 800d598:	4606      	mov	r6, r0
 800d59a:	f7f2 ffeb 	bl	8000574 <__aeabi_i2d>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	4649      	mov	r1, r9
 800d5a6:	f7f2 fe97 	bl	80002d8 <__aeabi_dsub>
 800d5aa:	3630      	adds	r6, #48	; 0x30
 800d5ac:	f805 6b01 	strb.w	r6, [r5], #1
 800d5b0:	ec53 2b19 	vmov	r2, r3, d9
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	4689      	mov	r9, r1
 800d5b8:	f7f3 fab8 	bl	8000b2c <__aeabi_dcmplt>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d164      	bne.n	800d68a <_dtoa_r+0x62a>
 800d5c0:	4642      	mov	r2, r8
 800d5c2:	464b      	mov	r3, r9
 800d5c4:	4937      	ldr	r1, [pc, #220]	; (800d6a4 <_dtoa_r+0x644>)
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	f7f2 fe86 	bl	80002d8 <__aeabi_dsub>
 800d5cc:	ec53 2b19 	vmov	r2, r3, d9
 800d5d0:	f7f3 faac 	bl	8000b2c <__aeabi_dcmplt>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	f040 80b6 	bne.w	800d746 <_dtoa_r+0x6e6>
 800d5da:	9b02      	ldr	r3, [sp, #8]
 800d5dc:	429d      	cmp	r5, r3
 800d5de:	f43f af7c 	beq.w	800d4da <_dtoa_r+0x47a>
 800d5e2:	4b31      	ldr	r3, [pc, #196]	; (800d6a8 <_dtoa_r+0x648>)
 800d5e4:	ec51 0b19 	vmov	r0, r1, d9
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f7f3 f82d 	bl	8000648 <__aeabi_dmul>
 800d5ee:	4b2e      	ldr	r3, [pc, #184]	; (800d6a8 <_dtoa_r+0x648>)
 800d5f0:	ec41 0b19 	vmov	d9, r0, r1
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	f7f3 f825 	bl	8000648 <__aeabi_dmul>
 800d5fe:	4680      	mov	r8, r0
 800d600:	4689      	mov	r9, r1
 800d602:	e7c5      	b.n	800d590 <_dtoa_r+0x530>
 800d604:	ec51 0b17 	vmov	r0, r1, d7
 800d608:	f7f3 f81e 	bl	8000648 <__aeabi_dmul>
 800d60c:	9b02      	ldr	r3, [sp, #8]
 800d60e:	9d00      	ldr	r5, [sp, #0]
 800d610:	930f      	str	r3, [sp, #60]	; 0x3c
 800d612:	ec41 0b19 	vmov	d9, r0, r1
 800d616:	4649      	mov	r1, r9
 800d618:	4640      	mov	r0, r8
 800d61a:	f7f3 fac5 	bl	8000ba8 <__aeabi_d2iz>
 800d61e:	4606      	mov	r6, r0
 800d620:	f7f2 ffa8 	bl	8000574 <__aeabi_i2d>
 800d624:	3630      	adds	r6, #48	; 0x30
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4640      	mov	r0, r8
 800d62c:	4649      	mov	r1, r9
 800d62e:	f7f2 fe53 	bl	80002d8 <__aeabi_dsub>
 800d632:	f805 6b01 	strb.w	r6, [r5], #1
 800d636:	9b02      	ldr	r3, [sp, #8]
 800d638:	429d      	cmp	r5, r3
 800d63a:	4680      	mov	r8, r0
 800d63c:	4689      	mov	r9, r1
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	d124      	bne.n	800d68e <_dtoa_r+0x62e>
 800d644:	4b1b      	ldr	r3, [pc, #108]	; (800d6b4 <_dtoa_r+0x654>)
 800d646:	ec51 0b19 	vmov	r0, r1, d9
 800d64a:	f7f2 fe47 	bl	80002dc <__adddf3>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f3 fa87 	bl	8000b68 <__aeabi_dcmpgt>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d173      	bne.n	800d746 <_dtoa_r+0x6e6>
 800d65e:	ec53 2b19 	vmov	r2, r3, d9
 800d662:	4914      	ldr	r1, [pc, #80]	; (800d6b4 <_dtoa_r+0x654>)
 800d664:	2000      	movs	r0, #0
 800d666:	f7f2 fe37 	bl	80002d8 <__aeabi_dsub>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	4640      	mov	r0, r8
 800d670:	4649      	mov	r1, r9
 800d672:	f7f3 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 800d676:	2800      	cmp	r0, #0
 800d678:	f43f af2f 	beq.w	800d4da <_dtoa_r+0x47a>
 800d67c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d67e:	1e6b      	subs	r3, r5, #1
 800d680:	930f      	str	r3, [sp, #60]	; 0x3c
 800d682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d686:	2b30      	cmp	r3, #48	; 0x30
 800d688:	d0f8      	beq.n	800d67c <_dtoa_r+0x61c>
 800d68a:	46bb      	mov	fp, r7
 800d68c:	e04a      	b.n	800d724 <_dtoa_r+0x6c4>
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <_dtoa_r+0x648>)
 800d690:	f7f2 ffda 	bl	8000648 <__aeabi_dmul>
 800d694:	4680      	mov	r8, r0
 800d696:	4689      	mov	r9, r1
 800d698:	e7bd      	b.n	800d616 <_dtoa_r+0x5b6>
 800d69a:	bf00      	nop
 800d69c:	08011bf8 	.word	0x08011bf8
 800d6a0:	08011bd0 	.word	0x08011bd0
 800d6a4:	3ff00000 	.word	0x3ff00000
 800d6a8:	40240000 	.word	0x40240000
 800d6ac:	401c0000 	.word	0x401c0000
 800d6b0:	40140000 	.word	0x40140000
 800d6b4:	3fe00000 	.word	0x3fe00000
 800d6b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6bc:	9d00      	ldr	r5, [sp, #0]
 800d6be:	4642      	mov	r2, r8
 800d6c0:	464b      	mov	r3, r9
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f3 f8e9 	bl	800089c <__aeabi_ddiv>
 800d6ca:	f7f3 fa6d 	bl	8000ba8 <__aeabi_d2iz>
 800d6ce:	9001      	str	r0, [sp, #4]
 800d6d0:	f7f2 ff50 	bl	8000574 <__aeabi_i2d>
 800d6d4:	4642      	mov	r2, r8
 800d6d6:	464b      	mov	r3, r9
 800d6d8:	f7f2 ffb6 	bl	8000648 <__aeabi_dmul>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	f7f2 fdf8 	bl	80002d8 <__aeabi_dsub>
 800d6e8:	9e01      	ldr	r6, [sp, #4]
 800d6ea:	9f04      	ldr	r7, [sp, #16]
 800d6ec:	3630      	adds	r6, #48	; 0x30
 800d6ee:	f805 6b01 	strb.w	r6, [r5], #1
 800d6f2:	9e00      	ldr	r6, [sp, #0]
 800d6f4:	1bae      	subs	r6, r5, r6
 800d6f6:	42b7      	cmp	r7, r6
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	d134      	bne.n	800d768 <_dtoa_r+0x708>
 800d6fe:	f7f2 fded 	bl	80002dc <__adddf3>
 800d702:	4642      	mov	r2, r8
 800d704:	464b      	mov	r3, r9
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	f7f3 fa2d 	bl	8000b68 <__aeabi_dcmpgt>
 800d70e:	b9c8      	cbnz	r0, 800d744 <_dtoa_r+0x6e4>
 800d710:	4642      	mov	r2, r8
 800d712:	464b      	mov	r3, r9
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f3 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800d71c:	b110      	cbz	r0, 800d724 <_dtoa_r+0x6c4>
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	07db      	lsls	r3, r3, #31
 800d722:	d40f      	bmi.n	800d744 <_dtoa_r+0x6e4>
 800d724:	4651      	mov	r1, sl
 800d726:	4620      	mov	r0, r4
 800d728:	f000 fbcc 	bl	800dec4 <_Bfree>
 800d72c:	2300      	movs	r3, #0
 800d72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d730:	702b      	strb	r3, [r5, #0]
 800d732:	f10b 0301 	add.w	r3, fp, #1
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f43f ace2 	beq.w	800d104 <_dtoa_r+0xa4>
 800d740:	601d      	str	r5, [r3, #0]
 800d742:	e4df      	b.n	800d104 <_dtoa_r+0xa4>
 800d744:	465f      	mov	r7, fp
 800d746:	462b      	mov	r3, r5
 800d748:	461d      	mov	r5, r3
 800d74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d74e:	2a39      	cmp	r2, #57	; 0x39
 800d750:	d106      	bne.n	800d760 <_dtoa_r+0x700>
 800d752:	9a00      	ldr	r2, [sp, #0]
 800d754:	429a      	cmp	r2, r3
 800d756:	d1f7      	bne.n	800d748 <_dtoa_r+0x6e8>
 800d758:	9900      	ldr	r1, [sp, #0]
 800d75a:	2230      	movs	r2, #48	; 0x30
 800d75c:	3701      	adds	r7, #1
 800d75e:	700a      	strb	r2, [r1, #0]
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	3201      	adds	r2, #1
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	e790      	b.n	800d68a <_dtoa_r+0x62a>
 800d768:	4ba3      	ldr	r3, [pc, #652]	; (800d9f8 <_dtoa_r+0x998>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	f7f2 ff6c 	bl	8000648 <__aeabi_dmul>
 800d770:	2200      	movs	r2, #0
 800d772:	2300      	movs	r3, #0
 800d774:	4606      	mov	r6, r0
 800d776:	460f      	mov	r7, r1
 800d778:	f7f3 f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d09e      	beq.n	800d6be <_dtoa_r+0x65e>
 800d780:	e7d0      	b.n	800d724 <_dtoa_r+0x6c4>
 800d782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d784:	2a00      	cmp	r2, #0
 800d786:	f000 80ca 	beq.w	800d91e <_dtoa_r+0x8be>
 800d78a:	9a07      	ldr	r2, [sp, #28]
 800d78c:	2a01      	cmp	r2, #1
 800d78e:	f300 80ad 	bgt.w	800d8ec <_dtoa_r+0x88c>
 800d792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d794:	2a00      	cmp	r2, #0
 800d796:	f000 80a5 	beq.w	800d8e4 <_dtoa_r+0x884>
 800d79a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d79e:	9e08      	ldr	r6, [sp, #32]
 800d7a0:	9d05      	ldr	r5, [sp, #20]
 800d7a2:	9a05      	ldr	r2, [sp, #20]
 800d7a4:	441a      	add	r2, r3
 800d7a6:	9205      	str	r2, [sp, #20]
 800d7a8:	9a06      	ldr	r2, [sp, #24]
 800d7aa:	2101      	movs	r1, #1
 800d7ac:	441a      	add	r2, r3
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	9206      	str	r2, [sp, #24]
 800d7b2:	f000 fc87 	bl	800e0c4 <__i2b>
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	b165      	cbz	r5, 800d7d4 <_dtoa_r+0x774>
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd09      	ble.n	800d7d4 <_dtoa_r+0x774>
 800d7c0:	42ab      	cmp	r3, r5
 800d7c2:	9a05      	ldr	r2, [sp, #20]
 800d7c4:	bfa8      	it	ge
 800d7c6:	462b      	movge	r3, r5
 800d7c8:	1ad2      	subs	r2, r2, r3
 800d7ca:	9205      	str	r2, [sp, #20]
 800d7cc:	9a06      	ldr	r2, [sp, #24]
 800d7ce:	1aed      	subs	r5, r5, r3
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	9306      	str	r3, [sp, #24]
 800d7d4:	9b08      	ldr	r3, [sp, #32]
 800d7d6:	b1f3      	cbz	r3, 800d816 <_dtoa_r+0x7b6>
 800d7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 80a3 	beq.w	800d926 <_dtoa_r+0x8c6>
 800d7e0:	2e00      	cmp	r6, #0
 800d7e2:	dd10      	ble.n	800d806 <_dtoa_r+0x7a6>
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	4632      	mov	r2, r6
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fd2b 	bl	800e244 <__pow5mult>
 800d7ee:	4652      	mov	r2, sl
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	4607      	mov	r7, r0
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 fc7b 	bl	800e0f0 <__multiply>
 800d7fa:	4651      	mov	r1, sl
 800d7fc:	4680      	mov	r8, r0
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 fb60 	bl	800dec4 <_Bfree>
 800d804:	46c2      	mov	sl, r8
 800d806:	9b08      	ldr	r3, [sp, #32]
 800d808:	1b9a      	subs	r2, r3, r6
 800d80a:	d004      	beq.n	800d816 <_dtoa_r+0x7b6>
 800d80c:	4651      	mov	r1, sl
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 fd18 	bl	800e244 <__pow5mult>
 800d814:	4682      	mov	sl, r0
 800d816:	2101      	movs	r1, #1
 800d818:	4620      	mov	r0, r4
 800d81a:	f000 fc53 	bl	800e0c4 <__i2b>
 800d81e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d820:	2b00      	cmp	r3, #0
 800d822:	4606      	mov	r6, r0
 800d824:	f340 8081 	ble.w	800d92a <_dtoa_r+0x8ca>
 800d828:	461a      	mov	r2, r3
 800d82a:	4601      	mov	r1, r0
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 fd09 	bl	800e244 <__pow5mult>
 800d832:	9b07      	ldr	r3, [sp, #28]
 800d834:	2b01      	cmp	r3, #1
 800d836:	4606      	mov	r6, r0
 800d838:	dd7a      	ble.n	800d930 <_dtoa_r+0x8d0>
 800d83a:	f04f 0800 	mov.w	r8, #0
 800d83e:	6933      	ldr	r3, [r6, #16]
 800d840:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d844:	6918      	ldr	r0, [r3, #16]
 800d846:	f000 fbef 	bl	800e028 <__hi0bits>
 800d84a:	f1c0 0020 	rsb	r0, r0, #32
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	4418      	add	r0, r3
 800d852:	f010 001f 	ands.w	r0, r0, #31
 800d856:	f000 8094 	beq.w	800d982 <_dtoa_r+0x922>
 800d85a:	f1c0 0320 	rsb	r3, r0, #32
 800d85e:	2b04      	cmp	r3, #4
 800d860:	f340 8085 	ble.w	800d96e <_dtoa_r+0x90e>
 800d864:	9b05      	ldr	r3, [sp, #20]
 800d866:	f1c0 001c 	rsb	r0, r0, #28
 800d86a:	4403      	add	r3, r0
 800d86c:	9305      	str	r3, [sp, #20]
 800d86e:	9b06      	ldr	r3, [sp, #24]
 800d870:	4403      	add	r3, r0
 800d872:	4405      	add	r5, r0
 800d874:	9306      	str	r3, [sp, #24]
 800d876:	9b05      	ldr	r3, [sp, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd05      	ble.n	800d888 <_dtoa_r+0x828>
 800d87c:	4651      	mov	r1, sl
 800d87e:	461a      	mov	r2, r3
 800d880:	4620      	mov	r0, r4
 800d882:	f000 fd39 	bl	800e2f8 <__lshift>
 800d886:	4682      	mov	sl, r0
 800d888:	9b06      	ldr	r3, [sp, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dd05      	ble.n	800d89a <_dtoa_r+0x83a>
 800d88e:	4631      	mov	r1, r6
 800d890:	461a      	mov	r2, r3
 800d892:	4620      	mov	r0, r4
 800d894:	f000 fd30 	bl	800e2f8 <__lshift>
 800d898:	4606      	mov	r6, r0
 800d89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d072      	beq.n	800d986 <_dtoa_r+0x926>
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4650      	mov	r0, sl
 800d8a4:	f000 fd94 	bl	800e3d0 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	da6c      	bge.n	800d986 <_dtoa_r+0x926>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4651      	mov	r1, sl
 800d8b0:	220a      	movs	r2, #10
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f000 fb28 	bl	800df08 <__multadd>
 800d8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8be:	4682      	mov	sl, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 81b0 	beq.w	800dc26 <_dtoa_r+0xbc6>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	220a      	movs	r2, #10
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f000 fb1b 	bl	800df08 <__multadd>
 800d8d2:	9b01      	ldr	r3, [sp, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	f300 8096 	bgt.w	800da08 <_dtoa_r+0x9a8>
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	dc59      	bgt.n	800d996 <_dtoa_r+0x936>
 800d8e2:	e091      	b.n	800da08 <_dtoa_r+0x9a8>
 800d8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8ea:	e758      	b.n	800d79e <_dtoa_r+0x73e>
 800d8ec:	9b04      	ldr	r3, [sp, #16]
 800d8ee:	1e5e      	subs	r6, r3, #1
 800d8f0:	9b08      	ldr	r3, [sp, #32]
 800d8f2:	42b3      	cmp	r3, r6
 800d8f4:	bfbf      	itttt	lt
 800d8f6:	9b08      	ldrlt	r3, [sp, #32]
 800d8f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d8fa:	9608      	strlt	r6, [sp, #32]
 800d8fc:	1af3      	sublt	r3, r6, r3
 800d8fe:	bfb4      	ite	lt
 800d900:	18d2      	addlt	r2, r2, r3
 800d902:	1b9e      	subge	r6, r3, r6
 800d904:	9b04      	ldr	r3, [sp, #16]
 800d906:	bfbc      	itt	lt
 800d908:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d90a:	2600      	movlt	r6, #0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	bfb7      	itett	lt
 800d910:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d914:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d918:	1a9d      	sublt	r5, r3, r2
 800d91a:	2300      	movlt	r3, #0
 800d91c:	e741      	b.n	800d7a2 <_dtoa_r+0x742>
 800d91e:	9e08      	ldr	r6, [sp, #32]
 800d920:	9d05      	ldr	r5, [sp, #20]
 800d922:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d924:	e748      	b.n	800d7b8 <_dtoa_r+0x758>
 800d926:	9a08      	ldr	r2, [sp, #32]
 800d928:	e770      	b.n	800d80c <_dtoa_r+0x7ac>
 800d92a:	9b07      	ldr	r3, [sp, #28]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	dc19      	bgt.n	800d964 <_dtoa_r+0x904>
 800d930:	9b02      	ldr	r3, [sp, #8]
 800d932:	b9bb      	cbnz	r3, 800d964 <_dtoa_r+0x904>
 800d934:	9b03      	ldr	r3, [sp, #12]
 800d936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d93a:	b99b      	cbnz	r3, 800d964 <_dtoa_r+0x904>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d942:	0d1b      	lsrs	r3, r3, #20
 800d944:	051b      	lsls	r3, r3, #20
 800d946:	b183      	cbz	r3, 800d96a <_dtoa_r+0x90a>
 800d948:	9b05      	ldr	r3, [sp, #20]
 800d94a:	3301      	adds	r3, #1
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	9b06      	ldr	r3, [sp, #24]
 800d950:	3301      	adds	r3, #1
 800d952:	9306      	str	r3, [sp, #24]
 800d954:	f04f 0801 	mov.w	r8, #1
 800d958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f47f af6f 	bne.w	800d83e <_dtoa_r+0x7de>
 800d960:	2001      	movs	r0, #1
 800d962:	e774      	b.n	800d84e <_dtoa_r+0x7ee>
 800d964:	f04f 0800 	mov.w	r8, #0
 800d968:	e7f6      	b.n	800d958 <_dtoa_r+0x8f8>
 800d96a:	4698      	mov	r8, r3
 800d96c:	e7f4      	b.n	800d958 <_dtoa_r+0x8f8>
 800d96e:	d082      	beq.n	800d876 <_dtoa_r+0x816>
 800d970:	9a05      	ldr	r2, [sp, #20]
 800d972:	331c      	adds	r3, #28
 800d974:	441a      	add	r2, r3
 800d976:	9205      	str	r2, [sp, #20]
 800d978:	9a06      	ldr	r2, [sp, #24]
 800d97a:	441a      	add	r2, r3
 800d97c:	441d      	add	r5, r3
 800d97e:	9206      	str	r2, [sp, #24]
 800d980:	e779      	b.n	800d876 <_dtoa_r+0x816>
 800d982:	4603      	mov	r3, r0
 800d984:	e7f4      	b.n	800d970 <_dtoa_r+0x910>
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dc37      	bgt.n	800d9fc <_dtoa_r+0x99c>
 800d98c:	9b07      	ldr	r3, [sp, #28]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	dd34      	ble.n	800d9fc <_dtoa_r+0x99c>
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	9301      	str	r3, [sp, #4]
 800d996:	9b01      	ldr	r3, [sp, #4]
 800d998:	b963      	cbnz	r3, 800d9b4 <_dtoa_r+0x954>
 800d99a:	4631      	mov	r1, r6
 800d99c:	2205      	movs	r2, #5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 fab2 	bl	800df08 <__multadd>
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	4650      	mov	r0, sl
 800d9aa:	f000 fd11 	bl	800e3d0 <__mcmp>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f73f adbb 	bgt.w	800d52a <_dtoa_r+0x4ca>
 800d9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b6:	9d00      	ldr	r5, [sp, #0]
 800d9b8:	ea6f 0b03 	mvn.w	fp, r3
 800d9bc:	f04f 0800 	mov.w	r8, #0
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f000 fa7e 	bl	800dec4 <_Bfree>
 800d9c8:	2f00      	cmp	r7, #0
 800d9ca:	f43f aeab 	beq.w	800d724 <_dtoa_r+0x6c4>
 800d9ce:	f1b8 0f00 	cmp.w	r8, #0
 800d9d2:	d005      	beq.n	800d9e0 <_dtoa_r+0x980>
 800d9d4:	45b8      	cmp	r8, r7
 800d9d6:	d003      	beq.n	800d9e0 <_dtoa_r+0x980>
 800d9d8:	4641      	mov	r1, r8
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fa72 	bl	800dec4 <_Bfree>
 800d9e0:	4639      	mov	r1, r7
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 fa6e 	bl	800dec4 <_Bfree>
 800d9e8:	e69c      	b.n	800d724 <_dtoa_r+0x6c4>
 800d9ea:	2600      	movs	r6, #0
 800d9ec:	4637      	mov	r7, r6
 800d9ee:	e7e1      	b.n	800d9b4 <_dtoa_r+0x954>
 800d9f0:	46bb      	mov	fp, r7
 800d9f2:	4637      	mov	r7, r6
 800d9f4:	e599      	b.n	800d52a <_dtoa_r+0x4ca>
 800d9f6:	bf00      	nop
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 80c8 	beq.w	800db94 <_dtoa_r+0xb34>
 800da04:	9b04      	ldr	r3, [sp, #16]
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	2d00      	cmp	r5, #0
 800da0a:	dd05      	ble.n	800da18 <_dtoa_r+0x9b8>
 800da0c:	4639      	mov	r1, r7
 800da0e:	462a      	mov	r2, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f000 fc71 	bl	800e2f8 <__lshift>
 800da16:	4607      	mov	r7, r0
 800da18:	f1b8 0f00 	cmp.w	r8, #0
 800da1c:	d05b      	beq.n	800dad6 <_dtoa_r+0xa76>
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fa0f 	bl	800de44 <_Balloc>
 800da26:	4605      	mov	r5, r0
 800da28:	b928      	cbnz	r0, 800da36 <_dtoa_r+0x9d6>
 800da2a:	4b83      	ldr	r3, [pc, #524]	; (800dc38 <_dtoa_r+0xbd8>)
 800da2c:	4602      	mov	r2, r0
 800da2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800da32:	f7ff bb2e 	b.w	800d092 <_dtoa_r+0x32>
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	3202      	adds	r2, #2
 800da3a:	0092      	lsls	r2, r2, #2
 800da3c:	f107 010c 	add.w	r1, r7, #12
 800da40:	300c      	adds	r0, #12
 800da42:	f002 f95f 	bl	800fd04 <memcpy>
 800da46:	2201      	movs	r2, #1
 800da48:	4629      	mov	r1, r5
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 fc54 	bl	800e2f8 <__lshift>
 800da50:	9b00      	ldr	r3, [sp, #0]
 800da52:	3301      	adds	r3, #1
 800da54:	9304      	str	r3, [sp, #16]
 800da56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da5a:	4413      	add	r3, r2
 800da5c:	9308      	str	r3, [sp, #32]
 800da5e:	9b02      	ldr	r3, [sp, #8]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	46b8      	mov	r8, r7
 800da66:	9306      	str	r3, [sp, #24]
 800da68:	4607      	mov	r7, r0
 800da6a:	9b04      	ldr	r3, [sp, #16]
 800da6c:	4631      	mov	r1, r6
 800da6e:	3b01      	subs	r3, #1
 800da70:	4650      	mov	r0, sl
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	f7ff fa6a 	bl	800cf4c <quorem>
 800da78:	4641      	mov	r1, r8
 800da7a:	9002      	str	r0, [sp, #8]
 800da7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800da80:	4650      	mov	r0, sl
 800da82:	f000 fca5 	bl	800e3d0 <__mcmp>
 800da86:	463a      	mov	r2, r7
 800da88:	9005      	str	r0, [sp, #20]
 800da8a:	4631      	mov	r1, r6
 800da8c:	4620      	mov	r0, r4
 800da8e:	f000 fcbb 	bl	800e408 <__mdiff>
 800da92:	68c2      	ldr	r2, [r0, #12]
 800da94:	4605      	mov	r5, r0
 800da96:	bb02      	cbnz	r2, 800dada <_dtoa_r+0xa7a>
 800da98:	4601      	mov	r1, r0
 800da9a:	4650      	mov	r0, sl
 800da9c:	f000 fc98 	bl	800e3d0 <__mcmp>
 800daa0:	4602      	mov	r2, r0
 800daa2:	4629      	mov	r1, r5
 800daa4:	4620      	mov	r0, r4
 800daa6:	9209      	str	r2, [sp, #36]	; 0x24
 800daa8:	f000 fa0c 	bl	800dec4 <_Bfree>
 800daac:	9b07      	ldr	r3, [sp, #28]
 800daae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dab0:	9d04      	ldr	r5, [sp, #16]
 800dab2:	ea43 0102 	orr.w	r1, r3, r2
 800dab6:	9b06      	ldr	r3, [sp, #24]
 800dab8:	4319      	orrs	r1, r3
 800daba:	d110      	bne.n	800dade <_dtoa_r+0xa7e>
 800dabc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dac0:	d029      	beq.n	800db16 <_dtoa_r+0xab6>
 800dac2:	9b05      	ldr	r3, [sp, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dd02      	ble.n	800dace <_dtoa_r+0xa6e>
 800dac8:	9b02      	ldr	r3, [sp, #8]
 800daca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	f883 9000 	strb.w	r9, [r3]
 800dad4:	e774      	b.n	800d9c0 <_dtoa_r+0x960>
 800dad6:	4638      	mov	r0, r7
 800dad8:	e7ba      	b.n	800da50 <_dtoa_r+0x9f0>
 800dada:	2201      	movs	r2, #1
 800dadc:	e7e1      	b.n	800daa2 <_dtoa_r+0xa42>
 800dade:	9b05      	ldr	r3, [sp, #20]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	db04      	blt.n	800daee <_dtoa_r+0xa8e>
 800dae4:	9907      	ldr	r1, [sp, #28]
 800dae6:	430b      	orrs	r3, r1
 800dae8:	9906      	ldr	r1, [sp, #24]
 800daea:	430b      	orrs	r3, r1
 800daec:	d120      	bne.n	800db30 <_dtoa_r+0xad0>
 800daee:	2a00      	cmp	r2, #0
 800daf0:	dded      	ble.n	800dace <_dtoa_r+0xa6e>
 800daf2:	4651      	mov	r1, sl
 800daf4:	2201      	movs	r2, #1
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 fbfe 	bl	800e2f8 <__lshift>
 800dafc:	4631      	mov	r1, r6
 800dafe:	4682      	mov	sl, r0
 800db00:	f000 fc66 	bl	800e3d0 <__mcmp>
 800db04:	2800      	cmp	r0, #0
 800db06:	dc03      	bgt.n	800db10 <_dtoa_r+0xab0>
 800db08:	d1e1      	bne.n	800dace <_dtoa_r+0xa6e>
 800db0a:	f019 0f01 	tst.w	r9, #1
 800db0e:	d0de      	beq.n	800dace <_dtoa_r+0xa6e>
 800db10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db14:	d1d8      	bne.n	800dac8 <_dtoa_r+0xa68>
 800db16:	9a01      	ldr	r2, [sp, #4]
 800db18:	2339      	movs	r3, #57	; 0x39
 800db1a:	7013      	strb	r3, [r2, #0]
 800db1c:	462b      	mov	r3, r5
 800db1e:	461d      	mov	r5, r3
 800db20:	3b01      	subs	r3, #1
 800db22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800db26:	2a39      	cmp	r2, #57	; 0x39
 800db28:	d06c      	beq.n	800dc04 <_dtoa_r+0xba4>
 800db2a:	3201      	adds	r2, #1
 800db2c:	701a      	strb	r2, [r3, #0]
 800db2e:	e747      	b.n	800d9c0 <_dtoa_r+0x960>
 800db30:	2a00      	cmp	r2, #0
 800db32:	dd07      	ble.n	800db44 <_dtoa_r+0xae4>
 800db34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db38:	d0ed      	beq.n	800db16 <_dtoa_r+0xab6>
 800db3a:	9a01      	ldr	r2, [sp, #4]
 800db3c:	f109 0301 	add.w	r3, r9, #1
 800db40:	7013      	strb	r3, [r2, #0]
 800db42:	e73d      	b.n	800d9c0 <_dtoa_r+0x960>
 800db44:	9b04      	ldr	r3, [sp, #16]
 800db46:	9a08      	ldr	r2, [sp, #32]
 800db48:	f803 9c01 	strb.w	r9, [r3, #-1]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d043      	beq.n	800dbd8 <_dtoa_r+0xb78>
 800db50:	4651      	mov	r1, sl
 800db52:	2300      	movs	r3, #0
 800db54:	220a      	movs	r2, #10
 800db56:	4620      	mov	r0, r4
 800db58:	f000 f9d6 	bl	800df08 <__multadd>
 800db5c:	45b8      	cmp	r8, r7
 800db5e:	4682      	mov	sl, r0
 800db60:	f04f 0300 	mov.w	r3, #0
 800db64:	f04f 020a 	mov.w	r2, #10
 800db68:	4641      	mov	r1, r8
 800db6a:	4620      	mov	r0, r4
 800db6c:	d107      	bne.n	800db7e <_dtoa_r+0xb1e>
 800db6e:	f000 f9cb 	bl	800df08 <__multadd>
 800db72:	4680      	mov	r8, r0
 800db74:	4607      	mov	r7, r0
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	e775      	b.n	800da6a <_dtoa_r+0xa0a>
 800db7e:	f000 f9c3 	bl	800df08 <__multadd>
 800db82:	4639      	mov	r1, r7
 800db84:	4680      	mov	r8, r0
 800db86:	2300      	movs	r3, #0
 800db88:	220a      	movs	r2, #10
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 f9bc 	bl	800df08 <__multadd>
 800db90:	4607      	mov	r7, r0
 800db92:	e7f0      	b.n	800db76 <_dtoa_r+0xb16>
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	9301      	str	r3, [sp, #4]
 800db98:	9d00      	ldr	r5, [sp, #0]
 800db9a:	4631      	mov	r1, r6
 800db9c:	4650      	mov	r0, sl
 800db9e:	f7ff f9d5 	bl	800cf4c <quorem>
 800dba2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dba6:	9b00      	ldr	r3, [sp, #0]
 800dba8:	f805 9b01 	strb.w	r9, [r5], #1
 800dbac:	1aea      	subs	r2, r5, r3
 800dbae:	9b01      	ldr	r3, [sp, #4]
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	dd07      	ble.n	800dbc4 <_dtoa_r+0xb64>
 800dbb4:	4651      	mov	r1, sl
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	220a      	movs	r2, #10
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 f9a4 	bl	800df08 <__multadd>
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	e7ea      	b.n	800db9a <_dtoa_r+0xb3a>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	bfc8      	it	gt
 800dbca:	461d      	movgt	r5, r3
 800dbcc:	9b00      	ldr	r3, [sp, #0]
 800dbce:	bfd8      	it	le
 800dbd0:	2501      	movle	r5, #1
 800dbd2:	441d      	add	r5, r3
 800dbd4:	f04f 0800 	mov.w	r8, #0
 800dbd8:	4651      	mov	r1, sl
 800dbda:	2201      	movs	r2, #1
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f000 fb8b 	bl	800e2f8 <__lshift>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4682      	mov	sl, r0
 800dbe6:	f000 fbf3 	bl	800e3d0 <__mcmp>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	dc96      	bgt.n	800db1c <_dtoa_r+0xabc>
 800dbee:	d102      	bne.n	800dbf6 <_dtoa_r+0xb96>
 800dbf0:	f019 0f01 	tst.w	r9, #1
 800dbf4:	d192      	bne.n	800db1c <_dtoa_r+0xabc>
 800dbf6:	462b      	mov	r3, r5
 800dbf8:	461d      	mov	r5, r3
 800dbfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbfe:	2a30      	cmp	r2, #48	; 0x30
 800dc00:	d0fa      	beq.n	800dbf8 <_dtoa_r+0xb98>
 800dc02:	e6dd      	b.n	800d9c0 <_dtoa_r+0x960>
 800dc04:	9a00      	ldr	r2, [sp, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d189      	bne.n	800db1e <_dtoa_r+0xabe>
 800dc0a:	f10b 0b01 	add.w	fp, fp, #1
 800dc0e:	2331      	movs	r3, #49	; 0x31
 800dc10:	e796      	b.n	800db40 <_dtoa_r+0xae0>
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <_dtoa_r+0xbdc>)
 800dc14:	f7ff ba99 	b.w	800d14a <_dtoa_r+0xea>
 800dc18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f47f aa6d 	bne.w	800d0fa <_dtoa_r+0x9a>
 800dc20:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <_dtoa_r+0xbe0>)
 800dc22:	f7ff ba92 	b.w	800d14a <_dtoa_r+0xea>
 800dc26:	9b01      	ldr	r3, [sp, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dcb5      	bgt.n	800db98 <_dtoa_r+0xb38>
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	f73f aeb1 	bgt.w	800d996 <_dtoa_r+0x936>
 800dc34:	e7b0      	b.n	800db98 <_dtoa_r+0xb38>
 800dc36:	bf00      	nop
 800dc38:	08011b65 	.word	0x08011b65
 800dc3c:	08011ac0 	.word	0x08011ac0
 800dc40:	08011ae9 	.word	0x08011ae9

0800dc44 <_free_r>:
 800dc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc46:	2900      	cmp	r1, #0
 800dc48:	d044      	beq.n	800dcd4 <_free_r+0x90>
 800dc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4e:	9001      	str	r0, [sp, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f1a1 0404 	sub.w	r4, r1, #4
 800dc56:	bfb8      	it	lt
 800dc58:	18e4      	addlt	r4, r4, r3
 800dc5a:	f000 f8e7 	bl	800de2c <__malloc_lock>
 800dc5e:	4a1e      	ldr	r2, [pc, #120]	; (800dcd8 <_free_r+0x94>)
 800dc60:	9801      	ldr	r0, [sp, #4]
 800dc62:	6813      	ldr	r3, [r2, #0]
 800dc64:	b933      	cbnz	r3, 800dc74 <_free_r+0x30>
 800dc66:	6063      	str	r3, [r4, #4]
 800dc68:	6014      	str	r4, [r2, #0]
 800dc6a:	b003      	add	sp, #12
 800dc6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc70:	f000 b8e2 	b.w	800de38 <__malloc_unlock>
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	d908      	bls.n	800dc8a <_free_r+0x46>
 800dc78:	6825      	ldr	r5, [r4, #0]
 800dc7a:	1961      	adds	r1, r4, r5
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	bf01      	itttt	eq
 800dc80:	6819      	ldreq	r1, [r3, #0]
 800dc82:	685b      	ldreq	r3, [r3, #4]
 800dc84:	1949      	addeq	r1, r1, r5
 800dc86:	6021      	streq	r1, [r4, #0]
 800dc88:	e7ed      	b.n	800dc66 <_free_r+0x22>
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	b10b      	cbz	r3, 800dc94 <_free_r+0x50>
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	d9fa      	bls.n	800dc8a <_free_r+0x46>
 800dc94:	6811      	ldr	r1, [r2, #0]
 800dc96:	1855      	adds	r5, r2, r1
 800dc98:	42a5      	cmp	r5, r4
 800dc9a:	d10b      	bne.n	800dcb4 <_free_r+0x70>
 800dc9c:	6824      	ldr	r4, [r4, #0]
 800dc9e:	4421      	add	r1, r4
 800dca0:	1854      	adds	r4, r2, r1
 800dca2:	42a3      	cmp	r3, r4
 800dca4:	6011      	str	r1, [r2, #0]
 800dca6:	d1e0      	bne.n	800dc6a <_free_r+0x26>
 800dca8:	681c      	ldr	r4, [r3, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	6053      	str	r3, [r2, #4]
 800dcae:	440c      	add	r4, r1
 800dcb0:	6014      	str	r4, [r2, #0]
 800dcb2:	e7da      	b.n	800dc6a <_free_r+0x26>
 800dcb4:	d902      	bls.n	800dcbc <_free_r+0x78>
 800dcb6:	230c      	movs	r3, #12
 800dcb8:	6003      	str	r3, [r0, #0]
 800dcba:	e7d6      	b.n	800dc6a <_free_r+0x26>
 800dcbc:	6825      	ldr	r5, [r4, #0]
 800dcbe:	1961      	adds	r1, r4, r5
 800dcc0:	428b      	cmp	r3, r1
 800dcc2:	bf04      	itt	eq
 800dcc4:	6819      	ldreq	r1, [r3, #0]
 800dcc6:	685b      	ldreq	r3, [r3, #4]
 800dcc8:	6063      	str	r3, [r4, #4]
 800dcca:	bf04      	itt	eq
 800dccc:	1949      	addeq	r1, r1, r5
 800dcce:	6021      	streq	r1, [r4, #0]
 800dcd0:	6054      	str	r4, [r2, #4]
 800dcd2:	e7ca      	b.n	800dc6a <_free_r+0x26>
 800dcd4:	b003      	add	sp, #12
 800dcd6:	bd30      	pop	{r4, r5, pc}
 800dcd8:	2000080c 	.word	0x2000080c

0800dcdc <malloc>:
 800dcdc:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <malloc+0xc>)
 800dcde:	4601      	mov	r1, r0
 800dce0:	6818      	ldr	r0, [r3, #0]
 800dce2:	f000 b823 	b.w	800dd2c <_malloc_r>
 800dce6:	bf00      	nop
 800dce8:	20000068 	.word	0x20000068

0800dcec <sbrk_aligned>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	4e0e      	ldr	r6, [pc, #56]	; (800dd28 <sbrk_aligned+0x3c>)
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	6831      	ldr	r1, [r6, #0]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	b911      	cbnz	r1, 800dcfe <sbrk_aligned+0x12>
 800dcf8:	f001 fff4 	bl	800fce4 <_sbrk_r>
 800dcfc:	6030      	str	r0, [r6, #0]
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4628      	mov	r0, r5
 800dd02:	f001 ffef 	bl	800fce4 <_sbrk_r>
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	d00a      	beq.n	800dd20 <sbrk_aligned+0x34>
 800dd0a:	1cc4      	adds	r4, r0, #3
 800dd0c:	f024 0403 	bic.w	r4, r4, #3
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d007      	beq.n	800dd24 <sbrk_aligned+0x38>
 800dd14:	1a21      	subs	r1, r4, r0
 800dd16:	4628      	mov	r0, r5
 800dd18:	f001 ffe4 	bl	800fce4 <_sbrk_r>
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d101      	bne.n	800dd24 <sbrk_aligned+0x38>
 800dd20:	f04f 34ff 	mov.w	r4, #4294967295
 800dd24:	4620      	mov	r0, r4
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	20000810 	.word	0x20000810

0800dd2c <_malloc_r>:
 800dd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd30:	1ccd      	adds	r5, r1, #3
 800dd32:	f025 0503 	bic.w	r5, r5, #3
 800dd36:	3508      	adds	r5, #8
 800dd38:	2d0c      	cmp	r5, #12
 800dd3a:	bf38      	it	cc
 800dd3c:	250c      	movcc	r5, #12
 800dd3e:	2d00      	cmp	r5, #0
 800dd40:	4607      	mov	r7, r0
 800dd42:	db01      	blt.n	800dd48 <_malloc_r+0x1c>
 800dd44:	42a9      	cmp	r1, r5
 800dd46:	d905      	bls.n	800dd54 <_malloc_r+0x28>
 800dd48:	230c      	movs	r3, #12
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	2600      	movs	r6, #0
 800dd4e:	4630      	mov	r0, r6
 800dd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de28 <_malloc_r+0xfc>
 800dd58:	f000 f868 	bl	800de2c <__malloc_lock>
 800dd5c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd60:	461c      	mov	r4, r3
 800dd62:	bb5c      	cbnz	r4, 800ddbc <_malloc_r+0x90>
 800dd64:	4629      	mov	r1, r5
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7ff ffc0 	bl	800dcec <sbrk_aligned>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	4604      	mov	r4, r0
 800dd70:	d155      	bne.n	800de1e <_malloc_r+0xf2>
 800dd72:	f8d8 4000 	ldr.w	r4, [r8]
 800dd76:	4626      	mov	r6, r4
 800dd78:	2e00      	cmp	r6, #0
 800dd7a:	d145      	bne.n	800de08 <_malloc_r+0xdc>
 800dd7c:	2c00      	cmp	r4, #0
 800dd7e:	d048      	beq.n	800de12 <_malloc_r+0xe6>
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	4631      	mov	r1, r6
 800dd84:	4638      	mov	r0, r7
 800dd86:	eb04 0903 	add.w	r9, r4, r3
 800dd8a:	f001 ffab 	bl	800fce4 <_sbrk_r>
 800dd8e:	4581      	cmp	r9, r0
 800dd90:	d13f      	bne.n	800de12 <_malloc_r+0xe6>
 800dd92:	6821      	ldr	r1, [r4, #0]
 800dd94:	1a6d      	subs	r5, r5, r1
 800dd96:	4629      	mov	r1, r5
 800dd98:	4638      	mov	r0, r7
 800dd9a:	f7ff ffa7 	bl	800dcec <sbrk_aligned>
 800dd9e:	3001      	adds	r0, #1
 800dda0:	d037      	beq.n	800de12 <_malloc_r+0xe6>
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	442b      	add	r3, r5
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d038      	beq.n	800de22 <_malloc_r+0xf6>
 800ddb0:	685a      	ldr	r2, [r3, #4]
 800ddb2:	42a2      	cmp	r2, r4
 800ddb4:	d12b      	bne.n	800de0e <_malloc_r+0xe2>
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	605a      	str	r2, [r3, #4]
 800ddba:	e00f      	b.n	800dddc <_malloc_r+0xb0>
 800ddbc:	6822      	ldr	r2, [r4, #0]
 800ddbe:	1b52      	subs	r2, r2, r5
 800ddc0:	d41f      	bmi.n	800de02 <_malloc_r+0xd6>
 800ddc2:	2a0b      	cmp	r2, #11
 800ddc4:	d917      	bls.n	800ddf6 <_malloc_r+0xca>
 800ddc6:	1961      	adds	r1, r4, r5
 800ddc8:	42a3      	cmp	r3, r4
 800ddca:	6025      	str	r5, [r4, #0]
 800ddcc:	bf18      	it	ne
 800ddce:	6059      	strne	r1, [r3, #4]
 800ddd0:	6863      	ldr	r3, [r4, #4]
 800ddd2:	bf08      	it	eq
 800ddd4:	f8c8 1000 	streq.w	r1, [r8]
 800ddd8:	5162      	str	r2, [r4, r5]
 800ddda:	604b      	str	r3, [r1, #4]
 800dddc:	4638      	mov	r0, r7
 800ddde:	f104 060b 	add.w	r6, r4, #11
 800dde2:	f000 f829 	bl	800de38 <__malloc_unlock>
 800dde6:	f026 0607 	bic.w	r6, r6, #7
 800ddea:	1d23      	adds	r3, r4, #4
 800ddec:	1af2      	subs	r2, r6, r3
 800ddee:	d0ae      	beq.n	800dd4e <_malloc_r+0x22>
 800ddf0:	1b9b      	subs	r3, r3, r6
 800ddf2:	50a3      	str	r3, [r4, r2]
 800ddf4:	e7ab      	b.n	800dd4e <_malloc_r+0x22>
 800ddf6:	42a3      	cmp	r3, r4
 800ddf8:	6862      	ldr	r2, [r4, #4]
 800ddfa:	d1dd      	bne.n	800ddb8 <_malloc_r+0x8c>
 800ddfc:	f8c8 2000 	str.w	r2, [r8]
 800de00:	e7ec      	b.n	800dddc <_malloc_r+0xb0>
 800de02:	4623      	mov	r3, r4
 800de04:	6864      	ldr	r4, [r4, #4]
 800de06:	e7ac      	b.n	800dd62 <_malloc_r+0x36>
 800de08:	4634      	mov	r4, r6
 800de0a:	6876      	ldr	r6, [r6, #4]
 800de0c:	e7b4      	b.n	800dd78 <_malloc_r+0x4c>
 800de0e:	4613      	mov	r3, r2
 800de10:	e7cc      	b.n	800ddac <_malloc_r+0x80>
 800de12:	230c      	movs	r3, #12
 800de14:	603b      	str	r3, [r7, #0]
 800de16:	4638      	mov	r0, r7
 800de18:	f000 f80e 	bl	800de38 <__malloc_unlock>
 800de1c:	e797      	b.n	800dd4e <_malloc_r+0x22>
 800de1e:	6025      	str	r5, [r4, #0]
 800de20:	e7dc      	b.n	800dddc <_malloc_r+0xb0>
 800de22:	605b      	str	r3, [r3, #4]
 800de24:	deff      	udf	#255	; 0xff
 800de26:	bf00      	nop
 800de28:	2000080c 	.word	0x2000080c

0800de2c <__malloc_lock>:
 800de2c:	4801      	ldr	r0, [pc, #4]	; (800de34 <__malloc_lock+0x8>)
 800de2e:	f7ff b885 	b.w	800cf3c <__retarget_lock_acquire_recursive>
 800de32:	bf00      	nop
 800de34:	20000808 	.word	0x20000808

0800de38 <__malloc_unlock>:
 800de38:	4801      	ldr	r0, [pc, #4]	; (800de40 <__malloc_unlock+0x8>)
 800de3a:	f7ff b880 	b.w	800cf3e <__retarget_lock_release_recursive>
 800de3e:	bf00      	nop
 800de40:	20000808 	.word	0x20000808

0800de44 <_Balloc>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	69c6      	ldr	r6, [r0, #28]
 800de48:	4604      	mov	r4, r0
 800de4a:	460d      	mov	r5, r1
 800de4c:	b976      	cbnz	r6, 800de6c <_Balloc+0x28>
 800de4e:	2010      	movs	r0, #16
 800de50:	f7ff ff44 	bl	800dcdc <malloc>
 800de54:	4602      	mov	r2, r0
 800de56:	61e0      	str	r0, [r4, #28]
 800de58:	b920      	cbnz	r0, 800de64 <_Balloc+0x20>
 800de5a:	4b18      	ldr	r3, [pc, #96]	; (800debc <_Balloc+0x78>)
 800de5c:	4818      	ldr	r0, [pc, #96]	; (800dec0 <_Balloc+0x7c>)
 800de5e:	216b      	movs	r1, #107	; 0x6b
 800de60:	f001 ff66 	bl	800fd30 <__assert_func>
 800de64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de68:	6006      	str	r6, [r0, #0]
 800de6a:	60c6      	str	r6, [r0, #12]
 800de6c:	69e6      	ldr	r6, [r4, #28]
 800de6e:	68f3      	ldr	r3, [r6, #12]
 800de70:	b183      	cbz	r3, 800de94 <_Balloc+0x50>
 800de72:	69e3      	ldr	r3, [r4, #28]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de7a:	b9b8      	cbnz	r0, 800deac <_Balloc+0x68>
 800de7c:	2101      	movs	r1, #1
 800de7e:	fa01 f605 	lsl.w	r6, r1, r5
 800de82:	1d72      	adds	r2, r6, #5
 800de84:	0092      	lsls	r2, r2, #2
 800de86:	4620      	mov	r0, r4
 800de88:	f001 ff70 	bl	800fd6c <_calloc_r>
 800de8c:	b160      	cbz	r0, 800dea8 <_Balloc+0x64>
 800de8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de92:	e00e      	b.n	800deb2 <_Balloc+0x6e>
 800de94:	2221      	movs	r2, #33	; 0x21
 800de96:	2104      	movs	r1, #4
 800de98:	4620      	mov	r0, r4
 800de9a:	f001 ff67 	bl	800fd6c <_calloc_r>
 800de9e:	69e3      	ldr	r3, [r4, #28]
 800dea0:	60f0      	str	r0, [r6, #12]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1e4      	bne.n	800de72 <_Balloc+0x2e>
 800dea8:	2000      	movs	r0, #0
 800deaa:	bd70      	pop	{r4, r5, r6, pc}
 800deac:	6802      	ldr	r2, [r0, #0]
 800deae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800deb2:	2300      	movs	r3, #0
 800deb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800deb8:	e7f7      	b.n	800deaa <_Balloc+0x66>
 800deba:	bf00      	nop
 800debc:	08011af6 	.word	0x08011af6
 800dec0:	08011b76 	.word	0x08011b76

0800dec4 <_Bfree>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	69c6      	ldr	r6, [r0, #28]
 800dec8:	4605      	mov	r5, r0
 800deca:	460c      	mov	r4, r1
 800decc:	b976      	cbnz	r6, 800deec <_Bfree+0x28>
 800dece:	2010      	movs	r0, #16
 800ded0:	f7ff ff04 	bl	800dcdc <malloc>
 800ded4:	4602      	mov	r2, r0
 800ded6:	61e8      	str	r0, [r5, #28]
 800ded8:	b920      	cbnz	r0, 800dee4 <_Bfree+0x20>
 800deda:	4b09      	ldr	r3, [pc, #36]	; (800df00 <_Bfree+0x3c>)
 800dedc:	4809      	ldr	r0, [pc, #36]	; (800df04 <_Bfree+0x40>)
 800dede:	218f      	movs	r1, #143	; 0x8f
 800dee0:	f001 ff26 	bl	800fd30 <__assert_func>
 800dee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee8:	6006      	str	r6, [r0, #0]
 800deea:	60c6      	str	r6, [r0, #12]
 800deec:	b13c      	cbz	r4, 800defe <_Bfree+0x3a>
 800deee:	69eb      	ldr	r3, [r5, #28]
 800def0:	6862      	ldr	r2, [r4, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800def8:	6021      	str	r1, [r4, #0]
 800defa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	08011af6 	.word	0x08011af6
 800df04:	08011b76 	.word	0x08011b76

0800df08 <__multadd>:
 800df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0c:	690d      	ldr	r5, [r1, #16]
 800df0e:	4607      	mov	r7, r0
 800df10:	460c      	mov	r4, r1
 800df12:	461e      	mov	r6, r3
 800df14:	f101 0c14 	add.w	ip, r1, #20
 800df18:	2000      	movs	r0, #0
 800df1a:	f8dc 3000 	ldr.w	r3, [ip]
 800df1e:	b299      	uxth	r1, r3
 800df20:	fb02 6101 	mla	r1, r2, r1, r6
 800df24:	0c1e      	lsrs	r6, r3, #16
 800df26:	0c0b      	lsrs	r3, r1, #16
 800df28:	fb02 3306 	mla	r3, r2, r6, r3
 800df2c:	b289      	uxth	r1, r1
 800df2e:	3001      	adds	r0, #1
 800df30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df34:	4285      	cmp	r5, r0
 800df36:	f84c 1b04 	str.w	r1, [ip], #4
 800df3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df3e:	dcec      	bgt.n	800df1a <__multadd+0x12>
 800df40:	b30e      	cbz	r6, 800df86 <__multadd+0x7e>
 800df42:	68a3      	ldr	r3, [r4, #8]
 800df44:	42ab      	cmp	r3, r5
 800df46:	dc19      	bgt.n	800df7c <__multadd+0x74>
 800df48:	6861      	ldr	r1, [r4, #4]
 800df4a:	4638      	mov	r0, r7
 800df4c:	3101      	adds	r1, #1
 800df4e:	f7ff ff79 	bl	800de44 <_Balloc>
 800df52:	4680      	mov	r8, r0
 800df54:	b928      	cbnz	r0, 800df62 <__multadd+0x5a>
 800df56:	4602      	mov	r2, r0
 800df58:	4b0c      	ldr	r3, [pc, #48]	; (800df8c <__multadd+0x84>)
 800df5a:	480d      	ldr	r0, [pc, #52]	; (800df90 <__multadd+0x88>)
 800df5c:	21ba      	movs	r1, #186	; 0xba
 800df5e:	f001 fee7 	bl	800fd30 <__assert_func>
 800df62:	6922      	ldr	r2, [r4, #16]
 800df64:	3202      	adds	r2, #2
 800df66:	f104 010c 	add.w	r1, r4, #12
 800df6a:	0092      	lsls	r2, r2, #2
 800df6c:	300c      	adds	r0, #12
 800df6e:	f001 fec9 	bl	800fd04 <memcpy>
 800df72:	4621      	mov	r1, r4
 800df74:	4638      	mov	r0, r7
 800df76:	f7ff ffa5 	bl	800dec4 <_Bfree>
 800df7a:	4644      	mov	r4, r8
 800df7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df80:	3501      	adds	r5, #1
 800df82:	615e      	str	r6, [r3, #20]
 800df84:	6125      	str	r5, [r4, #16]
 800df86:	4620      	mov	r0, r4
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8c:	08011b65 	.word	0x08011b65
 800df90:	08011b76 	.word	0x08011b76

0800df94 <__s2b>:
 800df94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df98:	460c      	mov	r4, r1
 800df9a:	4615      	mov	r5, r2
 800df9c:	461f      	mov	r7, r3
 800df9e:	2209      	movs	r2, #9
 800dfa0:	3308      	adds	r3, #8
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	2201      	movs	r2, #1
 800dfac:	429a      	cmp	r2, r3
 800dfae:	db09      	blt.n	800dfc4 <__s2b+0x30>
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f7ff ff47 	bl	800de44 <_Balloc>
 800dfb6:	b940      	cbnz	r0, 800dfca <__s2b+0x36>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	4b19      	ldr	r3, [pc, #100]	; (800e020 <__s2b+0x8c>)
 800dfbc:	4819      	ldr	r0, [pc, #100]	; (800e024 <__s2b+0x90>)
 800dfbe:	21d3      	movs	r1, #211	; 0xd3
 800dfc0:	f001 feb6 	bl	800fd30 <__assert_func>
 800dfc4:	0052      	lsls	r2, r2, #1
 800dfc6:	3101      	adds	r1, #1
 800dfc8:	e7f0      	b.n	800dfac <__s2b+0x18>
 800dfca:	9b08      	ldr	r3, [sp, #32]
 800dfcc:	6143      	str	r3, [r0, #20]
 800dfce:	2d09      	cmp	r5, #9
 800dfd0:	f04f 0301 	mov.w	r3, #1
 800dfd4:	6103      	str	r3, [r0, #16]
 800dfd6:	dd16      	ble.n	800e006 <__s2b+0x72>
 800dfd8:	f104 0909 	add.w	r9, r4, #9
 800dfdc:	46c8      	mov	r8, r9
 800dfde:	442c      	add	r4, r5
 800dfe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dfe4:	4601      	mov	r1, r0
 800dfe6:	3b30      	subs	r3, #48	; 0x30
 800dfe8:	220a      	movs	r2, #10
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7ff ff8c 	bl	800df08 <__multadd>
 800dff0:	45a0      	cmp	r8, r4
 800dff2:	d1f5      	bne.n	800dfe0 <__s2b+0x4c>
 800dff4:	f1a5 0408 	sub.w	r4, r5, #8
 800dff8:	444c      	add	r4, r9
 800dffa:	1b2d      	subs	r5, r5, r4
 800dffc:	1963      	adds	r3, r4, r5
 800dffe:	42bb      	cmp	r3, r7
 800e000:	db04      	blt.n	800e00c <__s2b+0x78>
 800e002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e006:	340a      	adds	r4, #10
 800e008:	2509      	movs	r5, #9
 800e00a:	e7f6      	b.n	800dffa <__s2b+0x66>
 800e00c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e010:	4601      	mov	r1, r0
 800e012:	3b30      	subs	r3, #48	; 0x30
 800e014:	220a      	movs	r2, #10
 800e016:	4630      	mov	r0, r6
 800e018:	f7ff ff76 	bl	800df08 <__multadd>
 800e01c:	e7ee      	b.n	800dffc <__s2b+0x68>
 800e01e:	bf00      	nop
 800e020:	08011b65 	.word	0x08011b65
 800e024:	08011b76 	.word	0x08011b76

0800e028 <__hi0bits>:
 800e028:	0c03      	lsrs	r3, r0, #16
 800e02a:	041b      	lsls	r3, r3, #16
 800e02c:	b9d3      	cbnz	r3, 800e064 <__hi0bits+0x3c>
 800e02e:	0400      	lsls	r0, r0, #16
 800e030:	2310      	movs	r3, #16
 800e032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e036:	bf04      	itt	eq
 800e038:	0200      	lsleq	r0, r0, #8
 800e03a:	3308      	addeq	r3, #8
 800e03c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e040:	bf04      	itt	eq
 800e042:	0100      	lsleq	r0, r0, #4
 800e044:	3304      	addeq	r3, #4
 800e046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e04a:	bf04      	itt	eq
 800e04c:	0080      	lsleq	r0, r0, #2
 800e04e:	3302      	addeq	r3, #2
 800e050:	2800      	cmp	r0, #0
 800e052:	db05      	blt.n	800e060 <__hi0bits+0x38>
 800e054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e058:	f103 0301 	add.w	r3, r3, #1
 800e05c:	bf08      	it	eq
 800e05e:	2320      	moveq	r3, #32
 800e060:	4618      	mov	r0, r3
 800e062:	4770      	bx	lr
 800e064:	2300      	movs	r3, #0
 800e066:	e7e4      	b.n	800e032 <__hi0bits+0xa>

0800e068 <__lo0bits>:
 800e068:	6803      	ldr	r3, [r0, #0]
 800e06a:	f013 0207 	ands.w	r2, r3, #7
 800e06e:	d00c      	beq.n	800e08a <__lo0bits+0x22>
 800e070:	07d9      	lsls	r1, r3, #31
 800e072:	d422      	bmi.n	800e0ba <__lo0bits+0x52>
 800e074:	079a      	lsls	r2, r3, #30
 800e076:	bf49      	itett	mi
 800e078:	085b      	lsrmi	r3, r3, #1
 800e07a:	089b      	lsrpl	r3, r3, #2
 800e07c:	6003      	strmi	r3, [r0, #0]
 800e07e:	2201      	movmi	r2, #1
 800e080:	bf5c      	itt	pl
 800e082:	6003      	strpl	r3, [r0, #0]
 800e084:	2202      	movpl	r2, #2
 800e086:	4610      	mov	r0, r2
 800e088:	4770      	bx	lr
 800e08a:	b299      	uxth	r1, r3
 800e08c:	b909      	cbnz	r1, 800e092 <__lo0bits+0x2a>
 800e08e:	0c1b      	lsrs	r3, r3, #16
 800e090:	2210      	movs	r2, #16
 800e092:	b2d9      	uxtb	r1, r3
 800e094:	b909      	cbnz	r1, 800e09a <__lo0bits+0x32>
 800e096:	3208      	adds	r2, #8
 800e098:	0a1b      	lsrs	r3, r3, #8
 800e09a:	0719      	lsls	r1, r3, #28
 800e09c:	bf04      	itt	eq
 800e09e:	091b      	lsreq	r3, r3, #4
 800e0a0:	3204      	addeq	r2, #4
 800e0a2:	0799      	lsls	r1, r3, #30
 800e0a4:	bf04      	itt	eq
 800e0a6:	089b      	lsreq	r3, r3, #2
 800e0a8:	3202      	addeq	r2, #2
 800e0aa:	07d9      	lsls	r1, r3, #31
 800e0ac:	d403      	bmi.n	800e0b6 <__lo0bits+0x4e>
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	f102 0201 	add.w	r2, r2, #1
 800e0b4:	d003      	beq.n	800e0be <__lo0bits+0x56>
 800e0b6:	6003      	str	r3, [r0, #0]
 800e0b8:	e7e5      	b.n	800e086 <__lo0bits+0x1e>
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	e7e3      	b.n	800e086 <__lo0bits+0x1e>
 800e0be:	2220      	movs	r2, #32
 800e0c0:	e7e1      	b.n	800e086 <__lo0bits+0x1e>
	...

0800e0c4 <__i2b>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	f7ff febb 	bl	800de44 <_Balloc>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	b928      	cbnz	r0, 800e0de <__i2b+0x1a>
 800e0d2:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <__i2b+0x24>)
 800e0d4:	4805      	ldr	r0, [pc, #20]	; (800e0ec <__i2b+0x28>)
 800e0d6:	f240 1145 	movw	r1, #325	; 0x145
 800e0da:	f001 fe29 	bl	800fd30 <__assert_func>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	6144      	str	r4, [r0, #20]
 800e0e2:	6103      	str	r3, [r0, #16]
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	bf00      	nop
 800e0e8:	08011b65 	.word	0x08011b65
 800e0ec:	08011b76 	.word	0x08011b76

0800e0f0 <__multiply>:
 800e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f4:	4691      	mov	r9, r2
 800e0f6:	690a      	ldr	r2, [r1, #16]
 800e0f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	bfb8      	it	lt
 800e100:	460b      	movlt	r3, r1
 800e102:	460c      	mov	r4, r1
 800e104:	bfbc      	itt	lt
 800e106:	464c      	movlt	r4, r9
 800e108:	4699      	movlt	r9, r3
 800e10a:	6927      	ldr	r7, [r4, #16]
 800e10c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e110:	68a3      	ldr	r3, [r4, #8]
 800e112:	6861      	ldr	r1, [r4, #4]
 800e114:	eb07 060a 	add.w	r6, r7, sl
 800e118:	42b3      	cmp	r3, r6
 800e11a:	b085      	sub	sp, #20
 800e11c:	bfb8      	it	lt
 800e11e:	3101      	addlt	r1, #1
 800e120:	f7ff fe90 	bl	800de44 <_Balloc>
 800e124:	b930      	cbnz	r0, 800e134 <__multiply+0x44>
 800e126:	4602      	mov	r2, r0
 800e128:	4b44      	ldr	r3, [pc, #272]	; (800e23c <__multiply+0x14c>)
 800e12a:	4845      	ldr	r0, [pc, #276]	; (800e240 <__multiply+0x150>)
 800e12c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e130:	f001 fdfe 	bl	800fd30 <__assert_func>
 800e134:	f100 0514 	add.w	r5, r0, #20
 800e138:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e13c:	462b      	mov	r3, r5
 800e13e:	2200      	movs	r2, #0
 800e140:	4543      	cmp	r3, r8
 800e142:	d321      	bcc.n	800e188 <__multiply+0x98>
 800e144:	f104 0314 	add.w	r3, r4, #20
 800e148:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e14c:	f109 0314 	add.w	r3, r9, #20
 800e150:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e154:	9202      	str	r2, [sp, #8]
 800e156:	1b3a      	subs	r2, r7, r4
 800e158:	3a15      	subs	r2, #21
 800e15a:	f022 0203 	bic.w	r2, r2, #3
 800e15e:	3204      	adds	r2, #4
 800e160:	f104 0115 	add.w	r1, r4, #21
 800e164:	428f      	cmp	r7, r1
 800e166:	bf38      	it	cc
 800e168:	2204      	movcc	r2, #4
 800e16a:	9201      	str	r2, [sp, #4]
 800e16c:	9a02      	ldr	r2, [sp, #8]
 800e16e:	9303      	str	r3, [sp, #12]
 800e170:	429a      	cmp	r2, r3
 800e172:	d80c      	bhi.n	800e18e <__multiply+0x9e>
 800e174:	2e00      	cmp	r6, #0
 800e176:	dd03      	ble.n	800e180 <__multiply+0x90>
 800e178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d05b      	beq.n	800e238 <__multiply+0x148>
 800e180:	6106      	str	r6, [r0, #16]
 800e182:	b005      	add	sp, #20
 800e184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e188:	f843 2b04 	str.w	r2, [r3], #4
 800e18c:	e7d8      	b.n	800e140 <__multiply+0x50>
 800e18e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e192:	f1ba 0f00 	cmp.w	sl, #0
 800e196:	d024      	beq.n	800e1e2 <__multiply+0xf2>
 800e198:	f104 0e14 	add.w	lr, r4, #20
 800e19c:	46a9      	mov	r9, r5
 800e19e:	f04f 0c00 	mov.w	ip, #0
 800e1a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e1a6:	f8d9 1000 	ldr.w	r1, [r9]
 800e1aa:	fa1f fb82 	uxth.w	fp, r2
 800e1ae:	b289      	uxth	r1, r1
 800e1b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e1b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800e1bc:	4461      	add	r1, ip
 800e1be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e1c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e1ca:	b289      	uxth	r1, r1
 800e1cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1d0:	4577      	cmp	r7, lr
 800e1d2:	f849 1b04 	str.w	r1, [r9], #4
 800e1d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1da:	d8e2      	bhi.n	800e1a2 <__multiply+0xb2>
 800e1dc:	9a01      	ldr	r2, [sp, #4]
 800e1de:	f845 c002 	str.w	ip, [r5, r2]
 800e1e2:	9a03      	ldr	r2, [sp, #12]
 800e1e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	f1b9 0f00 	cmp.w	r9, #0
 800e1ee:	d021      	beq.n	800e234 <__multiply+0x144>
 800e1f0:	6829      	ldr	r1, [r5, #0]
 800e1f2:	f104 0c14 	add.w	ip, r4, #20
 800e1f6:	46ae      	mov	lr, r5
 800e1f8:	f04f 0a00 	mov.w	sl, #0
 800e1fc:	f8bc b000 	ldrh.w	fp, [ip]
 800e200:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e204:	fb09 220b 	mla	r2, r9, fp, r2
 800e208:	4452      	add	r2, sl
 800e20a:	b289      	uxth	r1, r1
 800e20c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e210:	f84e 1b04 	str.w	r1, [lr], #4
 800e214:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e218:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e21c:	f8be 1000 	ldrh.w	r1, [lr]
 800e220:	fb09 110a 	mla	r1, r9, sl, r1
 800e224:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e228:	4567      	cmp	r7, ip
 800e22a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e22e:	d8e5      	bhi.n	800e1fc <__multiply+0x10c>
 800e230:	9a01      	ldr	r2, [sp, #4]
 800e232:	50a9      	str	r1, [r5, r2]
 800e234:	3504      	adds	r5, #4
 800e236:	e799      	b.n	800e16c <__multiply+0x7c>
 800e238:	3e01      	subs	r6, #1
 800e23a:	e79b      	b.n	800e174 <__multiply+0x84>
 800e23c:	08011b65 	.word	0x08011b65
 800e240:	08011b76 	.word	0x08011b76

0800e244 <__pow5mult>:
 800e244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e248:	4615      	mov	r5, r2
 800e24a:	f012 0203 	ands.w	r2, r2, #3
 800e24e:	4606      	mov	r6, r0
 800e250:	460f      	mov	r7, r1
 800e252:	d007      	beq.n	800e264 <__pow5mult+0x20>
 800e254:	4c25      	ldr	r4, [pc, #148]	; (800e2ec <__pow5mult+0xa8>)
 800e256:	3a01      	subs	r2, #1
 800e258:	2300      	movs	r3, #0
 800e25a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e25e:	f7ff fe53 	bl	800df08 <__multadd>
 800e262:	4607      	mov	r7, r0
 800e264:	10ad      	asrs	r5, r5, #2
 800e266:	d03d      	beq.n	800e2e4 <__pow5mult+0xa0>
 800e268:	69f4      	ldr	r4, [r6, #28]
 800e26a:	b97c      	cbnz	r4, 800e28c <__pow5mult+0x48>
 800e26c:	2010      	movs	r0, #16
 800e26e:	f7ff fd35 	bl	800dcdc <malloc>
 800e272:	4602      	mov	r2, r0
 800e274:	61f0      	str	r0, [r6, #28]
 800e276:	b928      	cbnz	r0, 800e284 <__pow5mult+0x40>
 800e278:	4b1d      	ldr	r3, [pc, #116]	; (800e2f0 <__pow5mult+0xac>)
 800e27a:	481e      	ldr	r0, [pc, #120]	; (800e2f4 <__pow5mult+0xb0>)
 800e27c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e280:	f001 fd56 	bl	800fd30 <__assert_func>
 800e284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e288:	6004      	str	r4, [r0, #0]
 800e28a:	60c4      	str	r4, [r0, #12]
 800e28c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e294:	b94c      	cbnz	r4, 800e2aa <__pow5mult+0x66>
 800e296:	f240 2171 	movw	r1, #625	; 0x271
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7ff ff12 	bl	800e0c4 <__i2b>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	f04f 0900 	mov.w	r9, #0
 800e2ae:	07eb      	lsls	r3, r5, #31
 800e2b0:	d50a      	bpl.n	800e2c8 <__pow5mult+0x84>
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f7ff ff1a 	bl	800e0f0 <__multiply>
 800e2bc:	4639      	mov	r1, r7
 800e2be:	4680      	mov	r8, r0
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff fdff 	bl	800dec4 <_Bfree>
 800e2c6:	4647      	mov	r7, r8
 800e2c8:	106d      	asrs	r5, r5, #1
 800e2ca:	d00b      	beq.n	800e2e4 <__pow5mult+0xa0>
 800e2cc:	6820      	ldr	r0, [r4, #0]
 800e2ce:	b938      	cbnz	r0, 800e2e0 <__pow5mult+0x9c>
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7ff ff0b 	bl	800e0f0 <__multiply>
 800e2da:	6020      	str	r0, [r4, #0]
 800e2dc:	f8c0 9000 	str.w	r9, [r0]
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	e7e4      	b.n	800e2ae <__pow5mult+0x6a>
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ea:	bf00      	nop
 800e2ec:	08011cc0 	.word	0x08011cc0
 800e2f0:	08011af6 	.word	0x08011af6
 800e2f4:	08011b76 	.word	0x08011b76

0800e2f8 <__lshift>:
 800e2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	6849      	ldr	r1, [r1, #4]
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	4607      	mov	r7, r0
 800e30a:	4691      	mov	r9, r2
 800e30c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e310:	f108 0601 	add.w	r6, r8, #1
 800e314:	42b3      	cmp	r3, r6
 800e316:	db0b      	blt.n	800e330 <__lshift+0x38>
 800e318:	4638      	mov	r0, r7
 800e31a:	f7ff fd93 	bl	800de44 <_Balloc>
 800e31e:	4605      	mov	r5, r0
 800e320:	b948      	cbnz	r0, 800e336 <__lshift+0x3e>
 800e322:	4602      	mov	r2, r0
 800e324:	4b28      	ldr	r3, [pc, #160]	; (800e3c8 <__lshift+0xd0>)
 800e326:	4829      	ldr	r0, [pc, #164]	; (800e3cc <__lshift+0xd4>)
 800e328:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e32c:	f001 fd00 	bl	800fd30 <__assert_func>
 800e330:	3101      	adds	r1, #1
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	e7ee      	b.n	800e314 <__lshift+0x1c>
 800e336:	2300      	movs	r3, #0
 800e338:	f100 0114 	add.w	r1, r0, #20
 800e33c:	f100 0210 	add.w	r2, r0, #16
 800e340:	4618      	mov	r0, r3
 800e342:	4553      	cmp	r3, sl
 800e344:	db33      	blt.n	800e3ae <__lshift+0xb6>
 800e346:	6920      	ldr	r0, [r4, #16]
 800e348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e34c:	f104 0314 	add.w	r3, r4, #20
 800e350:	f019 091f 	ands.w	r9, r9, #31
 800e354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e35c:	d02b      	beq.n	800e3b6 <__lshift+0xbe>
 800e35e:	f1c9 0e20 	rsb	lr, r9, #32
 800e362:	468a      	mov	sl, r1
 800e364:	2200      	movs	r2, #0
 800e366:	6818      	ldr	r0, [r3, #0]
 800e368:	fa00 f009 	lsl.w	r0, r0, r9
 800e36c:	4310      	orrs	r0, r2
 800e36e:	f84a 0b04 	str.w	r0, [sl], #4
 800e372:	f853 2b04 	ldr.w	r2, [r3], #4
 800e376:	459c      	cmp	ip, r3
 800e378:	fa22 f20e 	lsr.w	r2, r2, lr
 800e37c:	d8f3      	bhi.n	800e366 <__lshift+0x6e>
 800e37e:	ebac 0304 	sub.w	r3, ip, r4
 800e382:	3b15      	subs	r3, #21
 800e384:	f023 0303 	bic.w	r3, r3, #3
 800e388:	3304      	adds	r3, #4
 800e38a:	f104 0015 	add.w	r0, r4, #21
 800e38e:	4584      	cmp	ip, r0
 800e390:	bf38      	it	cc
 800e392:	2304      	movcc	r3, #4
 800e394:	50ca      	str	r2, [r1, r3]
 800e396:	b10a      	cbz	r2, 800e39c <__lshift+0xa4>
 800e398:	f108 0602 	add.w	r6, r8, #2
 800e39c:	3e01      	subs	r6, #1
 800e39e:	4638      	mov	r0, r7
 800e3a0:	612e      	str	r6, [r5, #16]
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	f7ff fd8e 	bl	800dec4 <_Bfree>
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	e7c5      	b.n	800e342 <__lshift+0x4a>
 800e3b6:	3904      	subs	r1, #4
 800e3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3c0:	459c      	cmp	ip, r3
 800e3c2:	d8f9      	bhi.n	800e3b8 <__lshift+0xc0>
 800e3c4:	e7ea      	b.n	800e39c <__lshift+0xa4>
 800e3c6:	bf00      	nop
 800e3c8:	08011b65 	.word	0x08011b65
 800e3cc:	08011b76 	.word	0x08011b76

0800e3d0 <__mcmp>:
 800e3d0:	b530      	push	{r4, r5, lr}
 800e3d2:	6902      	ldr	r2, [r0, #16]
 800e3d4:	690c      	ldr	r4, [r1, #16]
 800e3d6:	1b12      	subs	r2, r2, r4
 800e3d8:	d10e      	bne.n	800e3f8 <__mcmp+0x28>
 800e3da:	f100 0314 	add.w	r3, r0, #20
 800e3de:	3114      	adds	r1, #20
 800e3e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3f0:	42a5      	cmp	r5, r4
 800e3f2:	d003      	beq.n	800e3fc <__mcmp+0x2c>
 800e3f4:	d305      	bcc.n	800e402 <__mcmp+0x32>
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	bd30      	pop	{r4, r5, pc}
 800e3fc:	4283      	cmp	r3, r0
 800e3fe:	d3f3      	bcc.n	800e3e8 <__mcmp+0x18>
 800e400:	e7fa      	b.n	800e3f8 <__mcmp+0x28>
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	e7f7      	b.n	800e3f8 <__mcmp+0x28>

0800e408 <__mdiff>:
 800e408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	460c      	mov	r4, r1
 800e40e:	4606      	mov	r6, r0
 800e410:	4611      	mov	r1, r2
 800e412:	4620      	mov	r0, r4
 800e414:	4690      	mov	r8, r2
 800e416:	f7ff ffdb 	bl	800e3d0 <__mcmp>
 800e41a:	1e05      	subs	r5, r0, #0
 800e41c:	d110      	bne.n	800e440 <__mdiff+0x38>
 800e41e:	4629      	mov	r1, r5
 800e420:	4630      	mov	r0, r6
 800e422:	f7ff fd0f 	bl	800de44 <_Balloc>
 800e426:	b930      	cbnz	r0, 800e436 <__mdiff+0x2e>
 800e428:	4b3a      	ldr	r3, [pc, #232]	; (800e514 <__mdiff+0x10c>)
 800e42a:	4602      	mov	r2, r0
 800e42c:	f240 2137 	movw	r1, #567	; 0x237
 800e430:	4839      	ldr	r0, [pc, #228]	; (800e518 <__mdiff+0x110>)
 800e432:	f001 fc7d 	bl	800fd30 <__assert_func>
 800e436:	2301      	movs	r3, #1
 800e438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e43c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e440:	bfa4      	itt	ge
 800e442:	4643      	movge	r3, r8
 800e444:	46a0      	movge	r8, r4
 800e446:	4630      	mov	r0, r6
 800e448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e44c:	bfa6      	itte	ge
 800e44e:	461c      	movge	r4, r3
 800e450:	2500      	movge	r5, #0
 800e452:	2501      	movlt	r5, #1
 800e454:	f7ff fcf6 	bl	800de44 <_Balloc>
 800e458:	b920      	cbnz	r0, 800e464 <__mdiff+0x5c>
 800e45a:	4b2e      	ldr	r3, [pc, #184]	; (800e514 <__mdiff+0x10c>)
 800e45c:	4602      	mov	r2, r0
 800e45e:	f240 2145 	movw	r1, #581	; 0x245
 800e462:	e7e5      	b.n	800e430 <__mdiff+0x28>
 800e464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e468:	6926      	ldr	r6, [r4, #16]
 800e46a:	60c5      	str	r5, [r0, #12]
 800e46c:	f104 0914 	add.w	r9, r4, #20
 800e470:	f108 0514 	add.w	r5, r8, #20
 800e474:	f100 0e14 	add.w	lr, r0, #20
 800e478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e47c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e480:	f108 0210 	add.w	r2, r8, #16
 800e484:	46f2      	mov	sl, lr
 800e486:	2100      	movs	r1, #0
 800e488:	f859 3b04 	ldr.w	r3, [r9], #4
 800e48c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e490:	fa11 f88b 	uxtah	r8, r1, fp
 800e494:	b299      	uxth	r1, r3
 800e496:	0c1b      	lsrs	r3, r3, #16
 800e498:	eba8 0801 	sub.w	r8, r8, r1
 800e49c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4a4:	fa1f f888 	uxth.w	r8, r8
 800e4a8:	1419      	asrs	r1, r3, #16
 800e4aa:	454e      	cmp	r6, r9
 800e4ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4b0:	f84a 3b04 	str.w	r3, [sl], #4
 800e4b4:	d8e8      	bhi.n	800e488 <__mdiff+0x80>
 800e4b6:	1b33      	subs	r3, r6, r4
 800e4b8:	3b15      	subs	r3, #21
 800e4ba:	f023 0303 	bic.w	r3, r3, #3
 800e4be:	3304      	adds	r3, #4
 800e4c0:	3415      	adds	r4, #21
 800e4c2:	42a6      	cmp	r6, r4
 800e4c4:	bf38      	it	cc
 800e4c6:	2304      	movcc	r3, #4
 800e4c8:	441d      	add	r5, r3
 800e4ca:	4473      	add	r3, lr
 800e4cc:	469e      	mov	lr, r3
 800e4ce:	462e      	mov	r6, r5
 800e4d0:	4566      	cmp	r6, ip
 800e4d2:	d30e      	bcc.n	800e4f2 <__mdiff+0xea>
 800e4d4:	f10c 0203 	add.w	r2, ip, #3
 800e4d8:	1b52      	subs	r2, r2, r5
 800e4da:	f022 0203 	bic.w	r2, r2, #3
 800e4de:	3d03      	subs	r5, #3
 800e4e0:	45ac      	cmp	ip, r5
 800e4e2:	bf38      	it	cc
 800e4e4:	2200      	movcc	r2, #0
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e4ec:	b17a      	cbz	r2, 800e50e <__mdiff+0x106>
 800e4ee:	6107      	str	r7, [r0, #16]
 800e4f0:	e7a4      	b.n	800e43c <__mdiff+0x34>
 800e4f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4f6:	fa11 f288 	uxtah	r2, r1, r8
 800e4fa:	1414      	asrs	r4, r2, #16
 800e4fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e500:	b292      	uxth	r2, r2
 800e502:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e506:	f84e 2b04 	str.w	r2, [lr], #4
 800e50a:	1421      	asrs	r1, r4, #16
 800e50c:	e7e0      	b.n	800e4d0 <__mdiff+0xc8>
 800e50e:	3f01      	subs	r7, #1
 800e510:	e7ea      	b.n	800e4e8 <__mdiff+0xe0>
 800e512:	bf00      	nop
 800e514:	08011b65 	.word	0x08011b65
 800e518:	08011b76 	.word	0x08011b76

0800e51c <__ulp>:
 800e51c:	b082      	sub	sp, #8
 800e51e:	ed8d 0b00 	vstr	d0, [sp]
 800e522:	9a01      	ldr	r2, [sp, #4]
 800e524:	4b0f      	ldr	r3, [pc, #60]	; (800e564 <__ulp+0x48>)
 800e526:	4013      	ands	r3, r2
 800e528:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dc08      	bgt.n	800e542 <__ulp+0x26>
 800e530:	425b      	negs	r3, r3
 800e532:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e536:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e53a:	da04      	bge.n	800e546 <__ulp+0x2a>
 800e53c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e540:	4113      	asrs	r3, r2
 800e542:	2200      	movs	r2, #0
 800e544:	e008      	b.n	800e558 <__ulp+0x3c>
 800e546:	f1a2 0314 	sub.w	r3, r2, #20
 800e54a:	2b1e      	cmp	r3, #30
 800e54c:	bfda      	itte	le
 800e54e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e552:	40da      	lsrle	r2, r3
 800e554:	2201      	movgt	r2, #1
 800e556:	2300      	movs	r3, #0
 800e558:	4619      	mov	r1, r3
 800e55a:	4610      	mov	r0, r2
 800e55c:	ec41 0b10 	vmov	d0, r0, r1
 800e560:	b002      	add	sp, #8
 800e562:	4770      	bx	lr
 800e564:	7ff00000 	.word	0x7ff00000

0800e568 <__b2d>:
 800e568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e56c:	6906      	ldr	r6, [r0, #16]
 800e56e:	f100 0814 	add.w	r8, r0, #20
 800e572:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e576:	1f37      	subs	r7, r6, #4
 800e578:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e57c:	4610      	mov	r0, r2
 800e57e:	f7ff fd53 	bl	800e028 <__hi0bits>
 800e582:	f1c0 0320 	rsb	r3, r0, #32
 800e586:	280a      	cmp	r0, #10
 800e588:	600b      	str	r3, [r1, #0]
 800e58a:	491b      	ldr	r1, [pc, #108]	; (800e5f8 <__b2d+0x90>)
 800e58c:	dc15      	bgt.n	800e5ba <__b2d+0x52>
 800e58e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e592:	fa22 f30c 	lsr.w	r3, r2, ip
 800e596:	45b8      	cmp	r8, r7
 800e598:	ea43 0501 	orr.w	r5, r3, r1
 800e59c:	bf34      	ite	cc
 800e59e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5a2:	2300      	movcs	r3, #0
 800e5a4:	3015      	adds	r0, #21
 800e5a6:	fa02 f000 	lsl.w	r0, r2, r0
 800e5aa:	fa23 f30c 	lsr.w	r3, r3, ip
 800e5ae:	4303      	orrs	r3, r0
 800e5b0:	461c      	mov	r4, r3
 800e5b2:	ec45 4b10 	vmov	d0, r4, r5
 800e5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ba:	45b8      	cmp	r8, r7
 800e5bc:	bf3a      	itte	cc
 800e5be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5c2:	f1a6 0708 	subcc.w	r7, r6, #8
 800e5c6:	2300      	movcs	r3, #0
 800e5c8:	380b      	subs	r0, #11
 800e5ca:	d012      	beq.n	800e5f2 <__b2d+0x8a>
 800e5cc:	f1c0 0120 	rsb	r1, r0, #32
 800e5d0:	fa23 f401 	lsr.w	r4, r3, r1
 800e5d4:	4082      	lsls	r2, r0
 800e5d6:	4322      	orrs	r2, r4
 800e5d8:	4547      	cmp	r7, r8
 800e5da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e5de:	bf8c      	ite	hi
 800e5e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e5e4:	2200      	movls	r2, #0
 800e5e6:	4083      	lsls	r3, r0
 800e5e8:	40ca      	lsrs	r2, r1
 800e5ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	e7de      	b.n	800e5b0 <__b2d+0x48>
 800e5f2:	ea42 0501 	orr.w	r5, r2, r1
 800e5f6:	e7db      	b.n	800e5b0 <__b2d+0x48>
 800e5f8:	3ff00000 	.word	0x3ff00000

0800e5fc <__d2b>:
 800e5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e600:	460f      	mov	r7, r1
 800e602:	2101      	movs	r1, #1
 800e604:	ec59 8b10 	vmov	r8, r9, d0
 800e608:	4616      	mov	r6, r2
 800e60a:	f7ff fc1b 	bl	800de44 <_Balloc>
 800e60e:	4604      	mov	r4, r0
 800e610:	b930      	cbnz	r0, 800e620 <__d2b+0x24>
 800e612:	4602      	mov	r2, r0
 800e614:	4b24      	ldr	r3, [pc, #144]	; (800e6a8 <__d2b+0xac>)
 800e616:	4825      	ldr	r0, [pc, #148]	; (800e6ac <__d2b+0xb0>)
 800e618:	f240 310f 	movw	r1, #783	; 0x30f
 800e61c:	f001 fb88 	bl	800fd30 <__assert_func>
 800e620:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e628:	bb2d      	cbnz	r5, 800e676 <__d2b+0x7a>
 800e62a:	9301      	str	r3, [sp, #4]
 800e62c:	f1b8 0300 	subs.w	r3, r8, #0
 800e630:	d026      	beq.n	800e680 <__d2b+0x84>
 800e632:	4668      	mov	r0, sp
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	f7ff fd17 	bl	800e068 <__lo0bits>
 800e63a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e63e:	b1e8      	cbz	r0, 800e67c <__d2b+0x80>
 800e640:	f1c0 0320 	rsb	r3, r0, #32
 800e644:	fa02 f303 	lsl.w	r3, r2, r3
 800e648:	430b      	orrs	r3, r1
 800e64a:	40c2      	lsrs	r2, r0
 800e64c:	6163      	str	r3, [r4, #20]
 800e64e:	9201      	str	r2, [sp, #4]
 800e650:	9b01      	ldr	r3, [sp, #4]
 800e652:	61a3      	str	r3, [r4, #24]
 800e654:	2b00      	cmp	r3, #0
 800e656:	bf14      	ite	ne
 800e658:	2202      	movne	r2, #2
 800e65a:	2201      	moveq	r2, #1
 800e65c:	6122      	str	r2, [r4, #16]
 800e65e:	b1bd      	cbz	r5, 800e690 <__d2b+0x94>
 800e660:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e664:	4405      	add	r5, r0
 800e666:	603d      	str	r5, [r7, #0]
 800e668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e66c:	6030      	str	r0, [r6, #0]
 800e66e:	4620      	mov	r0, r4
 800e670:	b003      	add	sp, #12
 800e672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e67a:	e7d6      	b.n	800e62a <__d2b+0x2e>
 800e67c:	6161      	str	r1, [r4, #20]
 800e67e:	e7e7      	b.n	800e650 <__d2b+0x54>
 800e680:	a801      	add	r0, sp, #4
 800e682:	f7ff fcf1 	bl	800e068 <__lo0bits>
 800e686:	9b01      	ldr	r3, [sp, #4]
 800e688:	6163      	str	r3, [r4, #20]
 800e68a:	3020      	adds	r0, #32
 800e68c:	2201      	movs	r2, #1
 800e68e:	e7e5      	b.n	800e65c <__d2b+0x60>
 800e690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e698:	6038      	str	r0, [r7, #0]
 800e69a:	6918      	ldr	r0, [r3, #16]
 800e69c:	f7ff fcc4 	bl	800e028 <__hi0bits>
 800e6a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6a4:	e7e2      	b.n	800e66c <__d2b+0x70>
 800e6a6:	bf00      	nop
 800e6a8:	08011b65 	.word	0x08011b65
 800e6ac:	08011b76 	.word	0x08011b76

0800e6b0 <__ratio>:
 800e6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	4688      	mov	r8, r1
 800e6b6:	4669      	mov	r1, sp
 800e6b8:	4681      	mov	r9, r0
 800e6ba:	f7ff ff55 	bl	800e568 <__b2d>
 800e6be:	a901      	add	r1, sp, #4
 800e6c0:	4640      	mov	r0, r8
 800e6c2:	ec55 4b10 	vmov	r4, r5, d0
 800e6c6:	f7ff ff4f 	bl	800e568 <__b2d>
 800e6ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e6d2:	eba3 0c02 	sub.w	ip, r3, r2
 800e6d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6da:	1a9b      	subs	r3, r3, r2
 800e6dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e6e0:	ec51 0b10 	vmov	r0, r1, d0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bfd6      	itet	le
 800e6e8:	460a      	movle	r2, r1
 800e6ea:	462a      	movgt	r2, r5
 800e6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6f0:	468b      	mov	fp, r1
 800e6f2:	462f      	mov	r7, r5
 800e6f4:	bfd4      	ite	le
 800e6f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e6fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e6fe:	4620      	mov	r0, r4
 800e700:	ee10 2a10 	vmov	r2, s0
 800e704:	465b      	mov	r3, fp
 800e706:	4639      	mov	r1, r7
 800e708:	f7f2 f8c8 	bl	800089c <__aeabi_ddiv>
 800e70c:	ec41 0b10 	vmov	d0, r0, r1
 800e710:	b003      	add	sp, #12
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e716 <__copybits>:
 800e716:	3901      	subs	r1, #1
 800e718:	b570      	push	{r4, r5, r6, lr}
 800e71a:	1149      	asrs	r1, r1, #5
 800e71c:	6914      	ldr	r4, [r2, #16]
 800e71e:	3101      	adds	r1, #1
 800e720:	f102 0314 	add.w	r3, r2, #20
 800e724:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e72c:	1f05      	subs	r5, r0, #4
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d30c      	bcc.n	800e74c <__copybits+0x36>
 800e732:	1aa3      	subs	r3, r4, r2
 800e734:	3b11      	subs	r3, #17
 800e736:	f023 0303 	bic.w	r3, r3, #3
 800e73a:	3211      	adds	r2, #17
 800e73c:	42a2      	cmp	r2, r4
 800e73e:	bf88      	it	hi
 800e740:	2300      	movhi	r3, #0
 800e742:	4418      	add	r0, r3
 800e744:	2300      	movs	r3, #0
 800e746:	4288      	cmp	r0, r1
 800e748:	d305      	bcc.n	800e756 <__copybits+0x40>
 800e74a:	bd70      	pop	{r4, r5, r6, pc}
 800e74c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e750:	f845 6f04 	str.w	r6, [r5, #4]!
 800e754:	e7eb      	b.n	800e72e <__copybits+0x18>
 800e756:	f840 3b04 	str.w	r3, [r0], #4
 800e75a:	e7f4      	b.n	800e746 <__copybits+0x30>

0800e75c <__any_on>:
 800e75c:	f100 0214 	add.w	r2, r0, #20
 800e760:	6900      	ldr	r0, [r0, #16]
 800e762:	114b      	asrs	r3, r1, #5
 800e764:	4298      	cmp	r0, r3
 800e766:	b510      	push	{r4, lr}
 800e768:	db11      	blt.n	800e78e <__any_on+0x32>
 800e76a:	dd0a      	ble.n	800e782 <__any_on+0x26>
 800e76c:	f011 011f 	ands.w	r1, r1, #31
 800e770:	d007      	beq.n	800e782 <__any_on+0x26>
 800e772:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e776:	fa24 f001 	lsr.w	r0, r4, r1
 800e77a:	fa00 f101 	lsl.w	r1, r0, r1
 800e77e:	428c      	cmp	r4, r1
 800e780:	d10b      	bne.n	800e79a <__any_on+0x3e>
 800e782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e786:	4293      	cmp	r3, r2
 800e788:	d803      	bhi.n	800e792 <__any_on+0x36>
 800e78a:	2000      	movs	r0, #0
 800e78c:	bd10      	pop	{r4, pc}
 800e78e:	4603      	mov	r3, r0
 800e790:	e7f7      	b.n	800e782 <__any_on+0x26>
 800e792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e796:	2900      	cmp	r1, #0
 800e798:	d0f5      	beq.n	800e786 <__any_on+0x2a>
 800e79a:	2001      	movs	r0, #1
 800e79c:	e7f6      	b.n	800e78c <__any_on+0x30>

0800e79e <sulp>:
 800e79e:	b570      	push	{r4, r5, r6, lr}
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	ec45 4b10 	vmov	d0, r4, r5
 800e7a8:	4616      	mov	r6, r2
 800e7aa:	f7ff feb7 	bl	800e51c <__ulp>
 800e7ae:	ec51 0b10 	vmov	r0, r1, d0
 800e7b2:	b17e      	cbz	r6, 800e7d4 <sulp+0x36>
 800e7b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e7b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dd09      	ble.n	800e7d4 <sulp+0x36>
 800e7c0:	051b      	lsls	r3, r3, #20
 800e7c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e7c6:	2400      	movs	r4, #0
 800e7c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	f7f1 ff3a 	bl	8000648 <__aeabi_dmul>
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e7d8 <_strtod_l>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	ed2d 8b02 	vpush	{d8}
 800e7e0:	b09b      	sub	sp, #108	; 0x6c
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	9213      	str	r2, [sp, #76]	; 0x4c
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	9216      	str	r2, [sp, #88]	; 0x58
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	f04f 0800 	mov.w	r8, #0
 800e7f0:	f04f 0900 	mov.w	r9, #0
 800e7f4:	460a      	mov	r2, r1
 800e7f6:	9215      	str	r2, [sp, #84]	; 0x54
 800e7f8:	7811      	ldrb	r1, [r2, #0]
 800e7fa:	292b      	cmp	r1, #43	; 0x2b
 800e7fc:	d04c      	beq.n	800e898 <_strtod_l+0xc0>
 800e7fe:	d83a      	bhi.n	800e876 <_strtod_l+0x9e>
 800e800:	290d      	cmp	r1, #13
 800e802:	d834      	bhi.n	800e86e <_strtod_l+0x96>
 800e804:	2908      	cmp	r1, #8
 800e806:	d834      	bhi.n	800e872 <_strtod_l+0x9a>
 800e808:	2900      	cmp	r1, #0
 800e80a:	d03d      	beq.n	800e888 <_strtod_l+0xb0>
 800e80c:	2200      	movs	r2, #0
 800e80e:	920a      	str	r2, [sp, #40]	; 0x28
 800e810:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e812:	7832      	ldrb	r2, [r6, #0]
 800e814:	2a30      	cmp	r2, #48	; 0x30
 800e816:	f040 80b4 	bne.w	800e982 <_strtod_l+0x1aa>
 800e81a:	7872      	ldrb	r2, [r6, #1]
 800e81c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e820:	2a58      	cmp	r2, #88	; 0x58
 800e822:	d170      	bne.n	800e906 <_strtod_l+0x12e>
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	ab16      	add	r3, sp, #88	; 0x58
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4a8e      	ldr	r2, [pc, #568]	; (800ea68 <_strtod_l+0x290>)
 800e830:	ab17      	add	r3, sp, #92	; 0x5c
 800e832:	a915      	add	r1, sp, #84	; 0x54
 800e834:	4620      	mov	r0, r4
 800e836:	f001 fb17 	bl	800fe68 <__gethex>
 800e83a:	f010 070f 	ands.w	r7, r0, #15
 800e83e:	4605      	mov	r5, r0
 800e840:	d005      	beq.n	800e84e <_strtod_l+0x76>
 800e842:	2f06      	cmp	r7, #6
 800e844:	d12a      	bne.n	800e89c <_strtod_l+0xc4>
 800e846:	3601      	adds	r6, #1
 800e848:	2300      	movs	r3, #0
 800e84a:	9615      	str	r6, [sp, #84]	; 0x54
 800e84c:	930a      	str	r3, [sp, #40]	; 0x28
 800e84e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e850:	2b00      	cmp	r3, #0
 800e852:	f040 857f 	bne.w	800f354 <_strtod_l+0xb7c>
 800e856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e858:	b1db      	cbz	r3, 800e892 <_strtod_l+0xba>
 800e85a:	4642      	mov	r2, r8
 800e85c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e860:	ec43 2b10 	vmov	d0, r2, r3
 800e864:	b01b      	add	sp, #108	; 0x6c
 800e866:	ecbd 8b02 	vpop	{d8}
 800e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86e:	2920      	cmp	r1, #32
 800e870:	d1cc      	bne.n	800e80c <_strtod_l+0x34>
 800e872:	3201      	adds	r2, #1
 800e874:	e7bf      	b.n	800e7f6 <_strtod_l+0x1e>
 800e876:	292d      	cmp	r1, #45	; 0x2d
 800e878:	d1c8      	bne.n	800e80c <_strtod_l+0x34>
 800e87a:	2101      	movs	r1, #1
 800e87c:	910a      	str	r1, [sp, #40]	; 0x28
 800e87e:	1c51      	adds	r1, r2, #1
 800e880:	9115      	str	r1, [sp, #84]	; 0x54
 800e882:	7852      	ldrb	r2, [r2, #1]
 800e884:	2a00      	cmp	r2, #0
 800e886:	d1c3      	bne.n	800e810 <_strtod_l+0x38>
 800e888:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e88a:	9515      	str	r5, [sp, #84]	; 0x54
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f040 855f 	bne.w	800f350 <_strtod_l+0xb78>
 800e892:	4642      	mov	r2, r8
 800e894:	464b      	mov	r3, r9
 800e896:	e7e3      	b.n	800e860 <_strtod_l+0x88>
 800e898:	2100      	movs	r1, #0
 800e89a:	e7ef      	b.n	800e87c <_strtod_l+0xa4>
 800e89c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e89e:	b13a      	cbz	r2, 800e8b0 <_strtod_l+0xd8>
 800e8a0:	2135      	movs	r1, #53	; 0x35
 800e8a2:	a818      	add	r0, sp, #96	; 0x60
 800e8a4:	f7ff ff37 	bl	800e716 <__copybits>
 800e8a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f7ff fb0a 	bl	800dec4 <_Bfree>
 800e8b0:	3f01      	subs	r7, #1
 800e8b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e8b4:	2f04      	cmp	r7, #4
 800e8b6:	d806      	bhi.n	800e8c6 <_strtod_l+0xee>
 800e8b8:	e8df f007 	tbb	[pc, r7]
 800e8bc:	201d0314 	.word	0x201d0314
 800e8c0:	14          	.byte	0x14
 800e8c1:	00          	.byte	0x00
 800e8c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e8c6:	05e9      	lsls	r1, r5, #23
 800e8c8:	bf48      	it	mi
 800e8ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e8ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8d2:	0d1b      	lsrs	r3, r3, #20
 800e8d4:	051b      	lsls	r3, r3, #20
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1b9      	bne.n	800e84e <_strtod_l+0x76>
 800e8da:	f7fe fb05 	bl	800cee8 <__errno>
 800e8de:	2322      	movs	r3, #34	; 0x22
 800e8e0:	6003      	str	r3, [r0, #0]
 800e8e2:	e7b4      	b.n	800e84e <_strtod_l+0x76>
 800e8e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e8e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e8ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e8f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e8f4:	e7e7      	b.n	800e8c6 <_strtod_l+0xee>
 800e8f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ea70 <_strtod_l+0x298>
 800e8fa:	e7e4      	b.n	800e8c6 <_strtod_l+0xee>
 800e8fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e900:	f04f 38ff 	mov.w	r8, #4294967295
 800e904:	e7df      	b.n	800e8c6 <_strtod_l+0xee>
 800e906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	9215      	str	r2, [sp, #84]	; 0x54
 800e90c:	785b      	ldrb	r3, [r3, #1]
 800e90e:	2b30      	cmp	r3, #48	; 0x30
 800e910:	d0f9      	beq.n	800e906 <_strtod_l+0x12e>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d09b      	beq.n	800e84e <_strtod_l+0x76>
 800e916:	2301      	movs	r3, #1
 800e918:	f04f 0a00 	mov.w	sl, #0
 800e91c:	9304      	str	r3, [sp, #16]
 800e91e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e920:	930b      	str	r3, [sp, #44]	; 0x2c
 800e922:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e926:	46d3      	mov	fp, sl
 800e928:	220a      	movs	r2, #10
 800e92a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e92c:	7806      	ldrb	r6, [r0, #0]
 800e92e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e932:	b2d9      	uxtb	r1, r3
 800e934:	2909      	cmp	r1, #9
 800e936:	d926      	bls.n	800e986 <_strtod_l+0x1ae>
 800e938:	494c      	ldr	r1, [pc, #304]	; (800ea6c <_strtod_l+0x294>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	f001 f9c0 	bl	800fcc0 <strncmp>
 800e940:	2800      	cmp	r0, #0
 800e942:	d030      	beq.n	800e9a6 <_strtod_l+0x1ce>
 800e944:	2000      	movs	r0, #0
 800e946:	4632      	mov	r2, r6
 800e948:	9005      	str	r0, [sp, #20]
 800e94a:	465e      	mov	r6, fp
 800e94c:	4603      	mov	r3, r0
 800e94e:	2a65      	cmp	r2, #101	; 0x65
 800e950:	d001      	beq.n	800e956 <_strtod_l+0x17e>
 800e952:	2a45      	cmp	r2, #69	; 0x45
 800e954:	d113      	bne.n	800e97e <_strtod_l+0x1a6>
 800e956:	b91e      	cbnz	r6, 800e960 <_strtod_l+0x188>
 800e958:	9a04      	ldr	r2, [sp, #16]
 800e95a:	4302      	orrs	r2, r0
 800e95c:	d094      	beq.n	800e888 <_strtod_l+0xb0>
 800e95e:	2600      	movs	r6, #0
 800e960:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e962:	1c6a      	adds	r2, r5, #1
 800e964:	9215      	str	r2, [sp, #84]	; 0x54
 800e966:	786a      	ldrb	r2, [r5, #1]
 800e968:	2a2b      	cmp	r2, #43	; 0x2b
 800e96a:	d074      	beq.n	800ea56 <_strtod_l+0x27e>
 800e96c:	2a2d      	cmp	r2, #45	; 0x2d
 800e96e:	d078      	beq.n	800ea62 <_strtod_l+0x28a>
 800e970:	f04f 0c00 	mov.w	ip, #0
 800e974:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e978:	2909      	cmp	r1, #9
 800e97a:	d97f      	bls.n	800ea7c <_strtod_l+0x2a4>
 800e97c:	9515      	str	r5, [sp, #84]	; 0x54
 800e97e:	2700      	movs	r7, #0
 800e980:	e09e      	b.n	800eac0 <_strtod_l+0x2e8>
 800e982:	2300      	movs	r3, #0
 800e984:	e7c8      	b.n	800e918 <_strtod_l+0x140>
 800e986:	f1bb 0f08 	cmp.w	fp, #8
 800e98a:	bfd8      	it	le
 800e98c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e98e:	f100 0001 	add.w	r0, r0, #1
 800e992:	bfda      	itte	le
 800e994:	fb02 3301 	mlale	r3, r2, r1, r3
 800e998:	9309      	strle	r3, [sp, #36]	; 0x24
 800e99a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e99e:	f10b 0b01 	add.w	fp, fp, #1
 800e9a2:	9015      	str	r0, [sp, #84]	; 0x54
 800e9a4:	e7c1      	b.n	800e92a <_strtod_l+0x152>
 800e9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9a8:	1c5a      	adds	r2, r3, #1
 800e9aa:	9215      	str	r2, [sp, #84]	; 0x54
 800e9ac:	785a      	ldrb	r2, [r3, #1]
 800e9ae:	f1bb 0f00 	cmp.w	fp, #0
 800e9b2:	d037      	beq.n	800ea24 <_strtod_l+0x24c>
 800e9b4:	9005      	str	r0, [sp, #20]
 800e9b6:	465e      	mov	r6, fp
 800e9b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e9bc:	2b09      	cmp	r3, #9
 800e9be:	d912      	bls.n	800e9e6 <_strtod_l+0x20e>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e7c4      	b.n	800e94e <_strtod_l+0x176>
 800e9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	9215      	str	r2, [sp, #84]	; 0x54
 800e9ca:	785a      	ldrb	r2, [r3, #1]
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	2a30      	cmp	r2, #48	; 0x30
 800e9d0:	d0f8      	beq.n	800e9c4 <_strtod_l+0x1ec>
 800e9d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e9d6:	2b08      	cmp	r3, #8
 800e9d8:	f200 84c1 	bhi.w	800f35e <_strtod_l+0xb86>
 800e9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9de:	9005      	str	r0, [sp, #20]
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	3a30      	subs	r2, #48	; 0x30
 800e9e8:	f100 0301 	add.w	r3, r0, #1
 800e9ec:	d014      	beq.n	800ea18 <_strtod_l+0x240>
 800e9ee:	9905      	ldr	r1, [sp, #20]
 800e9f0:	4419      	add	r1, r3
 800e9f2:	9105      	str	r1, [sp, #20]
 800e9f4:	4633      	mov	r3, r6
 800e9f6:	eb00 0c06 	add.w	ip, r0, r6
 800e9fa:	210a      	movs	r1, #10
 800e9fc:	4563      	cmp	r3, ip
 800e9fe:	d113      	bne.n	800ea28 <_strtod_l+0x250>
 800ea00:	1833      	adds	r3, r6, r0
 800ea02:	2b08      	cmp	r3, #8
 800ea04:	f106 0601 	add.w	r6, r6, #1
 800ea08:	4406      	add	r6, r0
 800ea0a:	dc1a      	bgt.n	800ea42 <_strtod_l+0x26a>
 800ea0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea0e:	230a      	movs	r3, #10
 800ea10:	fb03 2301 	mla	r3, r3, r1, r2
 800ea14:	9309      	str	r3, [sp, #36]	; 0x24
 800ea16:	2300      	movs	r3, #0
 800ea18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ea1a:	1c51      	adds	r1, r2, #1
 800ea1c:	9115      	str	r1, [sp, #84]	; 0x54
 800ea1e:	7852      	ldrb	r2, [r2, #1]
 800ea20:	4618      	mov	r0, r3
 800ea22:	e7c9      	b.n	800e9b8 <_strtod_l+0x1e0>
 800ea24:	4658      	mov	r0, fp
 800ea26:	e7d2      	b.n	800e9ce <_strtod_l+0x1f6>
 800ea28:	2b08      	cmp	r3, #8
 800ea2a:	f103 0301 	add.w	r3, r3, #1
 800ea2e:	dc03      	bgt.n	800ea38 <_strtod_l+0x260>
 800ea30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea32:	434f      	muls	r7, r1
 800ea34:	9709      	str	r7, [sp, #36]	; 0x24
 800ea36:	e7e1      	b.n	800e9fc <_strtod_l+0x224>
 800ea38:	2b10      	cmp	r3, #16
 800ea3a:	bfd8      	it	le
 800ea3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ea40:	e7dc      	b.n	800e9fc <_strtod_l+0x224>
 800ea42:	2e10      	cmp	r6, #16
 800ea44:	bfdc      	itt	le
 800ea46:	230a      	movle	r3, #10
 800ea48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ea4c:	e7e3      	b.n	800ea16 <_strtod_l+0x23e>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9305      	str	r3, [sp, #20]
 800ea52:	2301      	movs	r3, #1
 800ea54:	e780      	b.n	800e958 <_strtod_l+0x180>
 800ea56:	f04f 0c00 	mov.w	ip, #0
 800ea5a:	1caa      	adds	r2, r5, #2
 800ea5c:	9215      	str	r2, [sp, #84]	; 0x54
 800ea5e:	78aa      	ldrb	r2, [r5, #2]
 800ea60:	e788      	b.n	800e974 <_strtod_l+0x19c>
 800ea62:	f04f 0c01 	mov.w	ip, #1
 800ea66:	e7f8      	b.n	800ea5a <_strtod_l+0x282>
 800ea68:	08011cd0 	.word	0x08011cd0
 800ea6c:	08011ccc 	.word	0x08011ccc
 800ea70:	7ff00000 	.word	0x7ff00000
 800ea74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ea76:	1c51      	adds	r1, r2, #1
 800ea78:	9115      	str	r1, [sp, #84]	; 0x54
 800ea7a:	7852      	ldrb	r2, [r2, #1]
 800ea7c:	2a30      	cmp	r2, #48	; 0x30
 800ea7e:	d0f9      	beq.n	800ea74 <_strtod_l+0x29c>
 800ea80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ea84:	2908      	cmp	r1, #8
 800ea86:	f63f af7a 	bhi.w	800e97e <_strtod_l+0x1a6>
 800ea8a:	3a30      	subs	r2, #48	; 0x30
 800ea8c:	9208      	str	r2, [sp, #32]
 800ea8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ea90:	920c      	str	r2, [sp, #48]	; 0x30
 800ea92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ea94:	1c57      	adds	r7, r2, #1
 800ea96:	9715      	str	r7, [sp, #84]	; 0x54
 800ea98:	7852      	ldrb	r2, [r2, #1]
 800ea9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ea9e:	f1be 0f09 	cmp.w	lr, #9
 800eaa2:	d938      	bls.n	800eb16 <_strtod_l+0x33e>
 800eaa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eaa6:	1a7f      	subs	r7, r7, r1
 800eaa8:	2f08      	cmp	r7, #8
 800eaaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800eaae:	dc03      	bgt.n	800eab8 <_strtod_l+0x2e0>
 800eab0:	9908      	ldr	r1, [sp, #32]
 800eab2:	428f      	cmp	r7, r1
 800eab4:	bfa8      	it	ge
 800eab6:	460f      	movge	r7, r1
 800eab8:	f1bc 0f00 	cmp.w	ip, #0
 800eabc:	d000      	beq.n	800eac0 <_strtod_l+0x2e8>
 800eabe:	427f      	negs	r7, r7
 800eac0:	2e00      	cmp	r6, #0
 800eac2:	d14f      	bne.n	800eb64 <_strtod_l+0x38c>
 800eac4:	9904      	ldr	r1, [sp, #16]
 800eac6:	4301      	orrs	r1, r0
 800eac8:	f47f aec1 	bne.w	800e84e <_strtod_l+0x76>
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f47f aedb 	bne.w	800e888 <_strtod_l+0xb0>
 800ead2:	2a69      	cmp	r2, #105	; 0x69
 800ead4:	d029      	beq.n	800eb2a <_strtod_l+0x352>
 800ead6:	dc26      	bgt.n	800eb26 <_strtod_l+0x34e>
 800ead8:	2a49      	cmp	r2, #73	; 0x49
 800eada:	d026      	beq.n	800eb2a <_strtod_l+0x352>
 800eadc:	2a4e      	cmp	r2, #78	; 0x4e
 800eade:	f47f aed3 	bne.w	800e888 <_strtod_l+0xb0>
 800eae2:	499b      	ldr	r1, [pc, #620]	; (800ed50 <_strtod_l+0x578>)
 800eae4:	a815      	add	r0, sp, #84	; 0x54
 800eae6:	f001 fbff 	bl	80102e8 <__match>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f43f aecc 	beq.w	800e888 <_strtod_l+0xb0>
 800eaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b28      	cmp	r3, #40	; 0x28
 800eaf6:	d12f      	bne.n	800eb58 <_strtod_l+0x380>
 800eaf8:	4996      	ldr	r1, [pc, #600]	; (800ed54 <_strtod_l+0x57c>)
 800eafa:	aa18      	add	r2, sp, #96	; 0x60
 800eafc:	a815      	add	r0, sp, #84	; 0x54
 800eafe:	f001 fc07 	bl	8010310 <__hexnan>
 800eb02:	2805      	cmp	r0, #5
 800eb04:	d128      	bne.n	800eb58 <_strtod_l+0x380>
 800eb06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800eb10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800eb14:	e69b      	b.n	800e84e <_strtod_l+0x76>
 800eb16:	9f08      	ldr	r7, [sp, #32]
 800eb18:	210a      	movs	r1, #10
 800eb1a:	fb01 2107 	mla	r1, r1, r7, r2
 800eb1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800eb22:	9208      	str	r2, [sp, #32]
 800eb24:	e7b5      	b.n	800ea92 <_strtod_l+0x2ba>
 800eb26:	2a6e      	cmp	r2, #110	; 0x6e
 800eb28:	e7d9      	b.n	800eade <_strtod_l+0x306>
 800eb2a:	498b      	ldr	r1, [pc, #556]	; (800ed58 <_strtod_l+0x580>)
 800eb2c:	a815      	add	r0, sp, #84	; 0x54
 800eb2e:	f001 fbdb 	bl	80102e8 <__match>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	f43f aea8 	beq.w	800e888 <_strtod_l+0xb0>
 800eb38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb3a:	4988      	ldr	r1, [pc, #544]	; (800ed5c <_strtod_l+0x584>)
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	a815      	add	r0, sp, #84	; 0x54
 800eb40:	9315      	str	r3, [sp, #84]	; 0x54
 800eb42:	f001 fbd1 	bl	80102e8 <__match>
 800eb46:	b910      	cbnz	r0, 800eb4e <_strtod_l+0x376>
 800eb48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	9315      	str	r3, [sp, #84]	; 0x54
 800eb4e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ed6c <_strtod_l+0x594>
 800eb52:	f04f 0800 	mov.w	r8, #0
 800eb56:	e67a      	b.n	800e84e <_strtod_l+0x76>
 800eb58:	4881      	ldr	r0, [pc, #516]	; (800ed60 <_strtod_l+0x588>)
 800eb5a:	f001 f8e1 	bl	800fd20 <nan>
 800eb5e:	ec59 8b10 	vmov	r8, r9, d0
 800eb62:	e674      	b.n	800e84e <_strtod_l+0x76>
 800eb64:	9b05      	ldr	r3, [sp, #20]
 800eb66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb68:	1afb      	subs	r3, r7, r3
 800eb6a:	f1bb 0f00 	cmp.w	fp, #0
 800eb6e:	bf08      	it	eq
 800eb70:	46b3      	moveq	fp, r6
 800eb72:	2e10      	cmp	r6, #16
 800eb74:	9308      	str	r3, [sp, #32]
 800eb76:	4635      	mov	r5, r6
 800eb78:	bfa8      	it	ge
 800eb7a:	2510      	movge	r5, #16
 800eb7c:	f7f1 fcea 	bl	8000554 <__aeabi_ui2d>
 800eb80:	2e09      	cmp	r6, #9
 800eb82:	4680      	mov	r8, r0
 800eb84:	4689      	mov	r9, r1
 800eb86:	dd13      	ble.n	800ebb0 <_strtod_l+0x3d8>
 800eb88:	4b76      	ldr	r3, [pc, #472]	; (800ed64 <_strtod_l+0x58c>)
 800eb8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800eb92:	f7f1 fd59 	bl	8000648 <__aeabi_dmul>
 800eb96:	4680      	mov	r8, r0
 800eb98:	4650      	mov	r0, sl
 800eb9a:	4689      	mov	r9, r1
 800eb9c:	f7f1 fcda 	bl	8000554 <__aeabi_ui2d>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4640      	mov	r0, r8
 800eba6:	4649      	mov	r1, r9
 800eba8:	f7f1 fb98 	bl	80002dc <__adddf3>
 800ebac:	4680      	mov	r8, r0
 800ebae:	4689      	mov	r9, r1
 800ebb0:	2e0f      	cmp	r6, #15
 800ebb2:	dc38      	bgt.n	800ec26 <_strtod_l+0x44e>
 800ebb4:	9b08      	ldr	r3, [sp, #32]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f43f ae49 	beq.w	800e84e <_strtod_l+0x76>
 800ebbc:	dd24      	ble.n	800ec08 <_strtod_l+0x430>
 800ebbe:	2b16      	cmp	r3, #22
 800ebc0:	dc0b      	bgt.n	800ebda <_strtod_l+0x402>
 800ebc2:	4968      	ldr	r1, [pc, #416]	; (800ed64 <_strtod_l+0x58c>)
 800ebc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebcc:	4642      	mov	r2, r8
 800ebce:	464b      	mov	r3, r9
 800ebd0:	f7f1 fd3a 	bl	8000648 <__aeabi_dmul>
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4689      	mov	r9, r1
 800ebd8:	e639      	b.n	800e84e <_strtod_l+0x76>
 800ebda:	9a08      	ldr	r2, [sp, #32]
 800ebdc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	db20      	blt.n	800ec26 <_strtod_l+0x44e>
 800ebe4:	4c5f      	ldr	r4, [pc, #380]	; (800ed64 <_strtod_l+0x58c>)
 800ebe6:	f1c6 060f 	rsb	r6, r6, #15
 800ebea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ebee:	4642      	mov	r2, r8
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebf6:	f7f1 fd27 	bl	8000648 <__aeabi_dmul>
 800ebfa:	9b08      	ldr	r3, [sp, #32]
 800ebfc:	1b9e      	subs	r6, r3, r6
 800ebfe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ec02:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec06:	e7e3      	b.n	800ebd0 <_strtod_l+0x3f8>
 800ec08:	9b08      	ldr	r3, [sp, #32]
 800ec0a:	3316      	adds	r3, #22
 800ec0c:	db0b      	blt.n	800ec26 <_strtod_l+0x44e>
 800ec0e:	9b05      	ldr	r3, [sp, #20]
 800ec10:	1bdf      	subs	r7, r3, r7
 800ec12:	4b54      	ldr	r3, [pc, #336]	; (800ed64 <_strtod_l+0x58c>)
 800ec14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ec18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	4649      	mov	r1, r9
 800ec20:	f7f1 fe3c 	bl	800089c <__aeabi_ddiv>
 800ec24:	e7d6      	b.n	800ebd4 <_strtod_l+0x3fc>
 800ec26:	9b08      	ldr	r3, [sp, #32]
 800ec28:	1b75      	subs	r5, r6, r5
 800ec2a:	441d      	add	r5, r3
 800ec2c:	2d00      	cmp	r5, #0
 800ec2e:	dd70      	ble.n	800ed12 <_strtod_l+0x53a>
 800ec30:	f015 030f 	ands.w	r3, r5, #15
 800ec34:	d00a      	beq.n	800ec4c <_strtod_l+0x474>
 800ec36:	494b      	ldr	r1, [pc, #300]	; (800ed64 <_strtod_l+0x58c>)
 800ec38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec3c:	4642      	mov	r2, r8
 800ec3e:	464b      	mov	r3, r9
 800ec40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec44:	f7f1 fd00 	bl	8000648 <__aeabi_dmul>
 800ec48:	4680      	mov	r8, r0
 800ec4a:	4689      	mov	r9, r1
 800ec4c:	f035 050f 	bics.w	r5, r5, #15
 800ec50:	d04d      	beq.n	800ecee <_strtod_l+0x516>
 800ec52:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ec56:	dd22      	ble.n	800ec9e <_strtod_l+0x4c6>
 800ec58:	2500      	movs	r5, #0
 800ec5a:	46ab      	mov	fp, r5
 800ec5c:	9509      	str	r5, [sp, #36]	; 0x24
 800ec5e:	9505      	str	r5, [sp, #20]
 800ec60:	2322      	movs	r3, #34	; 0x22
 800ec62:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ed6c <_strtod_l+0x594>
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f43f aded 	beq.w	800e84e <_strtod_l+0x76>
 800ec74:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ec76:	4620      	mov	r0, r4
 800ec78:	f7ff f924 	bl	800dec4 <_Bfree>
 800ec7c:	9905      	ldr	r1, [sp, #20]
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f7ff f920 	bl	800dec4 <_Bfree>
 800ec84:	4659      	mov	r1, fp
 800ec86:	4620      	mov	r0, r4
 800ec88:	f7ff f91c 	bl	800dec4 <_Bfree>
 800ec8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f7ff f918 	bl	800dec4 <_Bfree>
 800ec94:	4629      	mov	r1, r5
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7ff f914 	bl	800dec4 <_Bfree>
 800ec9c:	e5d7      	b.n	800e84e <_strtod_l+0x76>
 800ec9e:	4b32      	ldr	r3, [pc, #200]	; (800ed68 <_strtod_l+0x590>)
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	2300      	movs	r3, #0
 800eca4:	112d      	asrs	r5, r5, #4
 800eca6:	4640      	mov	r0, r8
 800eca8:	4649      	mov	r1, r9
 800ecaa:	469a      	mov	sl, r3
 800ecac:	2d01      	cmp	r5, #1
 800ecae:	dc21      	bgt.n	800ecf4 <_strtod_l+0x51c>
 800ecb0:	b10b      	cbz	r3, 800ecb6 <_strtod_l+0x4de>
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	4689      	mov	r9, r1
 800ecb6:	492c      	ldr	r1, [pc, #176]	; (800ed68 <_strtod_l+0x590>)
 800ecb8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ecbc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	464b      	mov	r3, r9
 800ecc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecc8:	f7f1 fcbe 	bl	8000648 <__aeabi_dmul>
 800eccc:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <_strtod_l+0x594>)
 800ecce:	460a      	mov	r2, r1
 800ecd0:	400b      	ands	r3, r1
 800ecd2:	4927      	ldr	r1, [pc, #156]	; (800ed70 <_strtod_l+0x598>)
 800ecd4:	428b      	cmp	r3, r1
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	d8be      	bhi.n	800ec58 <_strtod_l+0x480>
 800ecda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ecde:	428b      	cmp	r3, r1
 800ece0:	bf86      	itte	hi
 800ece2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ed74 <_strtod_l+0x59c>
 800ece6:	f04f 38ff 	movhi.w	r8, #4294967295
 800ecea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ecee:	2300      	movs	r3, #0
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	e07b      	b.n	800edec <_strtod_l+0x614>
 800ecf4:	07ea      	lsls	r2, r5, #31
 800ecf6:	d505      	bpl.n	800ed04 <_strtod_l+0x52c>
 800ecf8:	9b04      	ldr	r3, [sp, #16]
 800ecfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfe:	f7f1 fca3 	bl	8000648 <__aeabi_dmul>
 800ed02:	2301      	movs	r3, #1
 800ed04:	9a04      	ldr	r2, [sp, #16]
 800ed06:	3208      	adds	r2, #8
 800ed08:	f10a 0a01 	add.w	sl, sl, #1
 800ed0c:	106d      	asrs	r5, r5, #1
 800ed0e:	9204      	str	r2, [sp, #16]
 800ed10:	e7cc      	b.n	800ecac <_strtod_l+0x4d4>
 800ed12:	d0ec      	beq.n	800ecee <_strtod_l+0x516>
 800ed14:	426d      	negs	r5, r5
 800ed16:	f015 020f 	ands.w	r2, r5, #15
 800ed1a:	d00a      	beq.n	800ed32 <_strtod_l+0x55a>
 800ed1c:	4b11      	ldr	r3, [pc, #68]	; (800ed64 <_strtod_l+0x58c>)
 800ed1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed22:	4640      	mov	r0, r8
 800ed24:	4649      	mov	r1, r9
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	f7f1 fdb7 	bl	800089c <__aeabi_ddiv>
 800ed2e:	4680      	mov	r8, r0
 800ed30:	4689      	mov	r9, r1
 800ed32:	112d      	asrs	r5, r5, #4
 800ed34:	d0db      	beq.n	800ecee <_strtod_l+0x516>
 800ed36:	2d1f      	cmp	r5, #31
 800ed38:	dd1e      	ble.n	800ed78 <_strtod_l+0x5a0>
 800ed3a:	2500      	movs	r5, #0
 800ed3c:	46ab      	mov	fp, r5
 800ed3e:	9509      	str	r5, [sp, #36]	; 0x24
 800ed40:	9505      	str	r5, [sp, #20]
 800ed42:	2322      	movs	r3, #34	; 0x22
 800ed44:	f04f 0800 	mov.w	r8, #0
 800ed48:	f04f 0900 	mov.w	r9, #0
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	e78d      	b.n	800ec6c <_strtod_l+0x494>
 800ed50:	08011abd 	.word	0x08011abd
 800ed54:	08011ce4 	.word	0x08011ce4
 800ed58:	08011ab5 	.word	0x08011ab5
 800ed5c:	08011aec 	.word	0x08011aec
 800ed60:	08011e75 	.word	0x08011e75
 800ed64:	08011bf8 	.word	0x08011bf8
 800ed68:	08011bd0 	.word	0x08011bd0
 800ed6c:	7ff00000 	.word	0x7ff00000
 800ed70:	7ca00000 	.word	0x7ca00000
 800ed74:	7fefffff 	.word	0x7fefffff
 800ed78:	f015 0310 	ands.w	r3, r5, #16
 800ed7c:	bf18      	it	ne
 800ed7e:	236a      	movne	r3, #106	; 0x6a
 800ed80:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f124 <_strtod_l+0x94c>
 800ed84:	9304      	str	r3, [sp, #16]
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	07ea      	lsls	r2, r5, #31
 800ed8e:	d504      	bpl.n	800ed9a <_strtod_l+0x5c2>
 800ed90:	e9da 2300 	ldrd	r2, r3, [sl]
 800ed94:	f7f1 fc58 	bl	8000648 <__aeabi_dmul>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	106d      	asrs	r5, r5, #1
 800ed9c:	f10a 0a08 	add.w	sl, sl, #8
 800eda0:	d1f4      	bne.n	800ed8c <_strtod_l+0x5b4>
 800eda2:	b10b      	cbz	r3, 800eda8 <_strtod_l+0x5d0>
 800eda4:	4680      	mov	r8, r0
 800eda6:	4689      	mov	r9, r1
 800eda8:	9b04      	ldr	r3, [sp, #16]
 800edaa:	b1bb      	cbz	r3, 800eddc <_strtod_l+0x604>
 800edac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800edb0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	4649      	mov	r1, r9
 800edb8:	dd10      	ble.n	800eddc <_strtod_l+0x604>
 800edba:	2b1f      	cmp	r3, #31
 800edbc:	f340 811e 	ble.w	800effc <_strtod_l+0x824>
 800edc0:	2b34      	cmp	r3, #52	; 0x34
 800edc2:	bfde      	ittt	le
 800edc4:	f04f 33ff 	movle.w	r3, #4294967295
 800edc8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800edcc:	4093      	lslle	r3, r2
 800edce:	f04f 0800 	mov.w	r8, #0
 800edd2:	bfcc      	ite	gt
 800edd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800edd8:	ea03 0901 	andle.w	r9, r3, r1
 800eddc:	2200      	movs	r2, #0
 800edde:	2300      	movs	r3, #0
 800ede0:	4640      	mov	r0, r8
 800ede2:	4649      	mov	r1, r9
 800ede4:	f7f1 fe98 	bl	8000b18 <__aeabi_dcmpeq>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d1a6      	bne.n	800ed3a <_strtod_l+0x562>
 800edec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edf2:	4633      	mov	r3, r6
 800edf4:	465a      	mov	r2, fp
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7ff f8cc 	bl	800df94 <__s2b>
 800edfc:	9009      	str	r0, [sp, #36]	; 0x24
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f43f af2a 	beq.w	800ec58 <_strtod_l+0x480>
 800ee04:	9a08      	ldr	r2, [sp, #32]
 800ee06:	9b05      	ldr	r3, [sp, #20]
 800ee08:	2a00      	cmp	r2, #0
 800ee0a:	eba3 0307 	sub.w	r3, r3, r7
 800ee0e:	bfa8      	it	ge
 800ee10:	2300      	movge	r3, #0
 800ee12:	930c      	str	r3, [sp, #48]	; 0x30
 800ee14:	2500      	movs	r5, #0
 800ee16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee1a:	9312      	str	r3, [sp, #72]	; 0x48
 800ee1c:	46ab      	mov	fp, r5
 800ee1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee20:	4620      	mov	r0, r4
 800ee22:	6859      	ldr	r1, [r3, #4]
 800ee24:	f7ff f80e 	bl	800de44 <_Balloc>
 800ee28:	9005      	str	r0, [sp, #20]
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	f43f af18 	beq.w	800ec60 <_strtod_l+0x488>
 800ee30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee32:	691a      	ldr	r2, [r3, #16]
 800ee34:	3202      	adds	r2, #2
 800ee36:	f103 010c 	add.w	r1, r3, #12
 800ee3a:	0092      	lsls	r2, r2, #2
 800ee3c:	300c      	adds	r0, #12
 800ee3e:	f000 ff61 	bl	800fd04 <memcpy>
 800ee42:	ec49 8b10 	vmov	d0, r8, r9
 800ee46:	aa18      	add	r2, sp, #96	; 0x60
 800ee48:	a917      	add	r1, sp, #92	; 0x5c
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f7ff fbd6 	bl	800e5fc <__d2b>
 800ee50:	ec49 8b18 	vmov	d8, r8, r9
 800ee54:	9016      	str	r0, [sp, #88]	; 0x58
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f43f af02 	beq.w	800ec60 <_strtod_l+0x488>
 800ee5c:	2101      	movs	r1, #1
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f7ff f930 	bl	800e0c4 <__i2b>
 800ee64:	4683      	mov	fp, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f43f aefa 	beq.w	800ec60 <_strtod_l+0x488>
 800ee6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ee6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee70:	2e00      	cmp	r6, #0
 800ee72:	bfab      	itete	ge
 800ee74:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ee76:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ee78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ee7a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ee7e:	bfac      	ite	ge
 800ee80:	eb06 0a03 	addge.w	sl, r6, r3
 800ee84:	1b9f      	sublt	r7, r3, r6
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	1af6      	subs	r6, r6, r3
 800ee8a:	4416      	add	r6, r2
 800ee8c:	4ba0      	ldr	r3, [pc, #640]	; (800f110 <_strtod_l+0x938>)
 800ee8e:	3e01      	subs	r6, #1
 800ee90:	429e      	cmp	r6, r3
 800ee92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ee96:	f280 80c4 	bge.w	800f022 <_strtod_l+0x84a>
 800ee9a:	1b9b      	subs	r3, r3, r6
 800ee9c:	2b1f      	cmp	r3, #31
 800ee9e:	eba2 0203 	sub.w	r2, r2, r3
 800eea2:	f04f 0101 	mov.w	r1, #1
 800eea6:	f300 80b0 	bgt.w	800f00a <_strtod_l+0x832>
 800eeaa:	fa01 f303 	lsl.w	r3, r1, r3
 800eeae:	930e      	str	r3, [sp, #56]	; 0x38
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	930d      	str	r3, [sp, #52]	; 0x34
 800eeb4:	eb0a 0602 	add.w	r6, sl, r2
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	45b2      	cmp	sl, r6
 800eebc:	4417      	add	r7, r2
 800eebe:	441f      	add	r7, r3
 800eec0:	4653      	mov	r3, sl
 800eec2:	bfa8      	it	ge
 800eec4:	4633      	movge	r3, r6
 800eec6:	42bb      	cmp	r3, r7
 800eec8:	bfa8      	it	ge
 800eeca:	463b      	movge	r3, r7
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bfc2      	ittt	gt
 800eed0:	1af6      	subgt	r6, r6, r3
 800eed2:	1aff      	subgt	r7, r7, r3
 800eed4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800eed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dd17      	ble.n	800ef0e <_strtod_l+0x736>
 800eede:	4659      	mov	r1, fp
 800eee0:	461a      	mov	r2, r3
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff f9ae 	bl	800e244 <__pow5mult>
 800eee8:	4683      	mov	fp, r0
 800eeea:	2800      	cmp	r0, #0
 800eeec:	f43f aeb8 	beq.w	800ec60 <_strtod_l+0x488>
 800eef0:	4601      	mov	r1, r0
 800eef2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7ff f8fb 	bl	800e0f0 <__multiply>
 800eefa:	900b      	str	r0, [sp, #44]	; 0x2c
 800eefc:	2800      	cmp	r0, #0
 800eefe:	f43f aeaf 	beq.w	800ec60 <_strtod_l+0x488>
 800ef02:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7fe ffdd 	bl	800dec4 <_Bfree>
 800ef0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef0c:	9316      	str	r3, [sp, #88]	; 0x58
 800ef0e:	2e00      	cmp	r6, #0
 800ef10:	f300 808c 	bgt.w	800f02c <_strtod_l+0x854>
 800ef14:	9b08      	ldr	r3, [sp, #32]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dd08      	ble.n	800ef2c <_strtod_l+0x754>
 800ef1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef1c:	9905      	ldr	r1, [sp, #20]
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7ff f990 	bl	800e244 <__pow5mult>
 800ef24:	9005      	str	r0, [sp, #20]
 800ef26:	2800      	cmp	r0, #0
 800ef28:	f43f ae9a 	beq.w	800ec60 <_strtod_l+0x488>
 800ef2c:	2f00      	cmp	r7, #0
 800ef2e:	dd08      	ble.n	800ef42 <_strtod_l+0x76a>
 800ef30:	9905      	ldr	r1, [sp, #20]
 800ef32:	463a      	mov	r2, r7
 800ef34:	4620      	mov	r0, r4
 800ef36:	f7ff f9df 	bl	800e2f8 <__lshift>
 800ef3a:	9005      	str	r0, [sp, #20]
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f43f ae8f 	beq.w	800ec60 <_strtod_l+0x488>
 800ef42:	f1ba 0f00 	cmp.w	sl, #0
 800ef46:	dd08      	ble.n	800ef5a <_strtod_l+0x782>
 800ef48:	4659      	mov	r1, fp
 800ef4a:	4652      	mov	r2, sl
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f7ff f9d3 	bl	800e2f8 <__lshift>
 800ef52:	4683      	mov	fp, r0
 800ef54:	2800      	cmp	r0, #0
 800ef56:	f43f ae83 	beq.w	800ec60 <_strtod_l+0x488>
 800ef5a:	9a05      	ldr	r2, [sp, #20]
 800ef5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f7ff fa52 	bl	800e408 <__mdiff>
 800ef64:	4605      	mov	r5, r0
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f43f ae7a 	beq.w	800ec60 <_strtod_l+0x488>
 800ef6c:	68c3      	ldr	r3, [r0, #12]
 800ef6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef70:	2300      	movs	r3, #0
 800ef72:	60c3      	str	r3, [r0, #12]
 800ef74:	4659      	mov	r1, fp
 800ef76:	f7ff fa2b 	bl	800e3d0 <__mcmp>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	da60      	bge.n	800f040 <_strtod_l+0x868>
 800ef7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef80:	ea53 0308 	orrs.w	r3, r3, r8
 800ef84:	f040 8084 	bne.w	800f090 <_strtod_l+0x8b8>
 800ef88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d17f      	bne.n	800f090 <_strtod_l+0x8b8>
 800ef90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef94:	0d1b      	lsrs	r3, r3, #20
 800ef96:	051b      	lsls	r3, r3, #20
 800ef98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ef9c:	d978      	bls.n	800f090 <_strtod_l+0x8b8>
 800ef9e:	696b      	ldr	r3, [r5, #20]
 800efa0:	b913      	cbnz	r3, 800efa8 <_strtod_l+0x7d0>
 800efa2:	692b      	ldr	r3, [r5, #16]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	dd73      	ble.n	800f090 <_strtod_l+0x8b8>
 800efa8:	4629      	mov	r1, r5
 800efaa:	2201      	movs	r2, #1
 800efac:	4620      	mov	r0, r4
 800efae:	f7ff f9a3 	bl	800e2f8 <__lshift>
 800efb2:	4659      	mov	r1, fp
 800efb4:	4605      	mov	r5, r0
 800efb6:	f7ff fa0b 	bl	800e3d0 <__mcmp>
 800efba:	2800      	cmp	r0, #0
 800efbc:	dd68      	ble.n	800f090 <_strtod_l+0x8b8>
 800efbe:	9904      	ldr	r1, [sp, #16]
 800efc0:	4a54      	ldr	r2, [pc, #336]	; (800f114 <_strtod_l+0x93c>)
 800efc2:	464b      	mov	r3, r9
 800efc4:	2900      	cmp	r1, #0
 800efc6:	f000 8084 	beq.w	800f0d2 <_strtod_l+0x8fa>
 800efca:	ea02 0109 	and.w	r1, r2, r9
 800efce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800efd2:	dc7e      	bgt.n	800f0d2 <_strtod_l+0x8fa>
 800efd4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800efd8:	f77f aeb3 	ble.w	800ed42 <_strtod_l+0x56a>
 800efdc:	4b4e      	ldr	r3, [pc, #312]	; (800f118 <_strtod_l+0x940>)
 800efde:	4640      	mov	r0, r8
 800efe0:	4649      	mov	r1, r9
 800efe2:	2200      	movs	r2, #0
 800efe4:	f7f1 fb30 	bl	8000648 <__aeabi_dmul>
 800efe8:	4b4a      	ldr	r3, [pc, #296]	; (800f114 <_strtod_l+0x93c>)
 800efea:	400b      	ands	r3, r1
 800efec:	4680      	mov	r8, r0
 800efee:	4689      	mov	r9, r1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f47f ae3f 	bne.w	800ec74 <_strtod_l+0x49c>
 800eff6:	2322      	movs	r3, #34	; 0x22
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	e63b      	b.n	800ec74 <_strtod_l+0x49c>
 800effc:	f04f 32ff 	mov.w	r2, #4294967295
 800f000:	fa02 f303 	lsl.w	r3, r2, r3
 800f004:	ea03 0808 	and.w	r8, r3, r8
 800f008:	e6e8      	b.n	800eddc <_strtod_l+0x604>
 800f00a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f00e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f012:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f016:	36e2      	adds	r6, #226	; 0xe2
 800f018:	fa01 f306 	lsl.w	r3, r1, r6
 800f01c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f020:	e748      	b.n	800eeb4 <_strtod_l+0x6dc>
 800f022:	2100      	movs	r1, #0
 800f024:	2301      	movs	r3, #1
 800f026:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f02a:	e743      	b.n	800eeb4 <_strtod_l+0x6dc>
 800f02c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f02e:	4632      	mov	r2, r6
 800f030:	4620      	mov	r0, r4
 800f032:	f7ff f961 	bl	800e2f8 <__lshift>
 800f036:	9016      	str	r0, [sp, #88]	; 0x58
 800f038:	2800      	cmp	r0, #0
 800f03a:	f47f af6b 	bne.w	800ef14 <_strtod_l+0x73c>
 800f03e:	e60f      	b.n	800ec60 <_strtod_l+0x488>
 800f040:	46ca      	mov	sl, r9
 800f042:	d171      	bne.n	800f128 <_strtod_l+0x950>
 800f044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f046:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f04a:	b352      	cbz	r2, 800f0a2 <_strtod_l+0x8ca>
 800f04c:	4a33      	ldr	r2, [pc, #204]	; (800f11c <_strtod_l+0x944>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d12a      	bne.n	800f0a8 <_strtod_l+0x8d0>
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	4641      	mov	r1, r8
 800f056:	b1fb      	cbz	r3, 800f098 <_strtod_l+0x8c0>
 800f058:	4b2e      	ldr	r3, [pc, #184]	; (800f114 <_strtod_l+0x93c>)
 800f05a:	ea09 0303 	and.w	r3, r9, r3
 800f05e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f062:	f04f 32ff 	mov.w	r2, #4294967295
 800f066:	d81a      	bhi.n	800f09e <_strtod_l+0x8c6>
 800f068:	0d1b      	lsrs	r3, r3, #20
 800f06a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f06e:	fa02 f303 	lsl.w	r3, r2, r3
 800f072:	4299      	cmp	r1, r3
 800f074:	d118      	bne.n	800f0a8 <_strtod_l+0x8d0>
 800f076:	4b2a      	ldr	r3, [pc, #168]	; (800f120 <_strtod_l+0x948>)
 800f078:	459a      	cmp	sl, r3
 800f07a:	d102      	bne.n	800f082 <_strtod_l+0x8aa>
 800f07c:	3101      	adds	r1, #1
 800f07e:	f43f adef 	beq.w	800ec60 <_strtod_l+0x488>
 800f082:	4b24      	ldr	r3, [pc, #144]	; (800f114 <_strtod_l+0x93c>)
 800f084:	ea0a 0303 	and.w	r3, sl, r3
 800f088:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f08c:	f04f 0800 	mov.w	r8, #0
 800f090:	9b04      	ldr	r3, [sp, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1a2      	bne.n	800efdc <_strtod_l+0x804>
 800f096:	e5ed      	b.n	800ec74 <_strtod_l+0x49c>
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	e7e9      	b.n	800f072 <_strtod_l+0x89a>
 800f09e:	4613      	mov	r3, r2
 800f0a0:	e7e7      	b.n	800f072 <_strtod_l+0x89a>
 800f0a2:	ea53 0308 	orrs.w	r3, r3, r8
 800f0a6:	d08a      	beq.n	800efbe <_strtod_l+0x7e6>
 800f0a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0aa:	b1e3      	cbz	r3, 800f0e6 <_strtod_l+0x90e>
 800f0ac:	ea13 0f0a 	tst.w	r3, sl
 800f0b0:	d0ee      	beq.n	800f090 <_strtod_l+0x8b8>
 800f0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b4:	9a04      	ldr	r2, [sp, #16]
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	b1c3      	cbz	r3, 800f0ee <_strtod_l+0x916>
 800f0bc:	f7ff fb6f 	bl	800e79e <sulp>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	ec51 0b18 	vmov	r0, r1, d8
 800f0c8:	f7f1 f908 	bl	80002dc <__adddf3>
 800f0cc:	4680      	mov	r8, r0
 800f0ce:	4689      	mov	r9, r1
 800f0d0:	e7de      	b.n	800f090 <_strtod_l+0x8b8>
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f0d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f0dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f0e0:	f04f 38ff 	mov.w	r8, #4294967295
 800f0e4:	e7d4      	b.n	800f090 <_strtod_l+0x8b8>
 800f0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0e8:	ea13 0f08 	tst.w	r3, r8
 800f0ec:	e7e0      	b.n	800f0b0 <_strtod_l+0x8d8>
 800f0ee:	f7ff fb56 	bl	800e79e <sulp>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	ec51 0b18 	vmov	r0, r1, d8
 800f0fa:	f7f1 f8ed 	bl	80002d8 <__aeabi_dsub>
 800f0fe:	2200      	movs	r2, #0
 800f100:	2300      	movs	r3, #0
 800f102:	4680      	mov	r8, r0
 800f104:	4689      	mov	r9, r1
 800f106:	f7f1 fd07 	bl	8000b18 <__aeabi_dcmpeq>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d0c0      	beq.n	800f090 <_strtod_l+0x8b8>
 800f10e:	e618      	b.n	800ed42 <_strtod_l+0x56a>
 800f110:	fffffc02 	.word	0xfffffc02
 800f114:	7ff00000 	.word	0x7ff00000
 800f118:	39500000 	.word	0x39500000
 800f11c:	000fffff 	.word	0x000fffff
 800f120:	7fefffff 	.word	0x7fefffff
 800f124:	08011cf8 	.word	0x08011cf8
 800f128:	4659      	mov	r1, fp
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7ff fac0 	bl	800e6b0 <__ratio>
 800f130:	ec57 6b10 	vmov	r6, r7, d0
 800f134:	ee10 0a10 	vmov	r0, s0
 800f138:	2200      	movs	r2, #0
 800f13a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f13e:	4639      	mov	r1, r7
 800f140:	f7f1 fcfe 	bl	8000b40 <__aeabi_dcmple>
 800f144:	2800      	cmp	r0, #0
 800f146:	d071      	beq.n	800f22c <_strtod_l+0xa54>
 800f148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d17c      	bne.n	800f248 <_strtod_l+0xa70>
 800f14e:	f1b8 0f00 	cmp.w	r8, #0
 800f152:	d15a      	bne.n	800f20a <_strtod_l+0xa32>
 800f154:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d15d      	bne.n	800f218 <_strtod_l+0xa40>
 800f15c:	4b90      	ldr	r3, [pc, #576]	; (800f3a0 <_strtod_l+0xbc8>)
 800f15e:	2200      	movs	r2, #0
 800f160:	4630      	mov	r0, r6
 800f162:	4639      	mov	r1, r7
 800f164:	f7f1 fce2 	bl	8000b2c <__aeabi_dcmplt>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d15c      	bne.n	800f226 <_strtod_l+0xa4e>
 800f16c:	4630      	mov	r0, r6
 800f16e:	4639      	mov	r1, r7
 800f170:	4b8c      	ldr	r3, [pc, #560]	; (800f3a4 <_strtod_l+0xbcc>)
 800f172:	2200      	movs	r2, #0
 800f174:	f7f1 fa68 	bl	8000648 <__aeabi_dmul>
 800f178:	4606      	mov	r6, r0
 800f17a:	460f      	mov	r7, r1
 800f17c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f180:	9606      	str	r6, [sp, #24]
 800f182:	9307      	str	r3, [sp, #28]
 800f184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f188:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f18c:	4b86      	ldr	r3, [pc, #536]	; (800f3a8 <_strtod_l+0xbd0>)
 800f18e:	ea0a 0303 	and.w	r3, sl, r3
 800f192:	930d      	str	r3, [sp, #52]	; 0x34
 800f194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f196:	4b85      	ldr	r3, [pc, #532]	; (800f3ac <_strtod_l+0xbd4>)
 800f198:	429a      	cmp	r2, r3
 800f19a:	f040 8090 	bne.w	800f2be <_strtod_l+0xae6>
 800f19e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f1a2:	ec49 8b10 	vmov	d0, r8, r9
 800f1a6:	f7ff f9b9 	bl	800e51c <__ulp>
 800f1aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1ae:	ec51 0b10 	vmov	r0, r1, d0
 800f1b2:	f7f1 fa49 	bl	8000648 <__aeabi_dmul>
 800f1b6:	4642      	mov	r2, r8
 800f1b8:	464b      	mov	r3, r9
 800f1ba:	f7f1 f88f 	bl	80002dc <__adddf3>
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4979      	ldr	r1, [pc, #484]	; (800f3a8 <_strtod_l+0xbd0>)
 800f1c2:	4a7b      	ldr	r2, [pc, #492]	; (800f3b0 <_strtod_l+0xbd8>)
 800f1c4:	4019      	ands	r1, r3
 800f1c6:	4291      	cmp	r1, r2
 800f1c8:	4680      	mov	r8, r0
 800f1ca:	d944      	bls.n	800f256 <_strtod_l+0xa7e>
 800f1cc:	ee18 2a90 	vmov	r2, s17
 800f1d0:	4b78      	ldr	r3, [pc, #480]	; (800f3b4 <_strtod_l+0xbdc>)
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d104      	bne.n	800f1e0 <_strtod_l+0xa08>
 800f1d6:	ee18 3a10 	vmov	r3, s16
 800f1da:	3301      	adds	r3, #1
 800f1dc:	f43f ad40 	beq.w	800ec60 <_strtod_l+0x488>
 800f1e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f3b4 <_strtod_l+0xbdc>
 800f1e4:	f04f 38ff 	mov.w	r8, #4294967295
 800f1e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f7fe fe6a 	bl	800dec4 <_Bfree>
 800f1f0:	9905      	ldr	r1, [sp, #20]
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7fe fe66 	bl	800dec4 <_Bfree>
 800f1f8:	4659      	mov	r1, fp
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f7fe fe62 	bl	800dec4 <_Bfree>
 800f200:	4629      	mov	r1, r5
 800f202:	4620      	mov	r0, r4
 800f204:	f7fe fe5e 	bl	800dec4 <_Bfree>
 800f208:	e609      	b.n	800ee1e <_strtod_l+0x646>
 800f20a:	f1b8 0f01 	cmp.w	r8, #1
 800f20e:	d103      	bne.n	800f218 <_strtod_l+0xa40>
 800f210:	f1b9 0f00 	cmp.w	r9, #0
 800f214:	f43f ad95 	beq.w	800ed42 <_strtod_l+0x56a>
 800f218:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f370 <_strtod_l+0xb98>
 800f21c:	4f60      	ldr	r7, [pc, #384]	; (800f3a0 <_strtod_l+0xbc8>)
 800f21e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f222:	2600      	movs	r6, #0
 800f224:	e7ae      	b.n	800f184 <_strtod_l+0x9ac>
 800f226:	4f5f      	ldr	r7, [pc, #380]	; (800f3a4 <_strtod_l+0xbcc>)
 800f228:	2600      	movs	r6, #0
 800f22a:	e7a7      	b.n	800f17c <_strtod_l+0x9a4>
 800f22c:	4b5d      	ldr	r3, [pc, #372]	; (800f3a4 <_strtod_l+0xbcc>)
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	2200      	movs	r2, #0
 800f234:	f7f1 fa08 	bl	8000648 <__aeabi_dmul>
 800f238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f23a:	4606      	mov	r6, r0
 800f23c:	460f      	mov	r7, r1
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d09c      	beq.n	800f17c <_strtod_l+0x9a4>
 800f242:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f246:	e79d      	b.n	800f184 <_strtod_l+0x9ac>
 800f248:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f378 <_strtod_l+0xba0>
 800f24c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f250:	ec57 6b17 	vmov	r6, r7, d7
 800f254:	e796      	b.n	800f184 <_strtod_l+0x9ac>
 800f256:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f25a:	9b04      	ldr	r3, [sp, #16]
 800f25c:	46ca      	mov	sl, r9
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1c2      	bne.n	800f1e8 <_strtod_l+0xa10>
 800f262:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f268:	0d1b      	lsrs	r3, r3, #20
 800f26a:	051b      	lsls	r3, r3, #20
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d1bb      	bne.n	800f1e8 <_strtod_l+0xa10>
 800f270:	4630      	mov	r0, r6
 800f272:	4639      	mov	r1, r7
 800f274:	f7f1 fd48 	bl	8000d08 <__aeabi_d2lz>
 800f278:	f7f1 f9b8 	bl	80005ec <__aeabi_l2d>
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	4630      	mov	r0, r6
 800f282:	4639      	mov	r1, r7
 800f284:	f7f1 f828 	bl	80002d8 <__aeabi_dsub>
 800f288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f28a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f28e:	ea43 0308 	orr.w	r3, r3, r8
 800f292:	4313      	orrs	r3, r2
 800f294:	4606      	mov	r6, r0
 800f296:	460f      	mov	r7, r1
 800f298:	d054      	beq.n	800f344 <_strtod_l+0xb6c>
 800f29a:	a339      	add	r3, pc, #228	; (adr r3, 800f380 <_strtod_l+0xba8>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	f7f1 fc44 	bl	8000b2c <__aeabi_dcmplt>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	f47f ace5 	bne.w	800ec74 <_strtod_l+0x49c>
 800f2aa:	a337      	add	r3, pc, #220	; (adr r3, 800f388 <_strtod_l+0xbb0>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	f7f1 fc58 	bl	8000b68 <__aeabi_dcmpgt>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d095      	beq.n	800f1e8 <_strtod_l+0xa10>
 800f2bc:	e4da      	b.n	800ec74 <_strtod_l+0x49c>
 800f2be:	9b04      	ldr	r3, [sp, #16]
 800f2c0:	b333      	cbz	r3, 800f310 <_strtod_l+0xb38>
 800f2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f2c8:	d822      	bhi.n	800f310 <_strtod_l+0xb38>
 800f2ca:	a331      	add	r3, pc, #196	; (adr r3, 800f390 <_strtod_l+0xbb8>)
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	4639      	mov	r1, r7
 800f2d4:	f7f1 fc34 	bl	8000b40 <__aeabi_dcmple>
 800f2d8:	b1a0      	cbz	r0, 800f304 <_strtod_l+0xb2c>
 800f2da:	4639      	mov	r1, r7
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f7f1 fc8b 	bl	8000bf8 <__aeabi_d2uiz>
 800f2e2:	2801      	cmp	r0, #1
 800f2e4:	bf38      	it	cc
 800f2e6:	2001      	movcc	r0, #1
 800f2e8:	f7f1 f934 	bl	8000554 <__aeabi_ui2d>
 800f2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2ee:	4606      	mov	r6, r0
 800f2f0:	460f      	mov	r7, r1
 800f2f2:	bb23      	cbnz	r3, 800f33e <_strtod_l+0xb66>
 800f2f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2f8:	9010      	str	r0, [sp, #64]	; 0x40
 800f2fa:	9311      	str	r3, [sp, #68]	; 0x44
 800f2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f300:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f308:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f30c:	1a9b      	subs	r3, r3, r2
 800f30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f310:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f314:	eeb0 0a48 	vmov.f32	s0, s16
 800f318:	eef0 0a68 	vmov.f32	s1, s17
 800f31c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f320:	f7ff f8fc 	bl	800e51c <__ulp>
 800f324:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f328:	ec53 2b10 	vmov	r2, r3, d0
 800f32c:	f7f1 f98c 	bl	8000648 <__aeabi_dmul>
 800f330:	ec53 2b18 	vmov	r2, r3, d8
 800f334:	f7f0 ffd2 	bl	80002dc <__adddf3>
 800f338:	4680      	mov	r8, r0
 800f33a:	4689      	mov	r9, r1
 800f33c:	e78d      	b.n	800f25a <_strtod_l+0xa82>
 800f33e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f342:	e7db      	b.n	800f2fc <_strtod_l+0xb24>
 800f344:	a314      	add	r3, pc, #80	; (adr r3, 800f398 <_strtod_l+0xbc0>)
 800f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34a:	f7f1 fbef 	bl	8000b2c <__aeabi_dcmplt>
 800f34e:	e7b3      	b.n	800f2b8 <_strtod_l+0xae0>
 800f350:	2300      	movs	r3, #0
 800f352:	930a      	str	r3, [sp, #40]	; 0x28
 800f354:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	f7ff ba7c 	b.w	800e856 <_strtod_l+0x7e>
 800f35e:	2a65      	cmp	r2, #101	; 0x65
 800f360:	f43f ab75 	beq.w	800ea4e <_strtod_l+0x276>
 800f364:	2a45      	cmp	r2, #69	; 0x45
 800f366:	f43f ab72 	beq.w	800ea4e <_strtod_l+0x276>
 800f36a:	2301      	movs	r3, #1
 800f36c:	f7ff bbaa 	b.w	800eac4 <_strtod_l+0x2ec>
 800f370:	00000000 	.word	0x00000000
 800f374:	bff00000 	.word	0xbff00000
 800f378:	00000000 	.word	0x00000000
 800f37c:	3ff00000 	.word	0x3ff00000
 800f380:	94a03595 	.word	0x94a03595
 800f384:	3fdfffff 	.word	0x3fdfffff
 800f388:	35afe535 	.word	0x35afe535
 800f38c:	3fe00000 	.word	0x3fe00000
 800f390:	ffc00000 	.word	0xffc00000
 800f394:	41dfffff 	.word	0x41dfffff
 800f398:	94a03595 	.word	0x94a03595
 800f39c:	3fcfffff 	.word	0x3fcfffff
 800f3a0:	3ff00000 	.word	0x3ff00000
 800f3a4:	3fe00000 	.word	0x3fe00000
 800f3a8:	7ff00000 	.word	0x7ff00000
 800f3ac:	7fe00000 	.word	0x7fe00000
 800f3b0:	7c9fffff 	.word	0x7c9fffff
 800f3b4:	7fefffff 	.word	0x7fefffff

0800f3b8 <_strtod_r>:
 800f3b8:	4b01      	ldr	r3, [pc, #4]	; (800f3c0 <_strtod_r+0x8>)
 800f3ba:	f7ff ba0d 	b.w	800e7d8 <_strtod_l>
 800f3be:	bf00      	nop
 800f3c0:	2000006c 	.word	0x2000006c

0800f3c4 <_strtol_l.constprop.0>:
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ca:	d001      	beq.n	800f3d0 <_strtol_l.constprop.0+0xc>
 800f3cc:	2b24      	cmp	r3, #36	; 0x24
 800f3ce:	d906      	bls.n	800f3de <_strtol_l.constprop.0+0x1a>
 800f3d0:	f7fd fd8a 	bl	800cee8 <__errno>
 800f3d4:	2316      	movs	r3, #22
 800f3d6:	6003      	str	r3, [r0, #0]
 800f3d8:	2000      	movs	r0, #0
 800f3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f4c4 <_strtol_l.constprop.0+0x100>
 800f3e2:	460d      	mov	r5, r1
 800f3e4:	462e      	mov	r6, r5
 800f3e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f3ee:	f017 0708 	ands.w	r7, r7, #8
 800f3f2:	d1f7      	bne.n	800f3e4 <_strtol_l.constprop.0+0x20>
 800f3f4:	2c2d      	cmp	r4, #45	; 0x2d
 800f3f6:	d132      	bne.n	800f45e <_strtol_l.constprop.0+0x9a>
 800f3f8:	782c      	ldrb	r4, [r5, #0]
 800f3fa:	2701      	movs	r7, #1
 800f3fc:	1cb5      	adds	r5, r6, #2
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d05b      	beq.n	800f4ba <_strtol_l.constprop.0+0xf6>
 800f402:	2b10      	cmp	r3, #16
 800f404:	d109      	bne.n	800f41a <_strtol_l.constprop.0+0x56>
 800f406:	2c30      	cmp	r4, #48	; 0x30
 800f408:	d107      	bne.n	800f41a <_strtol_l.constprop.0+0x56>
 800f40a:	782c      	ldrb	r4, [r5, #0]
 800f40c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f410:	2c58      	cmp	r4, #88	; 0x58
 800f412:	d14d      	bne.n	800f4b0 <_strtol_l.constprop.0+0xec>
 800f414:	786c      	ldrb	r4, [r5, #1]
 800f416:	2310      	movs	r3, #16
 800f418:	3502      	adds	r5, #2
 800f41a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f41e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f422:	f04f 0e00 	mov.w	lr, #0
 800f426:	fbb8 f9f3 	udiv	r9, r8, r3
 800f42a:	4676      	mov	r6, lr
 800f42c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f430:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f434:	f1bc 0f09 	cmp.w	ip, #9
 800f438:	d816      	bhi.n	800f468 <_strtol_l.constprop.0+0xa4>
 800f43a:	4664      	mov	r4, ip
 800f43c:	42a3      	cmp	r3, r4
 800f43e:	dd24      	ble.n	800f48a <_strtol_l.constprop.0+0xc6>
 800f440:	f1be 3fff 	cmp.w	lr, #4294967295
 800f444:	d008      	beq.n	800f458 <_strtol_l.constprop.0+0x94>
 800f446:	45b1      	cmp	r9, r6
 800f448:	d31c      	bcc.n	800f484 <_strtol_l.constprop.0+0xc0>
 800f44a:	d101      	bne.n	800f450 <_strtol_l.constprop.0+0x8c>
 800f44c:	45a2      	cmp	sl, r4
 800f44e:	db19      	blt.n	800f484 <_strtol_l.constprop.0+0xc0>
 800f450:	fb06 4603 	mla	r6, r6, r3, r4
 800f454:	f04f 0e01 	mov.w	lr, #1
 800f458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f45c:	e7e8      	b.n	800f430 <_strtol_l.constprop.0+0x6c>
 800f45e:	2c2b      	cmp	r4, #43	; 0x2b
 800f460:	bf04      	itt	eq
 800f462:	782c      	ldrbeq	r4, [r5, #0]
 800f464:	1cb5      	addeq	r5, r6, #2
 800f466:	e7ca      	b.n	800f3fe <_strtol_l.constprop.0+0x3a>
 800f468:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f46c:	f1bc 0f19 	cmp.w	ip, #25
 800f470:	d801      	bhi.n	800f476 <_strtol_l.constprop.0+0xb2>
 800f472:	3c37      	subs	r4, #55	; 0x37
 800f474:	e7e2      	b.n	800f43c <_strtol_l.constprop.0+0x78>
 800f476:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f47a:	f1bc 0f19 	cmp.w	ip, #25
 800f47e:	d804      	bhi.n	800f48a <_strtol_l.constprop.0+0xc6>
 800f480:	3c57      	subs	r4, #87	; 0x57
 800f482:	e7db      	b.n	800f43c <_strtol_l.constprop.0+0x78>
 800f484:	f04f 3eff 	mov.w	lr, #4294967295
 800f488:	e7e6      	b.n	800f458 <_strtol_l.constprop.0+0x94>
 800f48a:	f1be 3fff 	cmp.w	lr, #4294967295
 800f48e:	d105      	bne.n	800f49c <_strtol_l.constprop.0+0xd8>
 800f490:	2322      	movs	r3, #34	; 0x22
 800f492:	6003      	str	r3, [r0, #0]
 800f494:	4646      	mov	r6, r8
 800f496:	b942      	cbnz	r2, 800f4aa <_strtol_l.constprop.0+0xe6>
 800f498:	4630      	mov	r0, r6
 800f49a:	e79e      	b.n	800f3da <_strtol_l.constprop.0+0x16>
 800f49c:	b107      	cbz	r7, 800f4a0 <_strtol_l.constprop.0+0xdc>
 800f49e:	4276      	negs	r6, r6
 800f4a0:	2a00      	cmp	r2, #0
 800f4a2:	d0f9      	beq.n	800f498 <_strtol_l.constprop.0+0xd4>
 800f4a4:	f1be 0f00 	cmp.w	lr, #0
 800f4a8:	d000      	beq.n	800f4ac <_strtol_l.constprop.0+0xe8>
 800f4aa:	1e69      	subs	r1, r5, #1
 800f4ac:	6011      	str	r1, [r2, #0]
 800f4ae:	e7f3      	b.n	800f498 <_strtol_l.constprop.0+0xd4>
 800f4b0:	2430      	movs	r4, #48	; 0x30
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1b1      	bne.n	800f41a <_strtol_l.constprop.0+0x56>
 800f4b6:	2308      	movs	r3, #8
 800f4b8:	e7af      	b.n	800f41a <_strtol_l.constprop.0+0x56>
 800f4ba:	2c30      	cmp	r4, #48	; 0x30
 800f4bc:	d0a5      	beq.n	800f40a <_strtol_l.constprop.0+0x46>
 800f4be:	230a      	movs	r3, #10
 800f4c0:	e7ab      	b.n	800f41a <_strtol_l.constprop.0+0x56>
 800f4c2:	bf00      	nop
 800f4c4:	08011d21 	.word	0x08011d21

0800f4c8 <_strtol_r>:
 800f4c8:	f7ff bf7c 	b.w	800f3c4 <_strtol_l.constprop.0>

0800f4cc <__ssputs_r>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	688e      	ldr	r6, [r1, #8]
 800f4d2:	461f      	mov	r7, r3
 800f4d4:	42be      	cmp	r6, r7
 800f4d6:	680b      	ldr	r3, [r1, #0]
 800f4d8:	4682      	mov	sl, r0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	4690      	mov	r8, r2
 800f4de:	d82c      	bhi.n	800f53a <__ssputs_r+0x6e>
 800f4e0:	898a      	ldrh	r2, [r1, #12]
 800f4e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4e6:	d026      	beq.n	800f536 <__ssputs_r+0x6a>
 800f4e8:	6965      	ldr	r5, [r4, #20]
 800f4ea:	6909      	ldr	r1, [r1, #16]
 800f4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4f0:	eba3 0901 	sub.w	r9, r3, r1
 800f4f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4f8:	1c7b      	adds	r3, r7, #1
 800f4fa:	444b      	add	r3, r9
 800f4fc:	106d      	asrs	r5, r5, #1
 800f4fe:	429d      	cmp	r5, r3
 800f500:	bf38      	it	cc
 800f502:	461d      	movcc	r5, r3
 800f504:	0553      	lsls	r3, r2, #21
 800f506:	d527      	bpl.n	800f558 <__ssputs_r+0x8c>
 800f508:	4629      	mov	r1, r5
 800f50a:	f7fe fc0f 	bl	800dd2c <_malloc_r>
 800f50e:	4606      	mov	r6, r0
 800f510:	b360      	cbz	r0, 800f56c <__ssputs_r+0xa0>
 800f512:	6921      	ldr	r1, [r4, #16]
 800f514:	464a      	mov	r2, r9
 800f516:	f000 fbf5 	bl	800fd04 <memcpy>
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f524:	81a3      	strh	r3, [r4, #12]
 800f526:	6126      	str	r6, [r4, #16]
 800f528:	6165      	str	r5, [r4, #20]
 800f52a:	444e      	add	r6, r9
 800f52c:	eba5 0509 	sub.w	r5, r5, r9
 800f530:	6026      	str	r6, [r4, #0]
 800f532:	60a5      	str	r5, [r4, #8]
 800f534:	463e      	mov	r6, r7
 800f536:	42be      	cmp	r6, r7
 800f538:	d900      	bls.n	800f53c <__ssputs_r+0x70>
 800f53a:	463e      	mov	r6, r7
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	4632      	mov	r2, r6
 800f540:	4641      	mov	r1, r8
 800f542:	f000 fba3 	bl	800fc8c <memmove>
 800f546:	68a3      	ldr	r3, [r4, #8]
 800f548:	1b9b      	subs	r3, r3, r6
 800f54a:	60a3      	str	r3, [r4, #8]
 800f54c:	6823      	ldr	r3, [r4, #0]
 800f54e:	4433      	add	r3, r6
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	2000      	movs	r0, #0
 800f554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f558:	462a      	mov	r2, r5
 800f55a:	f000 ff86 	bl	801046a <_realloc_r>
 800f55e:	4606      	mov	r6, r0
 800f560:	2800      	cmp	r0, #0
 800f562:	d1e0      	bne.n	800f526 <__ssputs_r+0x5a>
 800f564:	6921      	ldr	r1, [r4, #16]
 800f566:	4650      	mov	r0, sl
 800f568:	f7fe fb6c 	bl	800dc44 <_free_r>
 800f56c:	230c      	movs	r3, #12
 800f56e:	f8ca 3000 	str.w	r3, [sl]
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	f04f 30ff 	mov.w	r0, #4294967295
 800f57e:	e7e9      	b.n	800f554 <__ssputs_r+0x88>

0800f580 <_svfiprintf_r>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	4698      	mov	r8, r3
 800f586:	898b      	ldrh	r3, [r1, #12]
 800f588:	061b      	lsls	r3, r3, #24
 800f58a:	b09d      	sub	sp, #116	; 0x74
 800f58c:	4607      	mov	r7, r0
 800f58e:	460d      	mov	r5, r1
 800f590:	4614      	mov	r4, r2
 800f592:	d50e      	bpl.n	800f5b2 <_svfiprintf_r+0x32>
 800f594:	690b      	ldr	r3, [r1, #16]
 800f596:	b963      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x32>
 800f598:	2140      	movs	r1, #64	; 0x40
 800f59a:	f7fe fbc7 	bl	800dd2c <_malloc_r>
 800f59e:	6028      	str	r0, [r5, #0]
 800f5a0:	6128      	str	r0, [r5, #16]
 800f5a2:	b920      	cbnz	r0, 800f5ae <_svfiprintf_r+0x2e>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	603b      	str	r3, [r7, #0]
 800f5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ac:	e0d0      	b.n	800f750 <_svfiprintf_r+0x1d0>
 800f5ae:	2340      	movs	r3, #64	; 0x40
 800f5b0:	616b      	str	r3, [r5, #20]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5b6:	2320      	movs	r3, #32
 800f5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c0:	2330      	movs	r3, #48	; 0x30
 800f5c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f768 <_svfiprintf_r+0x1e8>
 800f5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ca:	f04f 0901 	mov.w	r9, #1
 800f5ce:	4623      	mov	r3, r4
 800f5d0:	469a      	mov	sl, r3
 800f5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5d6:	b10a      	cbz	r2, 800f5dc <_svfiprintf_r+0x5c>
 800f5d8:	2a25      	cmp	r2, #37	; 0x25
 800f5da:	d1f9      	bne.n	800f5d0 <_svfiprintf_r+0x50>
 800f5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e0:	d00b      	beq.n	800f5fa <_svfiprintf_r+0x7a>
 800f5e2:	465b      	mov	r3, fp
 800f5e4:	4622      	mov	r2, r4
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	f7ff ff6f 	bl	800f4cc <__ssputs_r>
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	f000 80a9 	beq.w	800f746 <_svfiprintf_r+0x1c6>
 800f5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5f6:	445a      	add	r2, fp
 800f5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800f5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 80a1 	beq.w	800f746 <_svfiprintf_r+0x1c6>
 800f604:	2300      	movs	r3, #0
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f60e:	f10a 0a01 	add.w	sl, sl, #1
 800f612:	9304      	str	r3, [sp, #16]
 800f614:	9307      	str	r3, [sp, #28]
 800f616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f61a:	931a      	str	r3, [sp, #104]	; 0x68
 800f61c:	4654      	mov	r4, sl
 800f61e:	2205      	movs	r2, #5
 800f620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f624:	4850      	ldr	r0, [pc, #320]	; (800f768 <_svfiprintf_r+0x1e8>)
 800f626:	f7f0 fdfb 	bl	8000220 <memchr>
 800f62a:	9a04      	ldr	r2, [sp, #16]
 800f62c:	b9d8      	cbnz	r0, 800f666 <_svfiprintf_r+0xe6>
 800f62e:	06d0      	lsls	r0, r2, #27
 800f630:	bf44      	itt	mi
 800f632:	2320      	movmi	r3, #32
 800f634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f638:	0711      	lsls	r1, r2, #28
 800f63a:	bf44      	itt	mi
 800f63c:	232b      	movmi	r3, #43	; 0x2b
 800f63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f642:	f89a 3000 	ldrb.w	r3, [sl]
 800f646:	2b2a      	cmp	r3, #42	; 0x2a
 800f648:	d015      	beq.n	800f676 <_svfiprintf_r+0xf6>
 800f64a:	9a07      	ldr	r2, [sp, #28]
 800f64c:	4654      	mov	r4, sl
 800f64e:	2000      	movs	r0, #0
 800f650:	f04f 0c0a 	mov.w	ip, #10
 800f654:	4621      	mov	r1, r4
 800f656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f65a:	3b30      	subs	r3, #48	; 0x30
 800f65c:	2b09      	cmp	r3, #9
 800f65e:	d94d      	bls.n	800f6fc <_svfiprintf_r+0x17c>
 800f660:	b1b0      	cbz	r0, 800f690 <_svfiprintf_r+0x110>
 800f662:	9207      	str	r2, [sp, #28]
 800f664:	e014      	b.n	800f690 <_svfiprintf_r+0x110>
 800f666:	eba0 0308 	sub.w	r3, r0, r8
 800f66a:	fa09 f303 	lsl.w	r3, r9, r3
 800f66e:	4313      	orrs	r3, r2
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	46a2      	mov	sl, r4
 800f674:	e7d2      	b.n	800f61c <_svfiprintf_r+0x9c>
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	1d19      	adds	r1, r3, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	9103      	str	r1, [sp, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfbb      	ittet	lt
 800f682:	425b      	neglt	r3, r3
 800f684:	f042 0202 	orrlt.w	r2, r2, #2
 800f688:	9307      	strge	r3, [sp, #28]
 800f68a:	9307      	strlt	r3, [sp, #28]
 800f68c:	bfb8      	it	lt
 800f68e:	9204      	strlt	r2, [sp, #16]
 800f690:	7823      	ldrb	r3, [r4, #0]
 800f692:	2b2e      	cmp	r3, #46	; 0x2e
 800f694:	d10c      	bne.n	800f6b0 <_svfiprintf_r+0x130>
 800f696:	7863      	ldrb	r3, [r4, #1]
 800f698:	2b2a      	cmp	r3, #42	; 0x2a
 800f69a:	d134      	bne.n	800f706 <_svfiprintf_r+0x186>
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	1d1a      	adds	r2, r3, #4
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	9203      	str	r2, [sp, #12]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	bfb8      	it	lt
 800f6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6ac:	3402      	adds	r4, #2
 800f6ae:	9305      	str	r3, [sp, #20]
 800f6b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f778 <_svfiprintf_r+0x1f8>
 800f6b4:	7821      	ldrb	r1, [r4, #0]
 800f6b6:	2203      	movs	r2, #3
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	f7f0 fdb1 	bl	8000220 <memchr>
 800f6be:	b138      	cbz	r0, 800f6d0 <_svfiprintf_r+0x150>
 800f6c0:	9b04      	ldr	r3, [sp, #16]
 800f6c2:	eba0 000a 	sub.w	r0, r0, sl
 800f6c6:	2240      	movs	r2, #64	; 0x40
 800f6c8:	4082      	lsls	r2, r0
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	3401      	adds	r4, #1
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d4:	4825      	ldr	r0, [pc, #148]	; (800f76c <_svfiprintf_r+0x1ec>)
 800f6d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6da:	2206      	movs	r2, #6
 800f6dc:	f7f0 fda0 	bl	8000220 <memchr>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d038      	beq.n	800f756 <_svfiprintf_r+0x1d6>
 800f6e4:	4b22      	ldr	r3, [pc, #136]	; (800f770 <_svfiprintf_r+0x1f0>)
 800f6e6:	bb1b      	cbnz	r3, 800f730 <_svfiprintf_r+0x1b0>
 800f6e8:	9b03      	ldr	r3, [sp, #12]
 800f6ea:	3307      	adds	r3, #7
 800f6ec:	f023 0307 	bic.w	r3, r3, #7
 800f6f0:	3308      	adds	r3, #8
 800f6f2:	9303      	str	r3, [sp, #12]
 800f6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f6:	4433      	add	r3, r6
 800f6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f6fa:	e768      	b.n	800f5ce <_svfiprintf_r+0x4e>
 800f6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f700:	460c      	mov	r4, r1
 800f702:	2001      	movs	r0, #1
 800f704:	e7a6      	b.n	800f654 <_svfiprintf_r+0xd4>
 800f706:	2300      	movs	r3, #0
 800f708:	3401      	adds	r4, #1
 800f70a:	9305      	str	r3, [sp, #20]
 800f70c:	4619      	mov	r1, r3
 800f70e:	f04f 0c0a 	mov.w	ip, #10
 800f712:	4620      	mov	r0, r4
 800f714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f718:	3a30      	subs	r2, #48	; 0x30
 800f71a:	2a09      	cmp	r2, #9
 800f71c:	d903      	bls.n	800f726 <_svfiprintf_r+0x1a6>
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d0c6      	beq.n	800f6b0 <_svfiprintf_r+0x130>
 800f722:	9105      	str	r1, [sp, #20]
 800f724:	e7c4      	b.n	800f6b0 <_svfiprintf_r+0x130>
 800f726:	fb0c 2101 	mla	r1, ip, r1, r2
 800f72a:	4604      	mov	r4, r0
 800f72c:	2301      	movs	r3, #1
 800f72e:	e7f0      	b.n	800f712 <_svfiprintf_r+0x192>
 800f730:	ab03      	add	r3, sp, #12
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	462a      	mov	r2, r5
 800f736:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <_svfiprintf_r+0x1f4>)
 800f738:	a904      	add	r1, sp, #16
 800f73a:	4638      	mov	r0, r7
 800f73c:	f7fc fc98 	bl	800c070 <_printf_float>
 800f740:	1c42      	adds	r2, r0, #1
 800f742:	4606      	mov	r6, r0
 800f744:	d1d6      	bne.n	800f6f4 <_svfiprintf_r+0x174>
 800f746:	89ab      	ldrh	r3, [r5, #12]
 800f748:	065b      	lsls	r3, r3, #25
 800f74a:	f53f af2d 	bmi.w	800f5a8 <_svfiprintf_r+0x28>
 800f74e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f750:	b01d      	add	sp, #116	; 0x74
 800f752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f756:	ab03      	add	r3, sp, #12
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	462a      	mov	r2, r5
 800f75c:	4b05      	ldr	r3, [pc, #20]	; (800f774 <_svfiprintf_r+0x1f4>)
 800f75e:	a904      	add	r1, sp, #16
 800f760:	4638      	mov	r0, r7
 800f762:	f7fc ff29 	bl	800c5b8 <_printf_i>
 800f766:	e7eb      	b.n	800f740 <_svfiprintf_r+0x1c0>
 800f768:	08011e21 	.word	0x08011e21
 800f76c:	08011e2b 	.word	0x08011e2b
 800f770:	0800c071 	.word	0x0800c071
 800f774:	0800f4cd 	.word	0x0800f4cd
 800f778:	08011e27 	.word	0x08011e27

0800f77c <__sfputc_r>:
 800f77c:	6893      	ldr	r3, [r2, #8]
 800f77e:	3b01      	subs	r3, #1
 800f780:	2b00      	cmp	r3, #0
 800f782:	b410      	push	{r4}
 800f784:	6093      	str	r3, [r2, #8]
 800f786:	da08      	bge.n	800f79a <__sfputc_r+0x1e>
 800f788:	6994      	ldr	r4, [r2, #24]
 800f78a:	42a3      	cmp	r3, r4
 800f78c:	db01      	blt.n	800f792 <__sfputc_r+0x16>
 800f78e:	290a      	cmp	r1, #10
 800f790:	d103      	bne.n	800f79a <__sfputc_r+0x1e>
 800f792:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f796:	f000 b9e3 	b.w	800fb60 <__swbuf_r>
 800f79a:	6813      	ldr	r3, [r2, #0]
 800f79c:	1c58      	adds	r0, r3, #1
 800f79e:	6010      	str	r0, [r2, #0]
 800f7a0:	7019      	strb	r1, [r3, #0]
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <__sfputs_r>:
 800f7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	460f      	mov	r7, r1
 800f7b0:	4614      	mov	r4, r2
 800f7b2:	18d5      	adds	r5, r2, r3
 800f7b4:	42ac      	cmp	r4, r5
 800f7b6:	d101      	bne.n	800f7bc <__sfputs_r+0x12>
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	e007      	b.n	800f7cc <__sfputs_r+0x22>
 800f7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7c0:	463a      	mov	r2, r7
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7ff ffda 	bl	800f77c <__sfputc_r>
 800f7c8:	1c43      	adds	r3, r0, #1
 800f7ca:	d1f3      	bne.n	800f7b4 <__sfputs_r+0xa>
 800f7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7d0 <_vfiprintf_r>:
 800f7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d4:	460d      	mov	r5, r1
 800f7d6:	b09d      	sub	sp, #116	; 0x74
 800f7d8:	4614      	mov	r4, r2
 800f7da:	4698      	mov	r8, r3
 800f7dc:	4606      	mov	r6, r0
 800f7de:	b118      	cbz	r0, 800f7e8 <_vfiprintf_r+0x18>
 800f7e0:	6a03      	ldr	r3, [r0, #32]
 800f7e2:	b90b      	cbnz	r3, 800f7e8 <_vfiprintf_r+0x18>
 800f7e4:	f7fd fa94 	bl	800cd10 <__sinit>
 800f7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7ea:	07d9      	lsls	r1, r3, #31
 800f7ec:	d405      	bmi.n	800f7fa <_vfiprintf_r+0x2a>
 800f7ee:	89ab      	ldrh	r3, [r5, #12]
 800f7f0:	059a      	lsls	r2, r3, #22
 800f7f2:	d402      	bmi.n	800f7fa <_vfiprintf_r+0x2a>
 800f7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7f6:	f7fd fba1 	bl	800cf3c <__retarget_lock_acquire_recursive>
 800f7fa:	89ab      	ldrh	r3, [r5, #12]
 800f7fc:	071b      	lsls	r3, r3, #28
 800f7fe:	d501      	bpl.n	800f804 <_vfiprintf_r+0x34>
 800f800:	692b      	ldr	r3, [r5, #16]
 800f802:	b99b      	cbnz	r3, 800f82c <_vfiprintf_r+0x5c>
 800f804:	4629      	mov	r1, r5
 800f806:	4630      	mov	r0, r6
 800f808:	f000 f9e8 	bl	800fbdc <__swsetup_r>
 800f80c:	b170      	cbz	r0, 800f82c <_vfiprintf_r+0x5c>
 800f80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f810:	07dc      	lsls	r4, r3, #31
 800f812:	d504      	bpl.n	800f81e <_vfiprintf_r+0x4e>
 800f814:	f04f 30ff 	mov.w	r0, #4294967295
 800f818:	b01d      	add	sp, #116	; 0x74
 800f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81e:	89ab      	ldrh	r3, [r5, #12]
 800f820:	0598      	lsls	r0, r3, #22
 800f822:	d4f7      	bmi.n	800f814 <_vfiprintf_r+0x44>
 800f824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f826:	f7fd fb8a 	bl	800cf3e <__retarget_lock_release_recursive>
 800f82a:	e7f3      	b.n	800f814 <_vfiprintf_r+0x44>
 800f82c:	2300      	movs	r3, #0
 800f82e:	9309      	str	r3, [sp, #36]	; 0x24
 800f830:	2320      	movs	r3, #32
 800f832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f836:	f8cd 800c 	str.w	r8, [sp, #12]
 800f83a:	2330      	movs	r3, #48	; 0x30
 800f83c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f9f0 <_vfiprintf_r+0x220>
 800f840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f844:	f04f 0901 	mov.w	r9, #1
 800f848:	4623      	mov	r3, r4
 800f84a:	469a      	mov	sl, r3
 800f84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f850:	b10a      	cbz	r2, 800f856 <_vfiprintf_r+0x86>
 800f852:	2a25      	cmp	r2, #37	; 0x25
 800f854:	d1f9      	bne.n	800f84a <_vfiprintf_r+0x7a>
 800f856:	ebba 0b04 	subs.w	fp, sl, r4
 800f85a:	d00b      	beq.n	800f874 <_vfiprintf_r+0xa4>
 800f85c:	465b      	mov	r3, fp
 800f85e:	4622      	mov	r2, r4
 800f860:	4629      	mov	r1, r5
 800f862:	4630      	mov	r0, r6
 800f864:	f7ff ffa1 	bl	800f7aa <__sfputs_r>
 800f868:	3001      	adds	r0, #1
 800f86a:	f000 80a9 	beq.w	800f9c0 <_vfiprintf_r+0x1f0>
 800f86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f870:	445a      	add	r2, fp
 800f872:	9209      	str	r2, [sp, #36]	; 0x24
 800f874:	f89a 3000 	ldrb.w	r3, [sl]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 80a1 	beq.w	800f9c0 <_vfiprintf_r+0x1f0>
 800f87e:	2300      	movs	r3, #0
 800f880:	f04f 32ff 	mov.w	r2, #4294967295
 800f884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f888:	f10a 0a01 	add.w	sl, sl, #1
 800f88c:	9304      	str	r3, [sp, #16]
 800f88e:	9307      	str	r3, [sp, #28]
 800f890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f894:	931a      	str	r3, [sp, #104]	; 0x68
 800f896:	4654      	mov	r4, sl
 800f898:	2205      	movs	r2, #5
 800f89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89e:	4854      	ldr	r0, [pc, #336]	; (800f9f0 <_vfiprintf_r+0x220>)
 800f8a0:	f7f0 fcbe 	bl	8000220 <memchr>
 800f8a4:	9a04      	ldr	r2, [sp, #16]
 800f8a6:	b9d8      	cbnz	r0, 800f8e0 <_vfiprintf_r+0x110>
 800f8a8:	06d1      	lsls	r1, r2, #27
 800f8aa:	bf44      	itt	mi
 800f8ac:	2320      	movmi	r3, #32
 800f8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b2:	0713      	lsls	r3, r2, #28
 800f8b4:	bf44      	itt	mi
 800f8b6:	232b      	movmi	r3, #43	; 0x2b
 800f8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c2:	d015      	beq.n	800f8f0 <_vfiprintf_r+0x120>
 800f8c4:	9a07      	ldr	r2, [sp, #28]
 800f8c6:	4654      	mov	r4, sl
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f04f 0c0a 	mov.w	ip, #10
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8d4:	3b30      	subs	r3, #48	; 0x30
 800f8d6:	2b09      	cmp	r3, #9
 800f8d8:	d94d      	bls.n	800f976 <_vfiprintf_r+0x1a6>
 800f8da:	b1b0      	cbz	r0, 800f90a <_vfiprintf_r+0x13a>
 800f8dc:	9207      	str	r2, [sp, #28]
 800f8de:	e014      	b.n	800f90a <_vfiprintf_r+0x13a>
 800f8e0:	eba0 0308 	sub.w	r3, r0, r8
 800f8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	9304      	str	r3, [sp, #16]
 800f8ec:	46a2      	mov	sl, r4
 800f8ee:	e7d2      	b.n	800f896 <_vfiprintf_r+0xc6>
 800f8f0:	9b03      	ldr	r3, [sp, #12]
 800f8f2:	1d19      	adds	r1, r3, #4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	9103      	str	r1, [sp, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	bfbb      	ittet	lt
 800f8fc:	425b      	neglt	r3, r3
 800f8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f902:	9307      	strge	r3, [sp, #28]
 800f904:	9307      	strlt	r3, [sp, #28]
 800f906:	bfb8      	it	lt
 800f908:	9204      	strlt	r2, [sp, #16]
 800f90a:	7823      	ldrb	r3, [r4, #0]
 800f90c:	2b2e      	cmp	r3, #46	; 0x2e
 800f90e:	d10c      	bne.n	800f92a <_vfiprintf_r+0x15a>
 800f910:	7863      	ldrb	r3, [r4, #1]
 800f912:	2b2a      	cmp	r3, #42	; 0x2a
 800f914:	d134      	bne.n	800f980 <_vfiprintf_r+0x1b0>
 800f916:	9b03      	ldr	r3, [sp, #12]
 800f918:	1d1a      	adds	r2, r3, #4
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	9203      	str	r2, [sp, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	bfb8      	it	lt
 800f922:	f04f 33ff 	movlt.w	r3, #4294967295
 800f926:	3402      	adds	r4, #2
 800f928:	9305      	str	r3, [sp, #20]
 800f92a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fa00 <_vfiprintf_r+0x230>
 800f92e:	7821      	ldrb	r1, [r4, #0]
 800f930:	2203      	movs	r2, #3
 800f932:	4650      	mov	r0, sl
 800f934:	f7f0 fc74 	bl	8000220 <memchr>
 800f938:	b138      	cbz	r0, 800f94a <_vfiprintf_r+0x17a>
 800f93a:	9b04      	ldr	r3, [sp, #16]
 800f93c:	eba0 000a 	sub.w	r0, r0, sl
 800f940:	2240      	movs	r2, #64	; 0x40
 800f942:	4082      	lsls	r2, r0
 800f944:	4313      	orrs	r3, r2
 800f946:	3401      	adds	r4, #1
 800f948:	9304      	str	r3, [sp, #16]
 800f94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f94e:	4829      	ldr	r0, [pc, #164]	; (800f9f4 <_vfiprintf_r+0x224>)
 800f950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f954:	2206      	movs	r2, #6
 800f956:	f7f0 fc63 	bl	8000220 <memchr>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d03f      	beq.n	800f9de <_vfiprintf_r+0x20e>
 800f95e:	4b26      	ldr	r3, [pc, #152]	; (800f9f8 <_vfiprintf_r+0x228>)
 800f960:	bb1b      	cbnz	r3, 800f9aa <_vfiprintf_r+0x1da>
 800f962:	9b03      	ldr	r3, [sp, #12]
 800f964:	3307      	adds	r3, #7
 800f966:	f023 0307 	bic.w	r3, r3, #7
 800f96a:	3308      	adds	r3, #8
 800f96c:	9303      	str	r3, [sp, #12]
 800f96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f970:	443b      	add	r3, r7
 800f972:	9309      	str	r3, [sp, #36]	; 0x24
 800f974:	e768      	b.n	800f848 <_vfiprintf_r+0x78>
 800f976:	fb0c 3202 	mla	r2, ip, r2, r3
 800f97a:	460c      	mov	r4, r1
 800f97c:	2001      	movs	r0, #1
 800f97e:	e7a6      	b.n	800f8ce <_vfiprintf_r+0xfe>
 800f980:	2300      	movs	r3, #0
 800f982:	3401      	adds	r4, #1
 800f984:	9305      	str	r3, [sp, #20]
 800f986:	4619      	mov	r1, r3
 800f988:	f04f 0c0a 	mov.w	ip, #10
 800f98c:	4620      	mov	r0, r4
 800f98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f992:	3a30      	subs	r2, #48	; 0x30
 800f994:	2a09      	cmp	r2, #9
 800f996:	d903      	bls.n	800f9a0 <_vfiprintf_r+0x1d0>
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d0c6      	beq.n	800f92a <_vfiprintf_r+0x15a>
 800f99c:	9105      	str	r1, [sp, #20]
 800f99e:	e7c4      	b.n	800f92a <_vfiprintf_r+0x15a>
 800f9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e7f0      	b.n	800f98c <_vfiprintf_r+0x1bc>
 800f9aa:	ab03      	add	r3, sp, #12
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	4b12      	ldr	r3, [pc, #72]	; (800f9fc <_vfiprintf_r+0x22c>)
 800f9b2:	a904      	add	r1, sp, #16
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7fc fb5b 	bl	800c070 <_printf_float>
 800f9ba:	4607      	mov	r7, r0
 800f9bc:	1c78      	adds	r0, r7, #1
 800f9be:	d1d6      	bne.n	800f96e <_vfiprintf_r+0x19e>
 800f9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9c2:	07d9      	lsls	r1, r3, #31
 800f9c4:	d405      	bmi.n	800f9d2 <_vfiprintf_r+0x202>
 800f9c6:	89ab      	ldrh	r3, [r5, #12]
 800f9c8:	059a      	lsls	r2, r3, #22
 800f9ca:	d402      	bmi.n	800f9d2 <_vfiprintf_r+0x202>
 800f9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9ce:	f7fd fab6 	bl	800cf3e <__retarget_lock_release_recursive>
 800f9d2:	89ab      	ldrh	r3, [r5, #12]
 800f9d4:	065b      	lsls	r3, r3, #25
 800f9d6:	f53f af1d 	bmi.w	800f814 <_vfiprintf_r+0x44>
 800f9da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9dc:	e71c      	b.n	800f818 <_vfiprintf_r+0x48>
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <_vfiprintf_r+0x22c>)
 800f9e6:	a904      	add	r1, sp, #16
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7fc fde5 	bl	800c5b8 <_printf_i>
 800f9ee:	e7e4      	b.n	800f9ba <_vfiprintf_r+0x1ea>
 800f9f0:	08011e21 	.word	0x08011e21
 800f9f4:	08011e2b 	.word	0x08011e2b
 800f9f8:	0800c071 	.word	0x0800c071
 800f9fc:	0800f7ab 	.word	0x0800f7ab
 800fa00:	08011e27 	.word	0x08011e27

0800fa04 <__sflush_r>:
 800fa04:	898a      	ldrh	r2, [r1, #12]
 800fa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	0710      	lsls	r0, r2, #28
 800fa0e:	460c      	mov	r4, r1
 800fa10:	d458      	bmi.n	800fac4 <__sflush_r+0xc0>
 800fa12:	684b      	ldr	r3, [r1, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	dc05      	bgt.n	800fa24 <__sflush_r+0x20>
 800fa18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	dc02      	bgt.n	800fa24 <__sflush_r+0x20>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa26:	2e00      	cmp	r6, #0
 800fa28:	d0f9      	beq.n	800fa1e <__sflush_r+0x1a>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa30:	682f      	ldr	r7, [r5, #0]
 800fa32:	6a21      	ldr	r1, [r4, #32]
 800fa34:	602b      	str	r3, [r5, #0]
 800fa36:	d032      	beq.n	800fa9e <__sflush_r+0x9a>
 800fa38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	075a      	lsls	r2, r3, #29
 800fa3e:	d505      	bpl.n	800fa4c <__sflush_r+0x48>
 800fa40:	6863      	ldr	r3, [r4, #4]
 800fa42:	1ac0      	subs	r0, r0, r3
 800fa44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa46:	b10b      	cbz	r3, 800fa4c <__sflush_r+0x48>
 800fa48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa4a:	1ac0      	subs	r0, r0, r3
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4602      	mov	r2, r0
 800fa50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa52:	6a21      	ldr	r1, [r4, #32]
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b0      	blx	r6
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	d106      	bne.n	800fa6c <__sflush_r+0x68>
 800fa5e:	6829      	ldr	r1, [r5, #0]
 800fa60:	291d      	cmp	r1, #29
 800fa62:	d82b      	bhi.n	800fabc <__sflush_r+0xb8>
 800fa64:	4a29      	ldr	r2, [pc, #164]	; (800fb0c <__sflush_r+0x108>)
 800fa66:	410a      	asrs	r2, r1
 800fa68:	07d6      	lsls	r6, r2, #31
 800fa6a:	d427      	bmi.n	800fabc <__sflush_r+0xb8>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	6062      	str	r2, [r4, #4]
 800fa70:	04d9      	lsls	r1, r3, #19
 800fa72:	6922      	ldr	r2, [r4, #16]
 800fa74:	6022      	str	r2, [r4, #0]
 800fa76:	d504      	bpl.n	800fa82 <__sflush_r+0x7e>
 800fa78:	1c42      	adds	r2, r0, #1
 800fa7a:	d101      	bne.n	800fa80 <__sflush_r+0x7c>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b903      	cbnz	r3, 800fa82 <__sflush_r+0x7e>
 800fa80:	6560      	str	r0, [r4, #84]	; 0x54
 800fa82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa84:	602f      	str	r7, [r5, #0]
 800fa86:	2900      	cmp	r1, #0
 800fa88:	d0c9      	beq.n	800fa1e <__sflush_r+0x1a>
 800fa8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa8e:	4299      	cmp	r1, r3
 800fa90:	d002      	beq.n	800fa98 <__sflush_r+0x94>
 800fa92:	4628      	mov	r0, r5
 800fa94:	f7fe f8d6 	bl	800dc44 <_free_r>
 800fa98:	2000      	movs	r0, #0
 800fa9a:	6360      	str	r0, [r4, #52]	; 0x34
 800fa9c:	e7c0      	b.n	800fa20 <__sflush_r+0x1c>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	4628      	mov	r0, r5
 800faa2:	47b0      	blx	r6
 800faa4:	1c41      	adds	r1, r0, #1
 800faa6:	d1c8      	bne.n	800fa3a <__sflush_r+0x36>
 800faa8:	682b      	ldr	r3, [r5, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d0c5      	beq.n	800fa3a <__sflush_r+0x36>
 800faae:	2b1d      	cmp	r3, #29
 800fab0:	d001      	beq.n	800fab6 <__sflush_r+0xb2>
 800fab2:	2b16      	cmp	r3, #22
 800fab4:	d101      	bne.n	800faba <__sflush_r+0xb6>
 800fab6:	602f      	str	r7, [r5, #0]
 800fab8:	e7b1      	b.n	800fa1e <__sflush_r+0x1a>
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac0:	81a3      	strh	r3, [r4, #12]
 800fac2:	e7ad      	b.n	800fa20 <__sflush_r+0x1c>
 800fac4:	690f      	ldr	r7, [r1, #16]
 800fac6:	2f00      	cmp	r7, #0
 800fac8:	d0a9      	beq.n	800fa1e <__sflush_r+0x1a>
 800faca:	0793      	lsls	r3, r2, #30
 800facc:	680e      	ldr	r6, [r1, #0]
 800face:	bf08      	it	eq
 800fad0:	694b      	ldreq	r3, [r1, #20]
 800fad2:	600f      	str	r7, [r1, #0]
 800fad4:	bf18      	it	ne
 800fad6:	2300      	movne	r3, #0
 800fad8:	eba6 0807 	sub.w	r8, r6, r7
 800fadc:	608b      	str	r3, [r1, #8]
 800fade:	f1b8 0f00 	cmp.w	r8, #0
 800fae2:	dd9c      	ble.n	800fa1e <__sflush_r+0x1a>
 800fae4:	6a21      	ldr	r1, [r4, #32]
 800fae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fae8:	4643      	mov	r3, r8
 800faea:	463a      	mov	r2, r7
 800faec:	4628      	mov	r0, r5
 800faee:	47b0      	blx	r6
 800faf0:	2800      	cmp	r0, #0
 800faf2:	dc06      	bgt.n	800fb02 <__sflush_r+0xfe>
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	e78e      	b.n	800fa20 <__sflush_r+0x1c>
 800fb02:	4407      	add	r7, r0
 800fb04:	eba8 0800 	sub.w	r8, r8, r0
 800fb08:	e7e9      	b.n	800fade <__sflush_r+0xda>
 800fb0a:	bf00      	nop
 800fb0c:	dfbffffe 	.word	0xdfbffffe

0800fb10 <_fflush_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	690b      	ldr	r3, [r1, #16]
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	b913      	cbnz	r3, 800fb20 <_fflush_r+0x10>
 800fb1a:	2500      	movs	r5, #0
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	bd38      	pop	{r3, r4, r5, pc}
 800fb20:	b118      	cbz	r0, 800fb2a <_fflush_r+0x1a>
 800fb22:	6a03      	ldr	r3, [r0, #32]
 800fb24:	b90b      	cbnz	r3, 800fb2a <_fflush_r+0x1a>
 800fb26:	f7fd f8f3 	bl	800cd10 <__sinit>
 800fb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d0f3      	beq.n	800fb1a <_fflush_r+0xa>
 800fb32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb34:	07d0      	lsls	r0, r2, #31
 800fb36:	d404      	bmi.n	800fb42 <_fflush_r+0x32>
 800fb38:	0599      	lsls	r1, r3, #22
 800fb3a:	d402      	bmi.n	800fb42 <_fflush_r+0x32>
 800fb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb3e:	f7fd f9fd 	bl	800cf3c <__retarget_lock_acquire_recursive>
 800fb42:	4628      	mov	r0, r5
 800fb44:	4621      	mov	r1, r4
 800fb46:	f7ff ff5d 	bl	800fa04 <__sflush_r>
 800fb4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb4c:	07da      	lsls	r2, r3, #31
 800fb4e:	4605      	mov	r5, r0
 800fb50:	d4e4      	bmi.n	800fb1c <_fflush_r+0xc>
 800fb52:	89a3      	ldrh	r3, [r4, #12]
 800fb54:	059b      	lsls	r3, r3, #22
 800fb56:	d4e1      	bmi.n	800fb1c <_fflush_r+0xc>
 800fb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb5a:	f7fd f9f0 	bl	800cf3e <__retarget_lock_release_recursive>
 800fb5e:	e7dd      	b.n	800fb1c <_fflush_r+0xc>

0800fb60 <__swbuf_r>:
 800fb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb62:	460e      	mov	r6, r1
 800fb64:	4614      	mov	r4, r2
 800fb66:	4605      	mov	r5, r0
 800fb68:	b118      	cbz	r0, 800fb72 <__swbuf_r+0x12>
 800fb6a:	6a03      	ldr	r3, [r0, #32]
 800fb6c:	b90b      	cbnz	r3, 800fb72 <__swbuf_r+0x12>
 800fb6e:	f7fd f8cf 	bl	800cd10 <__sinit>
 800fb72:	69a3      	ldr	r3, [r4, #24]
 800fb74:	60a3      	str	r3, [r4, #8]
 800fb76:	89a3      	ldrh	r3, [r4, #12]
 800fb78:	071a      	lsls	r2, r3, #28
 800fb7a:	d525      	bpl.n	800fbc8 <__swbuf_r+0x68>
 800fb7c:	6923      	ldr	r3, [r4, #16]
 800fb7e:	b31b      	cbz	r3, 800fbc8 <__swbuf_r+0x68>
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	6922      	ldr	r2, [r4, #16]
 800fb84:	1a98      	subs	r0, r3, r2
 800fb86:	6963      	ldr	r3, [r4, #20]
 800fb88:	b2f6      	uxtb	r6, r6
 800fb8a:	4283      	cmp	r3, r0
 800fb8c:	4637      	mov	r7, r6
 800fb8e:	dc04      	bgt.n	800fb9a <__swbuf_r+0x3a>
 800fb90:	4621      	mov	r1, r4
 800fb92:	4628      	mov	r0, r5
 800fb94:	f7ff ffbc 	bl	800fb10 <_fflush_r>
 800fb98:	b9e0      	cbnz	r0, 800fbd4 <__swbuf_r+0x74>
 800fb9a:	68a3      	ldr	r3, [r4, #8]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	60a3      	str	r3, [r4, #8]
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	6022      	str	r2, [r4, #0]
 800fba6:	701e      	strb	r6, [r3, #0]
 800fba8:	6962      	ldr	r2, [r4, #20]
 800fbaa:	1c43      	adds	r3, r0, #1
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d004      	beq.n	800fbba <__swbuf_r+0x5a>
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	07db      	lsls	r3, r3, #31
 800fbb4:	d506      	bpl.n	800fbc4 <__swbuf_r+0x64>
 800fbb6:	2e0a      	cmp	r6, #10
 800fbb8:	d104      	bne.n	800fbc4 <__swbuf_r+0x64>
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	f7ff ffa7 	bl	800fb10 <_fflush_r>
 800fbc2:	b938      	cbnz	r0, 800fbd4 <__swbuf_r+0x74>
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc8:	4621      	mov	r1, r4
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f000 f806 	bl	800fbdc <__swsetup_r>
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	d0d5      	beq.n	800fb80 <__swbuf_r+0x20>
 800fbd4:	f04f 37ff 	mov.w	r7, #4294967295
 800fbd8:	e7f4      	b.n	800fbc4 <__swbuf_r+0x64>
	...

0800fbdc <__swsetup_r>:
 800fbdc:	b538      	push	{r3, r4, r5, lr}
 800fbde:	4b2a      	ldr	r3, [pc, #168]	; (800fc88 <__swsetup_r+0xac>)
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	6818      	ldr	r0, [r3, #0]
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	b118      	cbz	r0, 800fbf0 <__swsetup_r+0x14>
 800fbe8:	6a03      	ldr	r3, [r0, #32]
 800fbea:	b90b      	cbnz	r3, 800fbf0 <__swsetup_r+0x14>
 800fbec:	f7fd f890 	bl	800cd10 <__sinit>
 800fbf0:	89a3      	ldrh	r3, [r4, #12]
 800fbf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbf6:	0718      	lsls	r0, r3, #28
 800fbf8:	d422      	bmi.n	800fc40 <__swsetup_r+0x64>
 800fbfa:	06d9      	lsls	r1, r3, #27
 800fbfc:	d407      	bmi.n	800fc0e <__swsetup_r+0x32>
 800fbfe:	2309      	movs	r3, #9
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	e034      	b.n	800fc78 <__swsetup_r+0x9c>
 800fc0e:	0758      	lsls	r0, r3, #29
 800fc10:	d512      	bpl.n	800fc38 <__swsetup_r+0x5c>
 800fc12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc14:	b141      	cbz	r1, 800fc28 <__swsetup_r+0x4c>
 800fc16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc1a:	4299      	cmp	r1, r3
 800fc1c:	d002      	beq.n	800fc24 <__swsetup_r+0x48>
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f7fe f810 	bl	800dc44 <_free_r>
 800fc24:	2300      	movs	r3, #0
 800fc26:	6363      	str	r3, [r4, #52]	; 0x34
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc2e:	81a3      	strh	r3, [r4, #12]
 800fc30:	2300      	movs	r3, #0
 800fc32:	6063      	str	r3, [r4, #4]
 800fc34:	6923      	ldr	r3, [r4, #16]
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	f043 0308 	orr.w	r3, r3, #8
 800fc3e:	81a3      	strh	r3, [r4, #12]
 800fc40:	6923      	ldr	r3, [r4, #16]
 800fc42:	b94b      	cbnz	r3, 800fc58 <__swsetup_r+0x7c>
 800fc44:	89a3      	ldrh	r3, [r4, #12]
 800fc46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc4e:	d003      	beq.n	800fc58 <__swsetup_r+0x7c>
 800fc50:	4621      	mov	r1, r4
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 fc7e 	bl	8010554 <__smakebuf_r>
 800fc58:	89a0      	ldrh	r0, [r4, #12]
 800fc5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc5e:	f010 0301 	ands.w	r3, r0, #1
 800fc62:	d00a      	beq.n	800fc7a <__swsetup_r+0x9e>
 800fc64:	2300      	movs	r3, #0
 800fc66:	60a3      	str	r3, [r4, #8]
 800fc68:	6963      	ldr	r3, [r4, #20]
 800fc6a:	425b      	negs	r3, r3
 800fc6c:	61a3      	str	r3, [r4, #24]
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	b943      	cbnz	r3, 800fc84 <__swsetup_r+0xa8>
 800fc72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc76:	d1c4      	bne.n	800fc02 <__swsetup_r+0x26>
 800fc78:	bd38      	pop	{r3, r4, r5, pc}
 800fc7a:	0781      	lsls	r1, r0, #30
 800fc7c:	bf58      	it	pl
 800fc7e:	6963      	ldrpl	r3, [r4, #20]
 800fc80:	60a3      	str	r3, [r4, #8]
 800fc82:	e7f4      	b.n	800fc6e <__swsetup_r+0x92>
 800fc84:	2000      	movs	r0, #0
 800fc86:	e7f7      	b.n	800fc78 <__swsetup_r+0x9c>
 800fc88:	20000068 	.word	0x20000068

0800fc8c <memmove>:
 800fc8c:	4288      	cmp	r0, r1
 800fc8e:	b510      	push	{r4, lr}
 800fc90:	eb01 0402 	add.w	r4, r1, r2
 800fc94:	d902      	bls.n	800fc9c <memmove+0x10>
 800fc96:	4284      	cmp	r4, r0
 800fc98:	4623      	mov	r3, r4
 800fc9a:	d807      	bhi.n	800fcac <memmove+0x20>
 800fc9c:	1e43      	subs	r3, r0, #1
 800fc9e:	42a1      	cmp	r1, r4
 800fca0:	d008      	beq.n	800fcb4 <memmove+0x28>
 800fca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcaa:	e7f8      	b.n	800fc9e <memmove+0x12>
 800fcac:	4402      	add	r2, r0
 800fcae:	4601      	mov	r1, r0
 800fcb0:	428a      	cmp	r2, r1
 800fcb2:	d100      	bne.n	800fcb6 <memmove+0x2a>
 800fcb4:	bd10      	pop	{r4, pc}
 800fcb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcbe:	e7f7      	b.n	800fcb0 <memmove+0x24>

0800fcc0 <strncmp>:
 800fcc0:	b510      	push	{r4, lr}
 800fcc2:	b16a      	cbz	r2, 800fce0 <strncmp+0x20>
 800fcc4:	3901      	subs	r1, #1
 800fcc6:	1884      	adds	r4, r0, r2
 800fcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fccc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d103      	bne.n	800fcdc <strncmp+0x1c>
 800fcd4:	42a0      	cmp	r0, r4
 800fcd6:	d001      	beq.n	800fcdc <strncmp+0x1c>
 800fcd8:	2a00      	cmp	r2, #0
 800fcda:	d1f5      	bne.n	800fcc8 <strncmp+0x8>
 800fcdc:	1ad0      	subs	r0, r2, r3
 800fcde:	bd10      	pop	{r4, pc}
 800fce0:	4610      	mov	r0, r2
 800fce2:	e7fc      	b.n	800fcde <strncmp+0x1e>

0800fce4 <_sbrk_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4d06      	ldr	r5, [pc, #24]	; (800fd00 <_sbrk_r+0x1c>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	602b      	str	r3, [r5, #0]
 800fcf0:	f7f2 fa76 	bl	80021e0 <_sbrk>
 800fcf4:	1c43      	adds	r3, r0, #1
 800fcf6:	d102      	bne.n	800fcfe <_sbrk_r+0x1a>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	b103      	cbz	r3, 800fcfe <_sbrk_r+0x1a>
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	20000804 	.word	0x20000804

0800fd04 <memcpy>:
 800fd04:	440a      	add	r2, r1
 800fd06:	4291      	cmp	r1, r2
 800fd08:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd0c:	d100      	bne.n	800fd10 <memcpy+0xc>
 800fd0e:	4770      	bx	lr
 800fd10:	b510      	push	{r4, lr}
 800fd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd1a:	4291      	cmp	r1, r2
 800fd1c:	d1f9      	bne.n	800fd12 <memcpy+0xe>
 800fd1e:	bd10      	pop	{r4, pc}

0800fd20 <nan>:
 800fd20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd28 <nan+0x8>
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	00000000 	.word	0x00000000
 800fd2c:	7ff80000 	.word	0x7ff80000

0800fd30 <__assert_func>:
 800fd30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd32:	4614      	mov	r4, r2
 800fd34:	461a      	mov	r2, r3
 800fd36:	4b09      	ldr	r3, [pc, #36]	; (800fd5c <__assert_func+0x2c>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	68d8      	ldr	r0, [r3, #12]
 800fd3e:	b14c      	cbz	r4, 800fd54 <__assert_func+0x24>
 800fd40:	4b07      	ldr	r3, [pc, #28]	; (800fd60 <__assert_func+0x30>)
 800fd42:	9100      	str	r1, [sp, #0]
 800fd44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd48:	4906      	ldr	r1, [pc, #24]	; (800fd64 <__assert_func+0x34>)
 800fd4a:	462b      	mov	r3, r5
 800fd4c:	f000 fbca 	bl	80104e4 <fiprintf>
 800fd50:	f000 fc5e 	bl	8010610 <abort>
 800fd54:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <__assert_func+0x38>)
 800fd56:	461c      	mov	r4, r3
 800fd58:	e7f3      	b.n	800fd42 <__assert_func+0x12>
 800fd5a:	bf00      	nop
 800fd5c:	20000068 	.word	0x20000068
 800fd60:	08011e3a 	.word	0x08011e3a
 800fd64:	08011e47 	.word	0x08011e47
 800fd68:	08011e75 	.word	0x08011e75

0800fd6c <_calloc_r>:
 800fd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd6e:	fba1 2402 	umull	r2, r4, r1, r2
 800fd72:	b94c      	cbnz	r4, 800fd88 <_calloc_r+0x1c>
 800fd74:	4611      	mov	r1, r2
 800fd76:	9201      	str	r2, [sp, #4]
 800fd78:	f7fd ffd8 	bl	800dd2c <_malloc_r>
 800fd7c:	9a01      	ldr	r2, [sp, #4]
 800fd7e:	4605      	mov	r5, r0
 800fd80:	b930      	cbnz	r0, 800fd90 <_calloc_r+0x24>
 800fd82:	4628      	mov	r0, r5
 800fd84:	b003      	add	sp, #12
 800fd86:	bd30      	pop	{r4, r5, pc}
 800fd88:	220c      	movs	r2, #12
 800fd8a:	6002      	str	r2, [r0, #0]
 800fd8c:	2500      	movs	r5, #0
 800fd8e:	e7f8      	b.n	800fd82 <_calloc_r+0x16>
 800fd90:	4621      	mov	r1, r4
 800fd92:	f7fd f856 	bl	800ce42 <memset>
 800fd96:	e7f4      	b.n	800fd82 <_calloc_r+0x16>

0800fd98 <rshift>:
 800fd98:	6903      	ldr	r3, [r0, #16]
 800fd9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fda2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fda6:	f100 0414 	add.w	r4, r0, #20
 800fdaa:	dd45      	ble.n	800fe38 <rshift+0xa0>
 800fdac:	f011 011f 	ands.w	r1, r1, #31
 800fdb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fdb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fdb8:	d10c      	bne.n	800fdd4 <rshift+0x3c>
 800fdba:	f100 0710 	add.w	r7, r0, #16
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	42b1      	cmp	r1, r6
 800fdc2:	d334      	bcc.n	800fe2e <rshift+0x96>
 800fdc4:	1a9b      	subs	r3, r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	1eea      	subs	r2, r5, #3
 800fdca:	4296      	cmp	r6, r2
 800fdcc:	bf38      	it	cc
 800fdce:	2300      	movcc	r3, #0
 800fdd0:	4423      	add	r3, r4
 800fdd2:	e015      	b.n	800fe00 <rshift+0x68>
 800fdd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdd8:	f1c1 0820 	rsb	r8, r1, #32
 800fddc:	40cf      	lsrs	r7, r1
 800fdde:	f105 0e04 	add.w	lr, r5, #4
 800fde2:	46a1      	mov	r9, r4
 800fde4:	4576      	cmp	r6, lr
 800fde6:	46f4      	mov	ip, lr
 800fde8:	d815      	bhi.n	800fe16 <rshift+0x7e>
 800fdea:	1a9a      	subs	r2, r3, r2
 800fdec:	0092      	lsls	r2, r2, #2
 800fdee:	3a04      	subs	r2, #4
 800fdf0:	3501      	adds	r5, #1
 800fdf2:	42ae      	cmp	r6, r5
 800fdf4:	bf38      	it	cc
 800fdf6:	2200      	movcc	r2, #0
 800fdf8:	18a3      	adds	r3, r4, r2
 800fdfa:	50a7      	str	r7, [r4, r2]
 800fdfc:	b107      	cbz	r7, 800fe00 <rshift+0x68>
 800fdfe:	3304      	adds	r3, #4
 800fe00:	1b1a      	subs	r2, r3, r4
 800fe02:	42a3      	cmp	r3, r4
 800fe04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe08:	bf08      	it	eq
 800fe0a:	2300      	moveq	r3, #0
 800fe0c:	6102      	str	r2, [r0, #16]
 800fe0e:	bf08      	it	eq
 800fe10:	6143      	streq	r3, [r0, #20]
 800fe12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe16:	f8dc c000 	ldr.w	ip, [ip]
 800fe1a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe1e:	ea4c 0707 	orr.w	r7, ip, r7
 800fe22:	f849 7b04 	str.w	r7, [r9], #4
 800fe26:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe2a:	40cf      	lsrs	r7, r1
 800fe2c:	e7da      	b.n	800fde4 <rshift+0x4c>
 800fe2e:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe32:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe36:	e7c3      	b.n	800fdc0 <rshift+0x28>
 800fe38:	4623      	mov	r3, r4
 800fe3a:	e7e1      	b.n	800fe00 <rshift+0x68>

0800fe3c <__hexdig_fun>:
 800fe3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe40:	2b09      	cmp	r3, #9
 800fe42:	d802      	bhi.n	800fe4a <__hexdig_fun+0xe>
 800fe44:	3820      	subs	r0, #32
 800fe46:	b2c0      	uxtb	r0, r0
 800fe48:	4770      	bx	lr
 800fe4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe4e:	2b05      	cmp	r3, #5
 800fe50:	d801      	bhi.n	800fe56 <__hexdig_fun+0x1a>
 800fe52:	3847      	subs	r0, #71	; 0x47
 800fe54:	e7f7      	b.n	800fe46 <__hexdig_fun+0xa>
 800fe56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe5a:	2b05      	cmp	r3, #5
 800fe5c:	d801      	bhi.n	800fe62 <__hexdig_fun+0x26>
 800fe5e:	3827      	subs	r0, #39	; 0x27
 800fe60:	e7f1      	b.n	800fe46 <__hexdig_fun+0xa>
 800fe62:	2000      	movs	r0, #0
 800fe64:	4770      	bx	lr
	...

0800fe68 <__gethex>:
 800fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	4617      	mov	r7, r2
 800fe6e:	680a      	ldr	r2, [r1, #0]
 800fe70:	b085      	sub	sp, #20
 800fe72:	f102 0b02 	add.w	fp, r2, #2
 800fe76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe7e:	4681      	mov	r9, r0
 800fe80:	468a      	mov	sl, r1
 800fe82:	9302      	str	r3, [sp, #8]
 800fe84:	32fe      	adds	r2, #254	; 0xfe
 800fe86:	eb02 030b 	add.w	r3, r2, fp
 800fe8a:	46d8      	mov	r8, fp
 800fe8c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	2830      	cmp	r0, #48	; 0x30
 800fe94:	d0f7      	beq.n	800fe86 <__gethex+0x1e>
 800fe96:	f7ff ffd1 	bl	800fe3c <__hexdig_fun>
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d138      	bne.n	800ff12 <__gethex+0xaa>
 800fea0:	49a7      	ldr	r1, [pc, #668]	; (8010140 <__gethex+0x2d8>)
 800fea2:	2201      	movs	r2, #1
 800fea4:	4640      	mov	r0, r8
 800fea6:	f7ff ff0b 	bl	800fcc0 <strncmp>
 800feaa:	4606      	mov	r6, r0
 800feac:	2800      	cmp	r0, #0
 800feae:	d169      	bne.n	800ff84 <__gethex+0x11c>
 800feb0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800feb4:	465d      	mov	r5, fp
 800feb6:	f7ff ffc1 	bl	800fe3c <__hexdig_fun>
 800feba:	2800      	cmp	r0, #0
 800febc:	d064      	beq.n	800ff88 <__gethex+0x120>
 800febe:	465a      	mov	r2, fp
 800fec0:	7810      	ldrb	r0, [r2, #0]
 800fec2:	2830      	cmp	r0, #48	; 0x30
 800fec4:	4690      	mov	r8, r2
 800fec6:	f102 0201 	add.w	r2, r2, #1
 800feca:	d0f9      	beq.n	800fec0 <__gethex+0x58>
 800fecc:	f7ff ffb6 	bl	800fe3c <__hexdig_fun>
 800fed0:	2301      	movs	r3, #1
 800fed2:	fab0 f480 	clz	r4, r0
 800fed6:	0964      	lsrs	r4, r4, #5
 800fed8:	465e      	mov	r6, fp
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	4642      	mov	r2, r8
 800fede:	4615      	mov	r5, r2
 800fee0:	3201      	adds	r2, #1
 800fee2:	7828      	ldrb	r0, [r5, #0]
 800fee4:	f7ff ffaa 	bl	800fe3c <__hexdig_fun>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d1f8      	bne.n	800fede <__gethex+0x76>
 800feec:	4994      	ldr	r1, [pc, #592]	; (8010140 <__gethex+0x2d8>)
 800feee:	2201      	movs	r2, #1
 800fef0:	4628      	mov	r0, r5
 800fef2:	f7ff fee5 	bl	800fcc0 <strncmp>
 800fef6:	b978      	cbnz	r0, 800ff18 <__gethex+0xb0>
 800fef8:	b946      	cbnz	r6, 800ff0c <__gethex+0xa4>
 800fefa:	1c6e      	adds	r6, r5, #1
 800fefc:	4632      	mov	r2, r6
 800fefe:	4615      	mov	r5, r2
 800ff00:	3201      	adds	r2, #1
 800ff02:	7828      	ldrb	r0, [r5, #0]
 800ff04:	f7ff ff9a 	bl	800fe3c <__hexdig_fun>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d1f8      	bne.n	800fefe <__gethex+0x96>
 800ff0c:	1b73      	subs	r3, r6, r5
 800ff0e:	009e      	lsls	r6, r3, #2
 800ff10:	e004      	b.n	800ff1c <__gethex+0xb4>
 800ff12:	2400      	movs	r4, #0
 800ff14:	4626      	mov	r6, r4
 800ff16:	e7e1      	b.n	800fedc <__gethex+0x74>
 800ff18:	2e00      	cmp	r6, #0
 800ff1a:	d1f7      	bne.n	800ff0c <__gethex+0xa4>
 800ff1c:	782b      	ldrb	r3, [r5, #0]
 800ff1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff22:	2b50      	cmp	r3, #80	; 0x50
 800ff24:	d13d      	bne.n	800ffa2 <__gethex+0x13a>
 800ff26:	786b      	ldrb	r3, [r5, #1]
 800ff28:	2b2b      	cmp	r3, #43	; 0x2b
 800ff2a:	d02f      	beq.n	800ff8c <__gethex+0x124>
 800ff2c:	2b2d      	cmp	r3, #45	; 0x2d
 800ff2e:	d031      	beq.n	800ff94 <__gethex+0x12c>
 800ff30:	1c69      	adds	r1, r5, #1
 800ff32:	f04f 0b00 	mov.w	fp, #0
 800ff36:	7808      	ldrb	r0, [r1, #0]
 800ff38:	f7ff ff80 	bl	800fe3c <__hexdig_fun>
 800ff3c:	1e42      	subs	r2, r0, #1
 800ff3e:	b2d2      	uxtb	r2, r2
 800ff40:	2a18      	cmp	r2, #24
 800ff42:	d82e      	bhi.n	800ffa2 <__gethex+0x13a>
 800ff44:	f1a0 0210 	sub.w	r2, r0, #16
 800ff48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff4c:	f7ff ff76 	bl	800fe3c <__hexdig_fun>
 800ff50:	f100 3cff 	add.w	ip, r0, #4294967295
 800ff54:	fa5f fc8c 	uxtb.w	ip, ip
 800ff58:	f1bc 0f18 	cmp.w	ip, #24
 800ff5c:	d91d      	bls.n	800ff9a <__gethex+0x132>
 800ff5e:	f1bb 0f00 	cmp.w	fp, #0
 800ff62:	d000      	beq.n	800ff66 <__gethex+0xfe>
 800ff64:	4252      	negs	r2, r2
 800ff66:	4416      	add	r6, r2
 800ff68:	f8ca 1000 	str.w	r1, [sl]
 800ff6c:	b1dc      	cbz	r4, 800ffa6 <__gethex+0x13e>
 800ff6e:	9b01      	ldr	r3, [sp, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	bf14      	ite	ne
 800ff74:	f04f 0800 	movne.w	r8, #0
 800ff78:	f04f 0806 	moveq.w	r8, #6
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	b005      	add	sp, #20
 800ff80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff84:	4645      	mov	r5, r8
 800ff86:	4626      	mov	r6, r4
 800ff88:	2401      	movs	r4, #1
 800ff8a:	e7c7      	b.n	800ff1c <__gethex+0xb4>
 800ff8c:	f04f 0b00 	mov.w	fp, #0
 800ff90:	1ca9      	adds	r1, r5, #2
 800ff92:	e7d0      	b.n	800ff36 <__gethex+0xce>
 800ff94:	f04f 0b01 	mov.w	fp, #1
 800ff98:	e7fa      	b.n	800ff90 <__gethex+0x128>
 800ff9a:	230a      	movs	r3, #10
 800ff9c:	fb03 0002 	mla	r0, r3, r2, r0
 800ffa0:	e7d0      	b.n	800ff44 <__gethex+0xdc>
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	e7e0      	b.n	800ff68 <__gethex+0x100>
 800ffa6:	eba5 0308 	sub.w	r3, r5, r8
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	4621      	mov	r1, r4
 800ffae:	2b07      	cmp	r3, #7
 800ffb0:	dc0a      	bgt.n	800ffc8 <__gethex+0x160>
 800ffb2:	4648      	mov	r0, r9
 800ffb4:	f7fd ff46 	bl	800de44 <_Balloc>
 800ffb8:	4604      	mov	r4, r0
 800ffba:	b940      	cbnz	r0, 800ffce <__gethex+0x166>
 800ffbc:	4b61      	ldr	r3, [pc, #388]	; (8010144 <__gethex+0x2dc>)
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	21e4      	movs	r1, #228	; 0xe4
 800ffc2:	4861      	ldr	r0, [pc, #388]	; (8010148 <__gethex+0x2e0>)
 800ffc4:	f7ff feb4 	bl	800fd30 <__assert_func>
 800ffc8:	3101      	adds	r1, #1
 800ffca:	105b      	asrs	r3, r3, #1
 800ffcc:	e7ef      	b.n	800ffae <__gethex+0x146>
 800ffce:	f100 0a14 	add.w	sl, r0, #20
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	495a      	ldr	r1, [pc, #360]	; (8010140 <__gethex+0x2d8>)
 800ffd6:	f8cd a004 	str.w	sl, [sp, #4]
 800ffda:	469b      	mov	fp, r3
 800ffdc:	45a8      	cmp	r8, r5
 800ffde:	d342      	bcc.n	8010066 <__gethex+0x1fe>
 800ffe0:	9801      	ldr	r0, [sp, #4]
 800ffe2:	f840 bb04 	str.w	fp, [r0], #4
 800ffe6:	eba0 000a 	sub.w	r0, r0, sl
 800ffea:	1080      	asrs	r0, r0, #2
 800ffec:	6120      	str	r0, [r4, #16]
 800ffee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fff2:	4658      	mov	r0, fp
 800fff4:	f7fe f818 	bl	800e028 <__hi0bits>
 800fff8:	683d      	ldr	r5, [r7, #0]
 800fffa:	eba8 0000 	sub.w	r0, r8, r0
 800fffe:	42a8      	cmp	r0, r5
 8010000:	dd59      	ble.n	80100b6 <__gethex+0x24e>
 8010002:	eba0 0805 	sub.w	r8, r0, r5
 8010006:	4641      	mov	r1, r8
 8010008:	4620      	mov	r0, r4
 801000a:	f7fe fba7 	bl	800e75c <__any_on>
 801000e:	4683      	mov	fp, r0
 8010010:	b1b8      	cbz	r0, 8010042 <__gethex+0x1da>
 8010012:	f108 33ff 	add.w	r3, r8, #4294967295
 8010016:	1159      	asrs	r1, r3, #5
 8010018:	f003 021f 	and.w	r2, r3, #31
 801001c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010020:	f04f 0b01 	mov.w	fp, #1
 8010024:	fa0b f202 	lsl.w	r2, fp, r2
 8010028:	420a      	tst	r2, r1
 801002a:	d00a      	beq.n	8010042 <__gethex+0x1da>
 801002c:	455b      	cmp	r3, fp
 801002e:	dd06      	ble.n	801003e <__gethex+0x1d6>
 8010030:	f1a8 0102 	sub.w	r1, r8, #2
 8010034:	4620      	mov	r0, r4
 8010036:	f7fe fb91 	bl	800e75c <__any_on>
 801003a:	2800      	cmp	r0, #0
 801003c:	d138      	bne.n	80100b0 <__gethex+0x248>
 801003e:	f04f 0b02 	mov.w	fp, #2
 8010042:	4641      	mov	r1, r8
 8010044:	4620      	mov	r0, r4
 8010046:	f7ff fea7 	bl	800fd98 <rshift>
 801004a:	4446      	add	r6, r8
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	42b3      	cmp	r3, r6
 8010050:	da41      	bge.n	80100d6 <__gethex+0x26e>
 8010052:	4621      	mov	r1, r4
 8010054:	4648      	mov	r0, r9
 8010056:	f7fd ff35 	bl	800dec4 <_Bfree>
 801005a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801005c:	2300      	movs	r3, #0
 801005e:	6013      	str	r3, [r2, #0]
 8010060:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010064:	e78a      	b.n	800ff7c <__gethex+0x114>
 8010066:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801006a:	2a2e      	cmp	r2, #46	; 0x2e
 801006c:	d014      	beq.n	8010098 <__gethex+0x230>
 801006e:	2b20      	cmp	r3, #32
 8010070:	d106      	bne.n	8010080 <__gethex+0x218>
 8010072:	9b01      	ldr	r3, [sp, #4]
 8010074:	f843 bb04 	str.w	fp, [r3], #4
 8010078:	f04f 0b00 	mov.w	fp, #0
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	465b      	mov	r3, fp
 8010080:	7828      	ldrb	r0, [r5, #0]
 8010082:	9303      	str	r3, [sp, #12]
 8010084:	f7ff feda 	bl	800fe3c <__hexdig_fun>
 8010088:	9b03      	ldr	r3, [sp, #12]
 801008a:	f000 000f 	and.w	r0, r0, #15
 801008e:	4098      	lsls	r0, r3
 8010090:	ea4b 0b00 	orr.w	fp, fp, r0
 8010094:	3304      	adds	r3, #4
 8010096:	e7a1      	b.n	800ffdc <__gethex+0x174>
 8010098:	45a8      	cmp	r8, r5
 801009a:	d8e8      	bhi.n	801006e <__gethex+0x206>
 801009c:	2201      	movs	r2, #1
 801009e:	4628      	mov	r0, r5
 80100a0:	9303      	str	r3, [sp, #12]
 80100a2:	f7ff fe0d 	bl	800fcc0 <strncmp>
 80100a6:	4926      	ldr	r1, [pc, #152]	; (8010140 <__gethex+0x2d8>)
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d1df      	bne.n	801006e <__gethex+0x206>
 80100ae:	e795      	b.n	800ffdc <__gethex+0x174>
 80100b0:	f04f 0b03 	mov.w	fp, #3
 80100b4:	e7c5      	b.n	8010042 <__gethex+0x1da>
 80100b6:	da0b      	bge.n	80100d0 <__gethex+0x268>
 80100b8:	eba5 0800 	sub.w	r8, r5, r0
 80100bc:	4621      	mov	r1, r4
 80100be:	4642      	mov	r2, r8
 80100c0:	4648      	mov	r0, r9
 80100c2:	f7fe f919 	bl	800e2f8 <__lshift>
 80100c6:	eba6 0608 	sub.w	r6, r6, r8
 80100ca:	4604      	mov	r4, r0
 80100cc:	f100 0a14 	add.w	sl, r0, #20
 80100d0:	f04f 0b00 	mov.w	fp, #0
 80100d4:	e7ba      	b.n	801004c <__gethex+0x1e4>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	42b3      	cmp	r3, r6
 80100da:	dd73      	ble.n	80101c4 <__gethex+0x35c>
 80100dc:	1b9e      	subs	r6, r3, r6
 80100de:	42b5      	cmp	r5, r6
 80100e0:	dc34      	bgt.n	801014c <__gethex+0x2e4>
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d023      	beq.n	8010130 <__gethex+0x2c8>
 80100e8:	2b03      	cmp	r3, #3
 80100ea:	d025      	beq.n	8010138 <__gethex+0x2d0>
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d115      	bne.n	801011c <__gethex+0x2b4>
 80100f0:	42b5      	cmp	r5, r6
 80100f2:	d113      	bne.n	801011c <__gethex+0x2b4>
 80100f4:	2d01      	cmp	r5, #1
 80100f6:	d10b      	bne.n	8010110 <__gethex+0x2a8>
 80100f8:	9a02      	ldr	r2, [sp, #8]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6013      	str	r3, [r2, #0]
 80100fe:	2301      	movs	r3, #1
 8010100:	6123      	str	r3, [r4, #16]
 8010102:	f8ca 3000 	str.w	r3, [sl]
 8010106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010108:	f04f 0862 	mov.w	r8, #98	; 0x62
 801010c:	601c      	str	r4, [r3, #0]
 801010e:	e735      	b.n	800ff7c <__gethex+0x114>
 8010110:	1e69      	subs	r1, r5, #1
 8010112:	4620      	mov	r0, r4
 8010114:	f7fe fb22 	bl	800e75c <__any_on>
 8010118:	2800      	cmp	r0, #0
 801011a:	d1ed      	bne.n	80100f8 <__gethex+0x290>
 801011c:	4621      	mov	r1, r4
 801011e:	4648      	mov	r0, r9
 8010120:	f7fd fed0 	bl	800dec4 <_Bfree>
 8010124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010126:	2300      	movs	r3, #0
 8010128:	6013      	str	r3, [r2, #0]
 801012a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801012e:	e725      	b.n	800ff7c <__gethex+0x114>
 8010130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1f2      	bne.n	801011c <__gethex+0x2b4>
 8010136:	e7df      	b.n	80100f8 <__gethex+0x290>
 8010138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1dc      	bne.n	80100f8 <__gethex+0x290>
 801013e:	e7ed      	b.n	801011c <__gethex+0x2b4>
 8010140:	08011ccc 	.word	0x08011ccc
 8010144:	08011b65 	.word	0x08011b65
 8010148:	08011e76 	.word	0x08011e76
 801014c:	f106 38ff 	add.w	r8, r6, #4294967295
 8010150:	f1bb 0f00 	cmp.w	fp, #0
 8010154:	d133      	bne.n	80101be <__gethex+0x356>
 8010156:	f1b8 0f00 	cmp.w	r8, #0
 801015a:	d004      	beq.n	8010166 <__gethex+0x2fe>
 801015c:	4641      	mov	r1, r8
 801015e:	4620      	mov	r0, r4
 8010160:	f7fe fafc 	bl	800e75c <__any_on>
 8010164:	4683      	mov	fp, r0
 8010166:	ea4f 1268 	mov.w	r2, r8, asr #5
 801016a:	2301      	movs	r3, #1
 801016c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010170:	f008 081f 	and.w	r8, r8, #31
 8010174:	fa03 f308 	lsl.w	r3, r3, r8
 8010178:	4213      	tst	r3, r2
 801017a:	4631      	mov	r1, r6
 801017c:	4620      	mov	r0, r4
 801017e:	bf18      	it	ne
 8010180:	f04b 0b02 	orrne.w	fp, fp, #2
 8010184:	1bad      	subs	r5, r5, r6
 8010186:	f7ff fe07 	bl	800fd98 <rshift>
 801018a:	687e      	ldr	r6, [r7, #4]
 801018c:	f04f 0802 	mov.w	r8, #2
 8010190:	f1bb 0f00 	cmp.w	fp, #0
 8010194:	d04a      	beq.n	801022c <__gethex+0x3c4>
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2b02      	cmp	r3, #2
 801019a:	d016      	beq.n	80101ca <__gethex+0x362>
 801019c:	2b03      	cmp	r3, #3
 801019e:	d018      	beq.n	80101d2 <__gethex+0x36a>
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d109      	bne.n	80101b8 <__gethex+0x350>
 80101a4:	f01b 0f02 	tst.w	fp, #2
 80101a8:	d006      	beq.n	80101b8 <__gethex+0x350>
 80101aa:	f8da 3000 	ldr.w	r3, [sl]
 80101ae:	ea4b 0b03 	orr.w	fp, fp, r3
 80101b2:	f01b 0f01 	tst.w	fp, #1
 80101b6:	d10f      	bne.n	80101d8 <__gethex+0x370>
 80101b8:	f048 0810 	orr.w	r8, r8, #16
 80101bc:	e036      	b.n	801022c <__gethex+0x3c4>
 80101be:	f04f 0b01 	mov.w	fp, #1
 80101c2:	e7d0      	b.n	8010166 <__gethex+0x2fe>
 80101c4:	f04f 0801 	mov.w	r8, #1
 80101c8:	e7e2      	b.n	8010190 <__gethex+0x328>
 80101ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101cc:	f1c3 0301 	rsb	r3, r3, #1
 80101d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0ef      	beq.n	80101b8 <__gethex+0x350>
 80101d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101dc:	f104 0214 	add.w	r2, r4, #20
 80101e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80101ea:	2300      	movs	r3, #0
 80101ec:	4694      	mov	ip, r2
 80101ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80101f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80101f6:	d01e      	beq.n	8010236 <__gethex+0x3ce>
 80101f8:	3101      	adds	r1, #1
 80101fa:	f8cc 1000 	str.w	r1, [ip]
 80101fe:	f1b8 0f02 	cmp.w	r8, #2
 8010202:	f104 0214 	add.w	r2, r4, #20
 8010206:	d13d      	bne.n	8010284 <__gethex+0x41c>
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	3b01      	subs	r3, #1
 801020c:	42ab      	cmp	r3, r5
 801020e:	d10b      	bne.n	8010228 <__gethex+0x3c0>
 8010210:	1169      	asrs	r1, r5, #5
 8010212:	2301      	movs	r3, #1
 8010214:	f005 051f 	and.w	r5, r5, #31
 8010218:	fa03 f505 	lsl.w	r5, r3, r5
 801021c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010220:	421d      	tst	r5, r3
 8010222:	bf18      	it	ne
 8010224:	f04f 0801 	movne.w	r8, #1
 8010228:	f048 0820 	orr.w	r8, r8, #32
 801022c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801022e:	601c      	str	r4, [r3, #0]
 8010230:	9b02      	ldr	r3, [sp, #8]
 8010232:	601e      	str	r6, [r3, #0]
 8010234:	e6a2      	b.n	800ff7c <__gethex+0x114>
 8010236:	4290      	cmp	r0, r2
 8010238:	f842 3c04 	str.w	r3, [r2, #-4]
 801023c:	d8d6      	bhi.n	80101ec <__gethex+0x384>
 801023e:	68a2      	ldr	r2, [r4, #8]
 8010240:	4593      	cmp	fp, r2
 8010242:	db17      	blt.n	8010274 <__gethex+0x40c>
 8010244:	6861      	ldr	r1, [r4, #4]
 8010246:	4648      	mov	r0, r9
 8010248:	3101      	adds	r1, #1
 801024a:	f7fd fdfb 	bl	800de44 <_Balloc>
 801024e:	4682      	mov	sl, r0
 8010250:	b918      	cbnz	r0, 801025a <__gethex+0x3f2>
 8010252:	4b1b      	ldr	r3, [pc, #108]	; (80102c0 <__gethex+0x458>)
 8010254:	4602      	mov	r2, r0
 8010256:	2184      	movs	r1, #132	; 0x84
 8010258:	e6b3      	b.n	800ffc2 <__gethex+0x15a>
 801025a:	6922      	ldr	r2, [r4, #16]
 801025c:	3202      	adds	r2, #2
 801025e:	f104 010c 	add.w	r1, r4, #12
 8010262:	0092      	lsls	r2, r2, #2
 8010264:	300c      	adds	r0, #12
 8010266:	f7ff fd4d 	bl	800fd04 <memcpy>
 801026a:	4621      	mov	r1, r4
 801026c:	4648      	mov	r0, r9
 801026e:	f7fd fe29 	bl	800dec4 <_Bfree>
 8010272:	4654      	mov	r4, sl
 8010274:	6922      	ldr	r2, [r4, #16]
 8010276:	1c51      	adds	r1, r2, #1
 8010278:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801027c:	6121      	str	r1, [r4, #16]
 801027e:	2101      	movs	r1, #1
 8010280:	6151      	str	r1, [r2, #20]
 8010282:	e7bc      	b.n	80101fe <__gethex+0x396>
 8010284:	6921      	ldr	r1, [r4, #16]
 8010286:	4559      	cmp	r1, fp
 8010288:	dd0b      	ble.n	80102a2 <__gethex+0x43a>
 801028a:	2101      	movs	r1, #1
 801028c:	4620      	mov	r0, r4
 801028e:	f7ff fd83 	bl	800fd98 <rshift>
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	3601      	adds	r6, #1
 8010296:	42b3      	cmp	r3, r6
 8010298:	f6ff aedb 	blt.w	8010052 <__gethex+0x1ea>
 801029c:	f04f 0801 	mov.w	r8, #1
 80102a0:	e7c2      	b.n	8010228 <__gethex+0x3c0>
 80102a2:	f015 051f 	ands.w	r5, r5, #31
 80102a6:	d0f9      	beq.n	801029c <__gethex+0x434>
 80102a8:	9b01      	ldr	r3, [sp, #4]
 80102aa:	441a      	add	r2, r3
 80102ac:	f1c5 0520 	rsb	r5, r5, #32
 80102b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80102b4:	f7fd feb8 	bl	800e028 <__hi0bits>
 80102b8:	42a8      	cmp	r0, r5
 80102ba:	dbe6      	blt.n	801028a <__gethex+0x422>
 80102bc:	e7ee      	b.n	801029c <__gethex+0x434>
 80102be:	bf00      	nop
 80102c0:	08011b65 	.word	0x08011b65

080102c4 <L_shift>:
 80102c4:	f1c2 0208 	rsb	r2, r2, #8
 80102c8:	0092      	lsls	r2, r2, #2
 80102ca:	b570      	push	{r4, r5, r6, lr}
 80102cc:	f1c2 0620 	rsb	r6, r2, #32
 80102d0:	6843      	ldr	r3, [r0, #4]
 80102d2:	6804      	ldr	r4, [r0, #0]
 80102d4:	fa03 f506 	lsl.w	r5, r3, r6
 80102d8:	432c      	orrs	r4, r5
 80102da:	40d3      	lsrs	r3, r2
 80102dc:	6004      	str	r4, [r0, #0]
 80102de:	f840 3f04 	str.w	r3, [r0, #4]!
 80102e2:	4288      	cmp	r0, r1
 80102e4:	d3f4      	bcc.n	80102d0 <L_shift+0xc>
 80102e6:	bd70      	pop	{r4, r5, r6, pc}

080102e8 <__match>:
 80102e8:	b530      	push	{r4, r5, lr}
 80102ea:	6803      	ldr	r3, [r0, #0]
 80102ec:	3301      	adds	r3, #1
 80102ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102f2:	b914      	cbnz	r4, 80102fa <__match+0x12>
 80102f4:	6003      	str	r3, [r0, #0]
 80102f6:	2001      	movs	r0, #1
 80102f8:	bd30      	pop	{r4, r5, pc}
 80102fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010302:	2d19      	cmp	r5, #25
 8010304:	bf98      	it	ls
 8010306:	3220      	addls	r2, #32
 8010308:	42a2      	cmp	r2, r4
 801030a:	d0f0      	beq.n	80102ee <__match+0x6>
 801030c:	2000      	movs	r0, #0
 801030e:	e7f3      	b.n	80102f8 <__match+0x10>

08010310 <__hexnan>:
 8010310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	680b      	ldr	r3, [r1, #0]
 8010316:	6801      	ldr	r1, [r0, #0]
 8010318:	115e      	asrs	r6, r3, #5
 801031a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801031e:	f013 031f 	ands.w	r3, r3, #31
 8010322:	b087      	sub	sp, #28
 8010324:	bf18      	it	ne
 8010326:	3604      	addne	r6, #4
 8010328:	2500      	movs	r5, #0
 801032a:	1f37      	subs	r7, r6, #4
 801032c:	4682      	mov	sl, r0
 801032e:	4690      	mov	r8, r2
 8010330:	9301      	str	r3, [sp, #4]
 8010332:	f846 5c04 	str.w	r5, [r6, #-4]
 8010336:	46b9      	mov	r9, r7
 8010338:	463c      	mov	r4, r7
 801033a:	9502      	str	r5, [sp, #8]
 801033c:	46ab      	mov	fp, r5
 801033e:	784a      	ldrb	r2, [r1, #1]
 8010340:	1c4b      	adds	r3, r1, #1
 8010342:	9303      	str	r3, [sp, #12]
 8010344:	b342      	cbz	r2, 8010398 <__hexnan+0x88>
 8010346:	4610      	mov	r0, r2
 8010348:	9105      	str	r1, [sp, #20]
 801034a:	9204      	str	r2, [sp, #16]
 801034c:	f7ff fd76 	bl	800fe3c <__hexdig_fun>
 8010350:	2800      	cmp	r0, #0
 8010352:	d14f      	bne.n	80103f4 <__hexnan+0xe4>
 8010354:	9a04      	ldr	r2, [sp, #16]
 8010356:	9905      	ldr	r1, [sp, #20]
 8010358:	2a20      	cmp	r2, #32
 801035a:	d818      	bhi.n	801038e <__hexnan+0x7e>
 801035c:	9b02      	ldr	r3, [sp, #8]
 801035e:	459b      	cmp	fp, r3
 8010360:	dd13      	ble.n	801038a <__hexnan+0x7a>
 8010362:	454c      	cmp	r4, r9
 8010364:	d206      	bcs.n	8010374 <__hexnan+0x64>
 8010366:	2d07      	cmp	r5, #7
 8010368:	dc04      	bgt.n	8010374 <__hexnan+0x64>
 801036a:	462a      	mov	r2, r5
 801036c:	4649      	mov	r1, r9
 801036e:	4620      	mov	r0, r4
 8010370:	f7ff ffa8 	bl	80102c4 <L_shift>
 8010374:	4544      	cmp	r4, r8
 8010376:	d950      	bls.n	801041a <__hexnan+0x10a>
 8010378:	2300      	movs	r3, #0
 801037a:	f1a4 0904 	sub.w	r9, r4, #4
 801037e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010382:	f8cd b008 	str.w	fp, [sp, #8]
 8010386:	464c      	mov	r4, r9
 8010388:	461d      	mov	r5, r3
 801038a:	9903      	ldr	r1, [sp, #12]
 801038c:	e7d7      	b.n	801033e <__hexnan+0x2e>
 801038e:	2a29      	cmp	r2, #41	; 0x29
 8010390:	d155      	bne.n	801043e <__hexnan+0x12e>
 8010392:	3102      	adds	r1, #2
 8010394:	f8ca 1000 	str.w	r1, [sl]
 8010398:	f1bb 0f00 	cmp.w	fp, #0
 801039c:	d04f      	beq.n	801043e <__hexnan+0x12e>
 801039e:	454c      	cmp	r4, r9
 80103a0:	d206      	bcs.n	80103b0 <__hexnan+0xa0>
 80103a2:	2d07      	cmp	r5, #7
 80103a4:	dc04      	bgt.n	80103b0 <__hexnan+0xa0>
 80103a6:	462a      	mov	r2, r5
 80103a8:	4649      	mov	r1, r9
 80103aa:	4620      	mov	r0, r4
 80103ac:	f7ff ff8a 	bl	80102c4 <L_shift>
 80103b0:	4544      	cmp	r4, r8
 80103b2:	d934      	bls.n	801041e <__hexnan+0x10e>
 80103b4:	f1a8 0204 	sub.w	r2, r8, #4
 80103b8:	4623      	mov	r3, r4
 80103ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80103be:	f842 1f04 	str.w	r1, [r2, #4]!
 80103c2:	429f      	cmp	r7, r3
 80103c4:	d2f9      	bcs.n	80103ba <__hexnan+0xaa>
 80103c6:	1b3b      	subs	r3, r7, r4
 80103c8:	f023 0303 	bic.w	r3, r3, #3
 80103cc:	3304      	adds	r3, #4
 80103ce:	3e03      	subs	r6, #3
 80103d0:	3401      	adds	r4, #1
 80103d2:	42a6      	cmp	r6, r4
 80103d4:	bf38      	it	cc
 80103d6:	2304      	movcc	r3, #4
 80103d8:	4443      	add	r3, r8
 80103da:	2200      	movs	r2, #0
 80103dc:	f843 2b04 	str.w	r2, [r3], #4
 80103e0:	429f      	cmp	r7, r3
 80103e2:	d2fb      	bcs.n	80103dc <__hexnan+0xcc>
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	b91b      	cbnz	r3, 80103f0 <__hexnan+0xe0>
 80103e8:	4547      	cmp	r7, r8
 80103ea:	d126      	bne.n	801043a <__hexnan+0x12a>
 80103ec:	2301      	movs	r3, #1
 80103ee:	603b      	str	r3, [r7, #0]
 80103f0:	2005      	movs	r0, #5
 80103f2:	e025      	b.n	8010440 <__hexnan+0x130>
 80103f4:	3501      	adds	r5, #1
 80103f6:	2d08      	cmp	r5, #8
 80103f8:	f10b 0b01 	add.w	fp, fp, #1
 80103fc:	dd06      	ble.n	801040c <__hexnan+0xfc>
 80103fe:	4544      	cmp	r4, r8
 8010400:	d9c3      	bls.n	801038a <__hexnan+0x7a>
 8010402:	2300      	movs	r3, #0
 8010404:	f844 3c04 	str.w	r3, [r4, #-4]
 8010408:	2501      	movs	r5, #1
 801040a:	3c04      	subs	r4, #4
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	f000 000f 	and.w	r0, r0, #15
 8010412:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010416:	6020      	str	r0, [r4, #0]
 8010418:	e7b7      	b.n	801038a <__hexnan+0x7a>
 801041a:	2508      	movs	r5, #8
 801041c:	e7b5      	b.n	801038a <__hexnan+0x7a>
 801041e:	9b01      	ldr	r3, [sp, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d0df      	beq.n	80103e4 <__hexnan+0xd4>
 8010424:	f1c3 0320 	rsb	r3, r3, #32
 8010428:	f04f 32ff 	mov.w	r2, #4294967295
 801042c:	40da      	lsrs	r2, r3
 801042e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010432:	4013      	ands	r3, r2
 8010434:	f846 3c04 	str.w	r3, [r6, #-4]
 8010438:	e7d4      	b.n	80103e4 <__hexnan+0xd4>
 801043a:	3f04      	subs	r7, #4
 801043c:	e7d2      	b.n	80103e4 <__hexnan+0xd4>
 801043e:	2004      	movs	r0, #4
 8010440:	b007      	add	sp, #28
 8010442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010446 <__ascii_mbtowc>:
 8010446:	b082      	sub	sp, #8
 8010448:	b901      	cbnz	r1, 801044c <__ascii_mbtowc+0x6>
 801044a:	a901      	add	r1, sp, #4
 801044c:	b142      	cbz	r2, 8010460 <__ascii_mbtowc+0x1a>
 801044e:	b14b      	cbz	r3, 8010464 <__ascii_mbtowc+0x1e>
 8010450:	7813      	ldrb	r3, [r2, #0]
 8010452:	600b      	str	r3, [r1, #0]
 8010454:	7812      	ldrb	r2, [r2, #0]
 8010456:	1e10      	subs	r0, r2, #0
 8010458:	bf18      	it	ne
 801045a:	2001      	movne	r0, #1
 801045c:	b002      	add	sp, #8
 801045e:	4770      	bx	lr
 8010460:	4610      	mov	r0, r2
 8010462:	e7fb      	b.n	801045c <__ascii_mbtowc+0x16>
 8010464:	f06f 0001 	mvn.w	r0, #1
 8010468:	e7f8      	b.n	801045c <__ascii_mbtowc+0x16>

0801046a <_realloc_r>:
 801046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046e:	4680      	mov	r8, r0
 8010470:	4614      	mov	r4, r2
 8010472:	460e      	mov	r6, r1
 8010474:	b921      	cbnz	r1, 8010480 <_realloc_r+0x16>
 8010476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801047a:	4611      	mov	r1, r2
 801047c:	f7fd bc56 	b.w	800dd2c <_malloc_r>
 8010480:	b92a      	cbnz	r2, 801048e <_realloc_r+0x24>
 8010482:	f7fd fbdf 	bl	800dc44 <_free_r>
 8010486:	4625      	mov	r5, r4
 8010488:	4628      	mov	r0, r5
 801048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048e:	f000 f8c6 	bl	801061e <_malloc_usable_size_r>
 8010492:	4284      	cmp	r4, r0
 8010494:	4607      	mov	r7, r0
 8010496:	d802      	bhi.n	801049e <_realloc_r+0x34>
 8010498:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801049c:	d812      	bhi.n	80104c4 <_realloc_r+0x5a>
 801049e:	4621      	mov	r1, r4
 80104a0:	4640      	mov	r0, r8
 80104a2:	f7fd fc43 	bl	800dd2c <_malloc_r>
 80104a6:	4605      	mov	r5, r0
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d0ed      	beq.n	8010488 <_realloc_r+0x1e>
 80104ac:	42bc      	cmp	r4, r7
 80104ae:	4622      	mov	r2, r4
 80104b0:	4631      	mov	r1, r6
 80104b2:	bf28      	it	cs
 80104b4:	463a      	movcs	r2, r7
 80104b6:	f7ff fc25 	bl	800fd04 <memcpy>
 80104ba:	4631      	mov	r1, r6
 80104bc:	4640      	mov	r0, r8
 80104be:	f7fd fbc1 	bl	800dc44 <_free_r>
 80104c2:	e7e1      	b.n	8010488 <_realloc_r+0x1e>
 80104c4:	4635      	mov	r5, r6
 80104c6:	e7df      	b.n	8010488 <_realloc_r+0x1e>

080104c8 <__ascii_wctomb>:
 80104c8:	b149      	cbz	r1, 80104de <__ascii_wctomb+0x16>
 80104ca:	2aff      	cmp	r2, #255	; 0xff
 80104cc:	bf85      	ittet	hi
 80104ce:	238a      	movhi	r3, #138	; 0x8a
 80104d0:	6003      	strhi	r3, [r0, #0]
 80104d2:	700a      	strbls	r2, [r1, #0]
 80104d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80104d8:	bf98      	it	ls
 80104da:	2001      	movls	r0, #1
 80104dc:	4770      	bx	lr
 80104de:	4608      	mov	r0, r1
 80104e0:	4770      	bx	lr
	...

080104e4 <fiprintf>:
 80104e4:	b40e      	push	{r1, r2, r3}
 80104e6:	b503      	push	{r0, r1, lr}
 80104e8:	4601      	mov	r1, r0
 80104ea:	ab03      	add	r3, sp, #12
 80104ec:	4805      	ldr	r0, [pc, #20]	; (8010504 <fiprintf+0x20>)
 80104ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f2:	6800      	ldr	r0, [r0, #0]
 80104f4:	9301      	str	r3, [sp, #4]
 80104f6:	f7ff f96b 	bl	800f7d0 <_vfiprintf_r>
 80104fa:	b002      	add	sp, #8
 80104fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010500:	b003      	add	sp, #12
 8010502:	4770      	bx	lr
 8010504:	20000068 	.word	0x20000068

08010508 <__swhatbuf_r>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	460c      	mov	r4, r1
 801050c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010510:	2900      	cmp	r1, #0
 8010512:	b096      	sub	sp, #88	; 0x58
 8010514:	4615      	mov	r5, r2
 8010516:	461e      	mov	r6, r3
 8010518:	da0d      	bge.n	8010536 <__swhatbuf_r+0x2e>
 801051a:	89a3      	ldrh	r3, [r4, #12]
 801051c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010520:	f04f 0100 	mov.w	r1, #0
 8010524:	bf0c      	ite	eq
 8010526:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801052a:	2340      	movne	r3, #64	; 0x40
 801052c:	2000      	movs	r0, #0
 801052e:	6031      	str	r1, [r6, #0]
 8010530:	602b      	str	r3, [r5, #0]
 8010532:	b016      	add	sp, #88	; 0x58
 8010534:	bd70      	pop	{r4, r5, r6, pc}
 8010536:	466a      	mov	r2, sp
 8010538:	f000 f848 	bl	80105cc <_fstat_r>
 801053c:	2800      	cmp	r0, #0
 801053e:	dbec      	blt.n	801051a <__swhatbuf_r+0x12>
 8010540:	9901      	ldr	r1, [sp, #4]
 8010542:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010546:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801054a:	4259      	negs	r1, r3
 801054c:	4159      	adcs	r1, r3
 801054e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010552:	e7eb      	b.n	801052c <__swhatbuf_r+0x24>

08010554 <__smakebuf_r>:
 8010554:	898b      	ldrh	r3, [r1, #12]
 8010556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010558:	079d      	lsls	r5, r3, #30
 801055a:	4606      	mov	r6, r0
 801055c:	460c      	mov	r4, r1
 801055e:	d507      	bpl.n	8010570 <__smakebuf_r+0x1c>
 8010560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	6123      	str	r3, [r4, #16]
 8010568:	2301      	movs	r3, #1
 801056a:	6163      	str	r3, [r4, #20]
 801056c:	b002      	add	sp, #8
 801056e:	bd70      	pop	{r4, r5, r6, pc}
 8010570:	ab01      	add	r3, sp, #4
 8010572:	466a      	mov	r2, sp
 8010574:	f7ff ffc8 	bl	8010508 <__swhatbuf_r>
 8010578:	9900      	ldr	r1, [sp, #0]
 801057a:	4605      	mov	r5, r0
 801057c:	4630      	mov	r0, r6
 801057e:	f7fd fbd5 	bl	800dd2c <_malloc_r>
 8010582:	b948      	cbnz	r0, 8010598 <__smakebuf_r+0x44>
 8010584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010588:	059a      	lsls	r2, r3, #22
 801058a:	d4ef      	bmi.n	801056c <__smakebuf_r+0x18>
 801058c:	f023 0303 	bic.w	r3, r3, #3
 8010590:	f043 0302 	orr.w	r3, r3, #2
 8010594:	81a3      	strh	r3, [r4, #12]
 8010596:	e7e3      	b.n	8010560 <__smakebuf_r+0xc>
 8010598:	89a3      	ldrh	r3, [r4, #12]
 801059a:	6020      	str	r0, [r4, #0]
 801059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105a0:	81a3      	strh	r3, [r4, #12]
 80105a2:	9b00      	ldr	r3, [sp, #0]
 80105a4:	6163      	str	r3, [r4, #20]
 80105a6:	9b01      	ldr	r3, [sp, #4]
 80105a8:	6120      	str	r0, [r4, #16]
 80105aa:	b15b      	cbz	r3, 80105c4 <__smakebuf_r+0x70>
 80105ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105b0:	4630      	mov	r0, r6
 80105b2:	f000 f81d 	bl	80105f0 <_isatty_r>
 80105b6:	b128      	cbz	r0, 80105c4 <__smakebuf_r+0x70>
 80105b8:	89a3      	ldrh	r3, [r4, #12]
 80105ba:	f023 0303 	bic.w	r3, r3, #3
 80105be:	f043 0301 	orr.w	r3, r3, #1
 80105c2:	81a3      	strh	r3, [r4, #12]
 80105c4:	89a3      	ldrh	r3, [r4, #12]
 80105c6:	431d      	orrs	r5, r3
 80105c8:	81a5      	strh	r5, [r4, #12]
 80105ca:	e7cf      	b.n	801056c <__smakebuf_r+0x18>

080105cc <_fstat_r>:
 80105cc:	b538      	push	{r3, r4, r5, lr}
 80105ce:	4d07      	ldr	r5, [pc, #28]	; (80105ec <_fstat_r+0x20>)
 80105d0:	2300      	movs	r3, #0
 80105d2:	4604      	mov	r4, r0
 80105d4:	4608      	mov	r0, r1
 80105d6:	4611      	mov	r1, r2
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	f7f1 fdd8 	bl	800218e <_fstat>
 80105de:	1c43      	adds	r3, r0, #1
 80105e0:	d102      	bne.n	80105e8 <_fstat_r+0x1c>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	b103      	cbz	r3, 80105e8 <_fstat_r+0x1c>
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	bd38      	pop	{r3, r4, r5, pc}
 80105ea:	bf00      	nop
 80105ec:	20000804 	.word	0x20000804

080105f0 <_isatty_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d06      	ldr	r5, [pc, #24]	; (801060c <_isatty_r+0x1c>)
 80105f4:	2300      	movs	r3, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	4608      	mov	r0, r1
 80105fa:	602b      	str	r3, [r5, #0]
 80105fc:	f7f1 fdd7 	bl	80021ae <_isatty>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d102      	bne.n	801060a <_isatty_r+0x1a>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	b103      	cbz	r3, 801060a <_isatty_r+0x1a>
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	bd38      	pop	{r3, r4, r5, pc}
 801060c:	20000804 	.word	0x20000804

08010610 <abort>:
 8010610:	b508      	push	{r3, lr}
 8010612:	2006      	movs	r0, #6
 8010614:	f000 f834 	bl	8010680 <raise>
 8010618:	2001      	movs	r0, #1
 801061a:	f7f1 fd69 	bl	80020f0 <_exit>

0801061e <_malloc_usable_size_r>:
 801061e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010622:	1f18      	subs	r0, r3, #4
 8010624:	2b00      	cmp	r3, #0
 8010626:	bfbc      	itt	lt
 8010628:	580b      	ldrlt	r3, [r1, r0]
 801062a:	18c0      	addlt	r0, r0, r3
 801062c:	4770      	bx	lr

0801062e <_raise_r>:
 801062e:	291f      	cmp	r1, #31
 8010630:	b538      	push	{r3, r4, r5, lr}
 8010632:	4604      	mov	r4, r0
 8010634:	460d      	mov	r5, r1
 8010636:	d904      	bls.n	8010642 <_raise_r+0x14>
 8010638:	2316      	movs	r3, #22
 801063a:	6003      	str	r3, [r0, #0]
 801063c:	f04f 30ff 	mov.w	r0, #4294967295
 8010640:	bd38      	pop	{r3, r4, r5, pc}
 8010642:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010644:	b112      	cbz	r2, 801064c <_raise_r+0x1e>
 8010646:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801064a:	b94b      	cbnz	r3, 8010660 <_raise_r+0x32>
 801064c:	4620      	mov	r0, r4
 801064e:	f000 f831 	bl	80106b4 <_getpid_r>
 8010652:	462a      	mov	r2, r5
 8010654:	4601      	mov	r1, r0
 8010656:	4620      	mov	r0, r4
 8010658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801065c:	f000 b818 	b.w	8010690 <_kill_r>
 8010660:	2b01      	cmp	r3, #1
 8010662:	d00a      	beq.n	801067a <_raise_r+0x4c>
 8010664:	1c59      	adds	r1, r3, #1
 8010666:	d103      	bne.n	8010670 <_raise_r+0x42>
 8010668:	2316      	movs	r3, #22
 801066a:	6003      	str	r3, [r0, #0]
 801066c:	2001      	movs	r0, #1
 801066e:	e7e7      	b.n	8010640 <_raise_r+0x12>
 8010670:	2400      	movs	r4, #0
 8010672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010676:	4628      	mov	r0, r5
 8010678:	4798      	blx	r3
 801067a:	2000      	movs	r0, #0
 801067c:	e7e0      	b.n	8010640 <_raise_r+0x12>
	...

08010680 <raise>:
 8010680:	4b02      	ldr	r3, [pc, #8]	; (801068c <raise+0xc>)
 8010682:	4601      	mov	r1, r0
 8010684:	6818      	ldr	r0, [r3, #0]
 8010686:	f7ff bfd2 	b.w	801062e <_raise_r>
 801068a:	bf00      	nop
 801068c:	20000068 	.word	0x20000068

08010690 <_kill_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4d07      	ldr	r5, [pc, #28]	; (80106b0 <_kill_r+0x20>)
 8010694:	2300      	movs	r3, #0
 8010696:	4604      	mov	r4, r0
 8010698:	4608      	mov	r0, r1
 801069a:	4611      	mov	r1, r2
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	f7f1 fd17 	bl	80020d0 <_kill>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d102      	bne.n	80106ac <_kill_r+0x1c>
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	b103      	cbz	r3, 80106ac <_kill_r+0x1c>
 80106aa:	6023      	str	r3, [r4, #0]
 80106ac:	bd38      	pop	{r3, r4, r5, pc}
 80106ae:	bf00      	nop
 80106b0:	20000804 	.word	0x20000804

080106b4 <_getpid_r>:
 80106b4:	f7f1 bd04 	b.w	80020c0 <_getpid>

080106b8 <fmod>:
 80106b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ba:	ed2d 8b02 	vpush	{d8}
 80106be:	ec57 6b10 	vmov	r6, r7, d0
 80106c2:	ec55 4b11 	vmov	r4, r5, d1
 80106c6:	f000 fa59 	bl	8010b7c <__ieee754_fmod>
 80106ca:	4622      	mov	r2, r4
 80106cc:	462b      	mov	r3, r5
 80106ce:	4630      	mov	r0, r6
 80106d0:	4639      	mov	r1, r7
 80106d2:	eeb0 8a40 	vmov.f32	s16, s0
 80106d6:	eef0 8a60 	vmov.f32	s17, s1
 80106da:	f7f0 fa4f 	bl	8000b7c <__aeabi_dcmpun>
 80106de:	b990      	cbnz	r0, 8010706 <fmod+0x4e>
 80106e0:	2200      	movs	r2, #0
 80106e2:	2300      	movs	r3, #0
 80106e4:	4620      	mov	r0, r4
 80106e6:	4629      	mov	r1, r5
 80106e8:	f7f0 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 80106ec:	b158      	cbz	r0, 8010706 <fmod+0x4e>
 80106ee:	f7fc fbfb 	bl	800cee8 <__errno>
 80106f2:	2321      	movs	r3, #33	; 0x21
 80106f4:	6003      	str	r3, [r0, #0]
 80106f6:	2200      	movs	r2, #0
 80106f8:	2300      	movs	r3, #0
 80106fa:	4610      	mov	r0, r2
 80106fc:	4619      	mov	r1, r3
 80106fe:	f7f0 f8cd 	bl	800089c <__aeabi_ddiv>
 8010702:	ec41 0b18 	vmov	d8, r0, r1
 8010706:	eeb0 0a48 	vmov.f32	s0, s16
 801070a:	eef0 0a68 	vmov.f32	s1, s17
 801070e:	ecbd 8b02 	vpop	{d8}
 8010712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010714:	0000      	movs	r0, r0
	...

08010718 <cos>:
 8010718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801071a:	ec53 2b10 	vmov	r2, r3, d0
 801071e:	4826      	ldr	r0, [pc, #152]	; (80107b8 <cos+0xa0>)
 8010720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010724:	4281      	cmp	r1, r0
 8010726:	dc06      	bgt.n	8010736 <cos+0x1e>
 8010728:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80107b0 <cos+0x98>
 801072c:	b005      	add	sp, #20
 801072e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010732:	f000 b89d 	b.w	8010870 <__kernel_cos>
 8010736:	4821      	ldr	r0, [pc, #132]	; (80107bc <cos+0xa4>)
 8010738:	4281      	cmp	r1, r0
 801073a:	dd09      	ble.n	8010750 <cos+0x38>
 801073c:	ee10 0a10 	vmov	r0, s0
 8010740:	4619      	mov	r1, r3
 8010742:	f7ef fdc9 	bl	80002d8 <__aeabi_dsub>
 8010746:	ec41 0b10 	vmov	d0, r0, r1
 801074a:	b005      	add	sp, #20
 801074c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010750:	4668      	mov	r0, sp
 8010752:	f000 fb21 	bl	8010d98 <__ieee754_rem_pio2>
 8010756:	f000 0003 	and.w	r0, r0, #3
 801075a:	2801      	cmp	r0, #1
 801075c:	d00b      	beq.n	8010776 <cos+0x5e>
 801075e:	2802      	cmp	r0, #2
 8010760:	d016      	beq.n	8010790 <cos+0x78>
 8010762:	b9e0      	cbnz	r0, 801079e <cos+0x86>
 8010764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010768:	ed9d 0b00 	vldr	d0, [sp]
 801076c:	f000 f880 	bl	8010870 <__kernel_cos>
 8010770:	ec51 0b10 	vmov	r0, r1, d0
 8010774:	e7e7      	b.n	8010746 <cos+0x2e>
 8010776:	ed9d 1b02 	vldr	d1, [sp, #8]
 801077a:	ed9d 0b00 	vldr	d0, [sp]
 801077e:	f000 f93f 	bl	8010a00 <__kernel_sin>
 8010782:	ec53 2b10 	vmov	r2, r3, d0
 8010786:	ee10 0a10 	vmov	r0, s0
 801078a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801078e:	e7da      	b.n	8010746 <cos+0x2e>
 8010790:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010794:	ed9d 0b00 	vldr	d0, [sp]
 8010798:	f000 f86a 	bl	8010870 <__kernel_cos>
 801079c:	e7f1      	b.n	8010782 <cos+0x6a>
 801079e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107a2:	ed9d 0b00 	vldr	d0, [sp]
 80107a6:	2001      	movs	r0, #1
 80107a8:	f000 f92a 	bl	8010a00 <__kernel_sin>
 80107ac:	e7e0      	b.n	8010770 <cos+0x58>
 80107ae:	bf00      	nop
	...
 80107b8:	3fe921fb 	.word	0x3fe921fb
 80107bc:	7fefffff 	.word	0x7fefffff

080107c0 <sin>:
 80107c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107c2:	ec53 2b10 	vmov	r2, r3, d0
 80107c6:	4828      	ldr	r0, [pc, #160]	; (8010868 <sin+0xa8>)
 80107c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80107cc:	4281      	cmp	r1, r0
 80107ce:	dc07      	bgt.n	80107e0 <sin+0x20>
 80107d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010860 <sin+0xa0>
 80107d4:	2000      	movs	r0, #0
 80107d6:	b005      	add	sp, #20
 80107d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80107dc:	f000 b910 	b.w	8010a00 <__kernel_sin>
 80107e0:	4822      	ldr	r0, [pc, #136]	; (801086c <sin+0xac>)
 80107e2:	4281      	cmp	r1, r0
 80107e4:	dd09      	ble.n	80107fa <sin+0x3a>
 80107e6:	ee10 0a10 	vmov	r0, s0
 80107ea:	4619      	mov	r1, r3
 80107ec:	f7ef fd74 	bl	80002d8 <__aeabi_dsub>
 80107f0:	ec41 0b10 	vmov	d0, r0, r1
 80107f4:	b005      	add	sp, #20
 80107f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80107fa:	4668      	mov	r0, sp
 80107fc:	f000 facc 	bl	8010d98 <__ieee754_rem_pio2>
 8010800:	f000 0003 	and.w	r0, r0, #3
 8010804:	2801      	cmp	r0, #1
 8010806:	d00c      	beq.n	8010822 <sin+0x62>
 8010808:	2802      	cmp	r0, #2
 801080a:	d011      	beq.n	8010830 <sin+0x70>
 801080c:	b9f0      	cbnz	r0, 801084c <sin+0x8c>
 801080e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010812:	ed9d 0b00 	vldr	d0, [sp]
 8010816:	2001      	movs	r0, #1
 8010818:	f000 f8f2 	bl	8010a00 <__kernel_sin>
 801081c:	ec51 0b10 	vmov	r0, r1, d0
 8010820:	e7e6      	b.n	80107f0 <sin+0x30>
 8010822:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010826:	ed9d 0b00 	vldr	d0, [sp]
 801082a:	f000 f821 	bl	8010870 <__kernel_cos>
 801082e:	e7f5      	b.n	801081c <sin+0x5c>
 8010830:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010834:	ed9d 0b00 	vldr	d0, [sp]
 8010838:	2001      	movs	r0, #1
 801083a:	f000 f8e1 	bl	8010a00 <__kernel_sin>
 801083e:	ec53 2b10 	vmov	r2, r3, d0
 8010842:	ee10 0a10 	vmov	r0, s0
 8010846:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801084a:	e7d1      	b.n	80107f0 <sin+0x30>
 801084c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010850:	ed9d 0b00 	vldr	d0, [sp]
 8010854:	f000 f80c 	bl	8010870 <__kernel_cos>
 8010858:	e7f1      	b.n	801083e <sin+0x7e>
 801085a:	bf00      	nop
 801085c:	f3af 8000 	nop.w
	...
 8010868:	3fe921fb 	.word	0x3fe921fb
 801086c:	7fefffff 	.word	0x7fefffff

08010870 <__kernel_cos>:
 8010870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	ec57 6b10 	vmov	r6, r7, d0
 8010878:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801087c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010880:	ed8d 1b00 	vstr	d1, [sp]
 8010884:	da07      	bge.n	8010896 <__kernel_cos+0x26>
 8010886:	ee10 0a10 	vmov	r0, s0
 801088a:	4639      	mov	r1, r7
 801088c:	f7f0 f98c 	bl	8000ba8 <__aeabi_d2iz>
 8010890:	2800      	cmp	r0, #0
 8010892:	f000 8088 	beq.w	80109a6 <__kernel_cos+0x136>
 8010896:	4632      	mov	r2, r6
 8010898:	463b      	mov	r3, r7
 801089a:	4630      	mov	r0, r6
 801089c:	4639      	mov	r1, r7
 801089e:	f7ef fed3 	bl	8000648 <__aeabi_dmul>
 80108a2:	4b51      	ldr	r3, [pc, #324]	; (80109e8 <__kernel_cos+0x178>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	4604      	mov	r4, r0
 80108a8:	460d      	mov	r5, r1
 80108aa:	f7ef fecd 	bl	8000648 <__aeabi_dmul>
 80108ae:	a340      	add	r3, pc, #256	; (adr r3, 80109b0 <__kernel_cos+0x140>)
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	4682      	mov	sl, r0
 80108b6:	468b      	mov	fp, r1
 80108b8:	4620      	mov	r0, r4
 80108ba:	4629      	mov	r1, r5
 80108bc:	f7ef fec4 	bl	8000648 <__aeabi_dmul>
 80108c0:	a33d      	add	r3, pc, #244	; (adr r3, 80109b8 <__kernel_cos+0x148>)
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	f7ef fd09 	bl	80002dc <__adddf3>
 80108ca:	4622      	mov	r2, r4
 80108cc:	462b      	mov	r3, r5
 80108ce:	f7ef febb 	bl	8000648 <__aeabi_dmul>
 80108d2:	a33b      	add	r3, pc, #236	; (adr r3, 80109c0 <__kernel_cos+0x150>)
 80108d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d8:	f7ef fcfe 	bl	80002d8 <__aeabi_dsub>
 80108dc:	4622      	mov	r2, r4
 80108de:	462b      	mov	r3, r5
 80108e0:	f7ef feb2 	bl	8000648 <__aeabi_dmul>
 80108e4:	a338      	add	r3, pc, #224	; (adr r3, 80109c8 <__kernel_cos+0x158>)
 80108e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ea:	f7ef fcf7 	bl	80002dc <__adddf3>
 80108ee:	4622      	mov	r2, r4
 80108f0:	462b      	mov	r3, r5
 80108f2:	f7ef fea9 	bl	8000648 <__aeabi_dmul>
 80108f6:	a336      	add	r3, pc, #216	; (adr r3, 80109d0 <__kernel_cos+0x160>)
 80108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fc:	f7ef fcec 	bl	80002d8 <__aeabi_dsub>
 8010900:	4622      	mov	r2, r4
 8010902:	462b      	mov	r3, r5
 8010904:	f7ef fea0 	bl	8000648 <__aeabi_dmul>
 8010908:	a333      	add	r3, pc, #204	; (adr r3, 80109d8 <__kernel_cos+0x168>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	f7ef fce5 	bl	80002dc <__adddf3>
 8010912:	4622      	mov	r2, r4
 8010914:	462b      	mov	r3, r5
 8010916:	f7ef fe97 	bl	8000648 <__aeabi_dmul>
 801091a:	4622      	mov	r2, r4
 801091c:	462b      	mov	r3, r5
 801091e:	f7ef fe93 	bl	8000648 <__aeabi_dmul>
 8010922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010926:	4604      	mov	r4, r0
 8010928:	460d      	mov	r5, r1
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	f7ef fe8b 	bl	8000648 <__aeabi_dmul>
 8010932:	460b      	mov	r3, r1
 8010934:	4602      	mov	r2, r0
 8010936:	4629      	mov	r1, r5
 8010938:	4620      	mov	r0, r4
 801093a:	f7ef fccd 	bl	80002d8 <__aeabi_dsub>
 801093e:	4b2b      	ldr	r3, [pc, #172]	; (80109ec <__kernel_cos+0x17c>)
 8010940:	4598      	cmp	r8, r3
 8010942:	4606      	mov	r6, r0
 8010944:	460f      	mov	r7, r1
 8010946:	dc10      	bgt.n	801096a <__kernel_cos+0xfa>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4650      	mov	r0, sl
 801094e:	4659      	mov	r1, fp
 8010950:	f7ef fcc2 	bl	80002d8 <__aeabi_dsub>
 8010954:	460b      	mov	r3, r1
 8010956:	4926      	ldr	r1, [pc, #152]	; (80109f0 <__kernel_cos+0x180>)
 8010958:	4602      	mov	r2, r0
 801095a:	2000      	movs	r0, #0
 801095c:	f7ef fcbc 	bl	80002d8 <__aeabi_dsub>
 8010960:	ec41 0b10 	vmov	d0, r0, r1
 8010964:	b003      	add	sp, #12
 8010966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096a:	4b22      	ldr	r3, [pc, #136]	; (80109f4 <__kernel_cos+0x184>)
 801096c:	4920      	ldr	r1, [pc, #128]	; (80109f0 <__kernel_cos+0x180>)
 801096e:	4598      	cmp	r8, r3
 8010970:	bfcc      	ite	gt
 8010972:	4d21      	ldrgt	r5, [pc, #132]	; (80109f8 <__kernel_cos+0x188>)
 8010974:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010978:	2400      	movs	r4, #0
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	2000      	movs	r0, #0
 8010980:	f7ef fcaa 	bl	80002d8 <__aeabi_dsub>
 8010984:	4622      	mov	r2, r4
 8010986:	4680      	mov	r8, r0
 8010988:	4689      	mov	r9, r1
 801098a:	462b      	mov	r3, r5
 801098c:	4650      	mov	r0, sl
 801098e:	4659      	mov	r1, fp
 8010990:	f7ef fca2 	bl	80002d8 <__aeabi_dsub>
 8010994:	4632      	mov	r2, r6
 8010996:	463b      	mov	r3, r7
 8010998:	f7ef fc9e 	bl	80002d8 <__aeabi_dsub>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	4640      	mov	r0, r8
 80109a2:	4649      	mov	r1, r9
 80109a4:	e7da      	b.n	801095c <__kernel_cos+0xec>
 80109a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80109e0 <__kernel_cos+0x170>
 80109aa:	e7db      	b.n	8010964 <__kernel_cos+0xf4>
 80109ac:	f3af 8000 	nop.w
 80109b0:	be8838d4 	.word	0xbe8838d4
 80109b4:	bda8fae9 	.word	0xbda8fae9
 80109b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80109bc:	3e21ee9e 	.word	0x3e21ee9e
 80109c0:	809c52ad 	.word	0x809c52ad
 80109c4:	3e927e4f 	.word	0x3e927e4f
 80109c8:	19cb1590 	.word	0x19cb1590
 80109cc:	3efa01a0 	.word	0x3efa01a0
 80109d0:	16c15177 	.word	0x16c15177
 80109d4:	3f56c16c 	.word	0x3f56c16c
 80109d8:	5555554c 	.word	0x5555554c
 80109dc:	3fa55555 	.word	0x3fa55555
 80109e0:	00000000 	.word	0x00000000
 80109e4:	3ff00000 	.word	0x3ff00000
 80109e8:	3fe00000 	.word	0x3fe00000
 80109ec:	3fd33332 	.word	0x3fd33332
 80109f0:	3ff00000 	.word	0x3ff00000
 80109f4:	3fe90000 	.word	0x3fe90000
 80109f8:	3fd20000 	.word	0x3fd20000
 80109fc:	00000000 	.word	0x00000000

08010a00 <__kernel_sin>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	ed2d 8b04 	vpush	{d8-d9}
 8010a08:	eeb0 8a41 	vmov.f32	s16, s2
 8010a0c:	eef0 8a61 	vmov.f32	s17, s3
 8010a10:	ec55 4b10 	vmov	r4, r5, d0
 8010a14:	b083      	sub	sp, #12
 8010a16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010a1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010a1e:	9001      	str	r0, [sp, #4]
 8010a20:	da06      	bge.n	8010a30 <__kernel_sin+0x30>
 8010a22:	ee10 0a10 	vmov	r0, s0
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7f0 f8be 	bl	8000ba8 <__aeabi_d2iz>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d051      	beq.n	8010ad4 <__kernel_sin+0xd4>
 8010a30:	4622      	mov	r2, r4
 8010a32:	462b      	mov	r3, r5
 8010a34:	4620      	mov	r0, r4
 8010a36:	4629      	mov	r1, r5
 8010a38:	f7ef fe06 	bl	8000648 <__aeabi_dmul>
 8010a3c:	4682      	mov	sl, r0
 8010a3e:	468b      	mov	fp, r1
 8010a40:	4602      	mov	r2, r0
 8010a42:	460b      	mov	r3, r1
 8010a44:	4620      	mov	r0, r4
 8010a46:	4629      	mov	r1, r5
 8010a48:	f7ef fdfe 	bl	8000648 <__aeabi_dmul>
 8010a4c:	a341      	add	r3, pc, #260	; (adr r3, 8010b54 <__kernel_sin+0x154>)
 8010a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a52:	4680      	mov	r8, r0
 8010a54:	4689      	mov	r9, r1
 8010a56:	4650      	mov	r0, sl
 8010a58:	4659      	mov	r1, fp
 8010a5a:	f7ef fdf5 	bl	8000648 <__aeabi_dmul>
 8010a5e:	a33f      	add	r3, pc, #252	; (adr r3, 8010b5c <__kernel_sin+0x15c>)
 8010a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a64:	f7ef fc38 	bl	80002d8 <__aeabi_dsub>
 8010a68:	4652      	mov	r2, sl
 8010a6a:	465b      	mov	r3, fp
 8010a6c:	f7ef fdec 	bl	8000648 <__aeabi_dmul>
 8010a70:	a33c      	add	r3, pc, #240	; (adr r3, 8010b64 <__kernel_sin+0x164>)
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f7ef fc31 	bl	80002dc <__adddf3>
 8010a7a:	4652      	mov	r2, sl
 8010a7c:	465b      	mov	r3, fp
 8010a7e:	f7ef fde3 	bl	8000648 <__aeabi_dmul>
 8010a82:	a33a      	add	r3, pc, #232	; (adr r3, 8010b6c <__kernel_sin+0x16c>)
 8010a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a88:	f7ef fc26 	bl	80002d8 <__aeabi_dsub>
 8010a8c:	4652      	mov	r2, sl
 8010a8e:	465b      	mov	r3, fp
 8010a90:	f7ef fdda 	bl	8000648 <__aeabi_dmul>
 8010a94:	a337      	add	r3, pc, #220	; (adr r3, 8010b74 <__kernel_sin+0x174>)
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	f7ef fc1f 	bl	80002dc <__adddf3>
 8010a9e:	9b01      	ldr	r3, [sp, #4]
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	460f      	mov	r7, r1
 8010aa4:	b9eb      	cbnz	r3, 8010ae2 <__kernel_sin+0xe2>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	4650      	mov	r0, sl
 8010aac:	4659      	mov	r1, fp
 8010aae:	f7ef fdcb 	bl	8000648 <__aeabi_dmul>
 8010ab2:	a325      	add	r3, pc, #148	; (adr r3, 8010b48 <__kernel_sin+0x148>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f7ef fc0e 	bl	80002d8 <__aeabi_dsub>
 8010abc:	4642      	mov	r2, r8
 8010abe:	464b      	mov	r3, r9
 8010ac0:	f7ef fdc2 	bl	8000648 <__aeabi_dmul>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	4620      	mov	r0, r4
 8010aca:	4629      	mov	r1, r5
 8010acc:	f7ef fc06 	bl	80002dc <__adddf3>
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	ec45 4b10 	vmov	d0, r4, r5
 8010ad8:	b003      	add	sp, #12
 8010ada:	ecbd 8b04 	vpop	{d8-d9}
 8010ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae2:	4b1b      	ldr	r3, [pc, #108]	; (8010b50 <__kernel_sin+0x150>)
 8010ae4:	ec51 0b18 	vmov	r0, r1, d8
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f7ef fdad 	bl	8000648 <__aeabi_dmul>
 8010aee:	4632      	mov	r2, r6
 8010af0:	ec41 0b19 	vmov	d9, r0, r1
 8010af4:	463b      	mov	r3, r7
 8010af6:	4640      	mov	r0, r8
 8010af8:	4649      	mov	r1, r9
 8010afa:	f7ef fda5 	bl	8000648 <__aeabi_dmul>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	ec51 0b19 	vmov	r0, r1, d9
 8010b06:	f7ef fbe7 	bl	80002d8 <__aeabi_dsub>
 8010b0a:	4652      	mov	r2, sl
 8010b0c:	465b      	mov	r3, fp
 8010b0e:	f7ef fd9b 	bl	8000648 <__aeabi_dmul>
 8010b12:	ec53 2b18 	vmov	r2, r3, d8
 8010b16:	f7ef fbdf 	bl	80002d8 <__aeabi_dsub>
 8010b1a:	a30b      	add	r3, pc, #44	; (adr r3, 8010b48 <__kernel_sin+0x148>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	4606      	mov	r6, r0
 8010b22:	460f      	mov	r7, r1
 8010b24:	4640      	mov	r0, r8
 8010b26:	4649      	mov	r1, r9
 8010b28:	f7ef fd8e 	bl	8000648 <__aeabi_dmul>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4630      	mov	r0, r6
 8010b32:	4639      	mov	r1, r7
 8010b34:	f7ef fbd2 	bl	80002dc <__adddf3>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f7ef fbca 	bl	80002d8 <__aeabi_dsub>
 8010b44:	e7c4      	b.n	8010ad0 <__kernel_sin+0xd0>
 8010b46:	bf00      	nop
 8010b48:	55555549 	.word	0x55555549
 8010b4c:	3fc55555 	.word	0x3fc55555
 8010b50:	3fe00000 	.word	0x3fe00000
 8010b54:	5acfd57c 	.word	0x5acfd57c
 8010b58:	3de5d93a 	.word	0x3de5d93a
 8010b5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010b60:	3e5ae5e6 	.word	0x3e5ae5e6
 8010b64:	57b1fe7d 	.word	0x57b1fe7d
 8010b68:	3ec71de3 	.word	0x3ec71de3
 8010b6c:	19c161d5 	.word	0x19c161d5
 8010b70:	3f2a01a0 	.word	0x3f2a01a0
 8010b74:	1110f8a6 	.word	0x1110f8a6
 8010b78:	3f811111 	.word	0x3f811111

08010b7c <__ieee754_fmod>:
 8010b7c:	ec53 2b11 	vmov	r2, r3, d1
 8010b80:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8010b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b88:	ea5c 0402 	orrs.w	r4, ip, r2
 8010b8c:	ec51 0b10 	vmov	r0, r1, d0
 8010b90:	ee11 7a10 	vmov	r7, s2
 8010b94:	ee11 ea10 	vmov	lr, s2
 8010b98:	461e      	mov	r6, r3
 8010b9a:	d00c      	beq.n	8010bb6 <__ieee754_fmod+0x3a>
 8010b9c:	4c78      	ldr	r4, [pc, #480]	; (8010d80 <__ieee754_fmod+0x204>)
 8010b9e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8010ba2:	45a0      	cmp	r8, r4
 8010ba4:	4689      	mov	r9, r1
 8010ba6:	dc06      	bgt.n	8010bb6 <__ieee754_fmod+0x3a>
 8010ba8:	4254      	negs	r4, r2
 8010baa:	4d76      	ldr	r5, [pc, #472]	; (8010d84 <__ieee754_fmod+0x208>)
 8010bac:	4314      	orrs	r4, r2
 8010bae:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8010bb2:	42ac      	cmp	r4, r5
 8010bb4:	d909      	bls.n	8010bca <__ieee754_fmod+0x4e>
 8010bb6:	f7ef fd47 	bl	8000648 <__aeabi_dmul>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	f7ef fe6d 	bl	800089c <__aeabi_ddiv>
 8010bc2:	ec41 0b10 	vmov	d0, r0, r1
 8010bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bca:	45e0      	cmp	r8, ip
 8010bcc:	ee10 aa10 	vmov	sl, s0
 8010bd0:	ee10 4a10 	vmov	r4, s0
 8010bd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010bd8:	dc09      	bgt.n	8010bee <__ieee754_fmod+0x72>
 8010bda:	dbf2      	blt.n	8010bc2 <__ieee754_fmod+0x46>
 8010bdc:	4290      	cmp	r0, r2
 8010bde:	d3f0      	bcc.n	8010bc2 <__ieee754_fmod+0x46>
 8010be0:	d105      	bne.n	8010bee <__ieee754_fmod+0x72>
 8010be2:	4b69      	ldr	r3, [pc, #420]	; (8010d88 <__ieee754_fmod+0x20c>)
 8010be4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8010be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bec:	e7e9      	b.n	8010bc2 <__ieee754_fmod+0x46>
 8010bee:	4a65      	ldr	r2, [pc, #404]	; (8010d84 <__ieee754_fmod+0x208>)
 8010bf0:	ea19 0f02 	tst.w	r9, r2
 8010bf4:	d148      	bne.n	8010c88 <__ieee754_fmod+0x10c>
 8010bf6:	f1b8 0f00 	cmp.w	r8, #0
 8010bfa:	d13d      	bne.n	8010c78 <__ieee754_fmod+0xfc>
 8010bfc:	4963      	ldr	r1, [pc, #396]	; (8010d8c <__ieee754_fmod+0x210>)
 8010bfe:	4653      	mov	r3, sl
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dc36      	bgt.n	8010c72 <__ieee754_fmod+0xf6>
 8010c04:	4216      	tst	r6, r2
 8010c06:	d14f      	bne.n	8010ca8 <__ieee754_fmod+0x12c>
 8010c08:	f1bc 0f00 	cmp.w	ip, #0
 8010c0c:	d144      	bne.n	8010c98 <__ieee754_fmod+0x11c>
 8010c0e:	4a5f      	ldr	r2, [pc, #380]	; (8010d8c <__ieee754_fmod+0x210>)
 8010c10:	463b      	mov	r3, r7
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	dc3d      	bgt.n	8010c92 <__ieee754_fmod+0x116>
 8010c16:	485e      	ldr	r0, [pc, #376]	; (8010d90 <__ieee754_fmod+0x214>)
 8010c18:	4281      	cmp	r1, r0
 8010c1a:	db4a      	blt.n	8010cb2 <__ieee754_fmod+0x136>
 8010c1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c24:	485a      	ldr	r0, [pc, #360]	; (8010d90 <__ieee754_fmod+0x214>)
 8010c26:	4282      	cmp	r2, r0
 8010c28:	db57      	blt.n	8010cda <__ieee754_fmod+0x15e>
 8010c2a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8010c2e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8010c32:	1a89      	subs	r1, r1, r2
 8010c34:	1b98      	subs	r0, r3, r6
 8010c36:	eba4 070e 	sub.w	r7, r4, lr
 8010c3a:	2900      	cmp	r1, #0
 8010c3c:	d162      	bne.n	8010d04 <__ieee754_fmod+0x188>
 8010c3e:	4574      	cmp	r4, lr
 8010c40:	bf38      	it	cc
 8010c42:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010c46:	2800      	cmp	r0, #0
 8010c48:	bfa4      	itt	ge
 8010c4a:	463c      	movge	r4, r7
 8010c4c:	4603      	movge	r3, r0
 8010c4e:	ea53 0104 	orrs.w	r1, r3, r4
 8010c52:	d0c6      	beq.n	8010be2 <__ieee754_fmod+0x66>
 8010c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c58:	db69      	blt.n	8010d2e <__ieee754_fmod+0x1b2>
 8010c5a:	494d      	ldr	r1, [pc, #308]	; (8010d90 <__ieee754_fmod+0x214>)
 8010c5c:	428a      	cmp	r2, r1
 8010c5e:	db6c      	blt.n	8010d3a <__ieee754_fmod+0x1be>
 8010c60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010c64:	432b      	orrs	r3, r5
 8010c66:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8010c6a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010c6e:	4620      	mov	r0, r4
 8010c70:	e7a7      	b.n	8010bc2 <__ieee754_fmod+0x46>
 8010c72:	3901      	subs	r1, #1
 8010c74:	005b      	lsls	r3, r3, #1
 8010c76:	e7c3      	b.n	8010c00 <__ieee754_fmod+0x84>
 8010c78:	4945      	ldr	r1, [pc, #276]	; (8010d90 <__ieee754_fmod+0x214>)
 8010c7a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	ddc0      	ble.n	8010c04 <__ieee754_fmod+0x88>
 8010c82:	3901      	subs	r1, #1
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	e7fa      	b.n	8010c7e <__ieee754_fmod+0x102>
 8010c88:	ea4f 5128 	mov.w	r1, r8, asr #20
 8010c8c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010c90:	e7b8      	b.n	8010c04 <__ieee754_fmod+0x88>
 8010c92:	3a01      	subs	r2, #1
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	e7bc      	b.n	8010c12 <__ieee754_fmod+0x96>
 8010c98:	4a3d      	ldr	r2, [pc, #244]	; (8010d90 <__ieee754_fmod+0x214>)
 8010c9a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	ddb9      	ble.n	8010c16 <__ieee754_fmod+0x9a>
 8010ca2:	3a01      	subs	r2, #1
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	e7fa      	b.n	8010c9e <__ieee754_fmod+0x122>
 8010ca8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8010cac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010cb0:	e7b1      	b.n	8010c16 <__ieee754_fmod+0x9a>
 8010cb2:	1a40      	subs	r0, r0, r1
 8010cb4:	281f      	cmp	r0, #31
 8010cb6:	dc0a      	bgt.n	8010cce <__ieee754_fmod+0x152>
 8010cb8:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8010cbc:	fa08 f800 	lsl.w	r8, r8, r0
 8010cc0:	fa2a f303 	lsr.w	r3, sl, r3
 8010cc4:	ea43 0308 	orr.w	r3, r3, r8
 8010cc8:	fa0a f400 	lsl.w	r4, sl, r0
 8010ccc:	e7aa      	b.n	8010c24 <__ieee754_fmod+0xa8>
 8010cce:	4b31      	ldr	r3, [pc, #196]	; (8010d94 <__ieee754_fmod+0x218>)
 8010cd0:	1a5b      	subs	r3, r3, r1
 8010cd2:	fa0a f303 	lsl.w	r3, sl, r3
 8010cd6:	2400      	movs	r4, #0
 8010cd8:	e7a4      	b.n	8010c24 <__ieee754_fmod+0xa8>
 8010cda:	1a80      	subs	r0, r0, r2
 8010cdc:	281f      	cmp	r0, #31
 8010cde:	dc0a      	bgt.n	8010cf6 <__ieee754_fmod+0x17a>
 8010ce0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8010ce4:	fa0c fc00 	lsl.w	ip, ip, r0
 8010ce8:	fa27 f606 	lsr.w	r6, r7, r6
 8010cec:	ea46 060c 	orr.w	r6, r6, ip
 8010cf0:	fa07 fe00 	lsl.w	lr, r7, r0
 8010cf4:	e79d      	b.n	8010c32 <__ieee754_fmod+0xb6>
 8010cf6:	4e27      	ldr	r6, [pc, #156]	; (8010d94 <__ieee754_fmod+0x218>)
 8010cf8:	1ab6      	subs	r6, r6, r2
 8010cfa:	fa07 f606 	lsl.w	r6, r7, r6
 8010cfe:	f04f 0e00 	mov.w	lr, #0
 8010d02:	e796      	b.n	8010c32 <__ieee754_fmod+0xb6>
 8010d04:	4574      	cmp	r4, lr
 8010d06:	bf38      	it	cc
 8010d08:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	da05      	bge.n	8010d1c <__ieee754_fmod+0x1a0>
 8010d10:	0fe0      	lsrs	r0, r4, #31
 8010d12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010d16:	0064      	lsls	r4, r4, #1
 8010d18:	3901      	subs	r1, #1
 8010d1a:	e78b      	b.n	8010c34 <__ieee754_fmod+0xb8>
 8010d1c:	ea50 0307 	orrs.w	r3, r0, r7
 8010d20:	f43f af5f 	beq.w	8010be2 <__ieee754_fmod+0x66>
 8010d24:	0ffb      	lsrs	r3, r7, #31
 8010d26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010d2a:	007c      	lsls	r4, r7, #1
 8010d2c:	e7f4      	b.n	8010d18 <__ieee754_fmod+0x19c>
 8010d2e:	0fe1      	lsrs	r1, r4, #31
 8010d30:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010d34:	0064      	lsls	r4, r4, #1
 8010d36:	3a01      	subs	r2, #1
 8010d38:	e78c      	b.n	8010c54 <__ieee754_fmod+0xd8>
 8010d3a:	1a89      	subs	r1, r1, r2
 8010d3c:	2914      	cmp	r1, #20
 8010d3e:	dc0a      	bgt.n	8010d56 <__ieee754_fmod+0x1da>
 8010d40:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8010d44:	fa03 f202 	lsl.w	r2, r3, r2
 8010d48:	40cc      	lsrs	r4, r1
 8010d4a:	4322      	orrs	r2, r4
 8010d4c:	410b      	asrs	r3, r1
 8010d4e:	ea43 0105 	orr.w	r1, r3, r5
 8010d52:	4610      	mov	r0, r2
 8010d54:	e735      	b.n	8010bc2 <__ieee754_fmod+0x46>
 8010d56:	291f      	cmp	r1, #31
 8010d58:	dc07      	bgt.n	8010d6a <__ieee754_fmod+0x1ee>
 8010d5a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8010d5e:	40cc      	lsrs	r4, r1
 8010d60:	fa03 f202 	lsl.w	r2, r3, r2
 8010d64:	4322      	orrs	r2, r4
 8010d66:	462b      	mov	r3, r5
 8010d68:	e7f1      	b.n	8010d4e <__ieee754_fmod+0x1d2>
 8010d6a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8010d6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d72:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8010d76:	32e2      	adds	r2, #226	; 0xe2
 8010d78:	fa43 f202 	asr.w	r2, r3, r2
 8010d7c:	e7f3      	b.n	8010d66 <__ieee754_fmod+0x1ea>
 8010d7e:	bf00      	nop
 8010d80:	7fefffff 	.word	0x7fefffff
 8010d84:	7ff00000 	.word	0x7ff00000
 8010d88:	08011ed8 	.word	0x08011ed8
 8010d8c:	fffffbed 	.word	0xfffffbed
 8010d90:	fffffc02 	.word	0xfffffc02
 8010d94:	fffffbe2 	.word	0xfffffbe2

08010d98 <__ieee754_rem_pio2>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	ed2d 8b02 	vpush	{d8}
 8010da0:	ec55 4b10 	vmov	r4, r5, d0
 8010da4:	4bca      	ldr	r3, [pc, #808]	; (80110d0 <__ieee754_rem_pio2+0x338>)
 8010da6:	b08b      	sub	sp, #44	; 0x2c
 8010da8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010dac:	4598      	cmp	r8, r3
 8010dae:	4682      	mov	sl, r0
 8010db0:	9502      	str	r5, [sp, #8]
 8010db2:	dc08      	bgt.n	8010dc6 <__ieee754_rem_pio2+0x2e>
 8010db4:	2200      	movs	r2, #0
 8010db6:	2300      	movs	r3, #0
 8010db8:	ed80 0b00 	vstr	d0, [r0]
 8010dbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010dc0:	f04f 0b00 	mov.w	fp, #0
 8010dc4:	e028      	b.n	8010e18 <__ieee754_rem_pio2+0x80>
 8010dc6:	4bc3      	ldr	r3, [pc, #780]	; (80110d4 <__ieee754_rem_pio2+0x33c>)
 8010dc8:	4598      	cmp	r8, r3
 8010dca:	dc78      	bgt.n	8010ebe <__ieee754_rem_pio2+0x126>
 8010dcc:	9b02      	ldr	r3, [sp, #8]
 8010dce:	4ec2      	ldr	r6, [pc, #776]	; (80110d8 <__ieee754_rem_pio2+0x340>)
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	ee10 0a10 	vmov	r0, s0
 8010dd6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011098 <__ieee754_rem_pio2+0x300>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	4629      	mov	r1, r5
 8010dde:	dd39      	ble.n	8010e54 <__ieee754_rem_pio2+0xbc>
 8010de0:	f7ef fa7a 	bl	80002d8 <__aeabi_dsub>
 8010de4:	45b0      	cmp	r8, r6
 8010de6:	4604      	mov	r4, r0
 8010de8:	460d      	mov	r5, r1
 8010dea:	d01b      	beq.n	8010e24 <__ieee754_rem_pio2+0x8c>
 8010dec:	a3ac      	add	r3, pc, #688	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x308>)
 8010dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df2:	f7ef fa71 	bl	80002d8 <__aeabi_dsub>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	e9ca 2300 	strd	r2, r3, [sl]
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fa69 	bl	80002d8 <__aeabi_dsub>
 8010e06:	a3a6      	add	r3, pc, #664	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x308>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	f7ef fa64 	bl	80002d8 <__aeabi_dsub>
 8010e10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e14:	f04f 0b01 	mov.w	fp, #1
 8010e18:	4658      	mov	r0, fp
 8010e1a:	b00b      	add	sp, #44	; 0x2c
 8010e1c:	ecbd 8b02 	vpop	{d8}
 8010e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e24:	a3a0      	add	r3, pc, #640	; (adr r3, 80110a8 <__ieee754_rem_pio2+0x310>)
 8010e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2a:	f7ef fa55 	bl	80002d8 <__aeabi_dsub>
 8010e2e:	a3a0      	add	r3, pc, #640	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x318>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	4604      	mov	r4, r0
 8010e36:	460d      	mov	r5, r1
 8010e38:	f7ef fa4e 	bl	80002d8 <__aeabi_dsub>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	e9ca 2300 	strd	r2, r3, [sl]
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fa46 	bl	80002d8 <__aeabi_dsub>
 8010e4c:	a398      	add	r3, pc, #608	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x318>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	e7db      	b.n	8010e0c <__ieee754_rem_pio2+0x74>
 8010e54:	f7ef fa42 	bl	80002dc <__adddf3>
 8010e58:	45b0      	cmp	r8, r6
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	460d      	mov	r5, r1
 8010e5e:	d016      	beq.n	8010e8e <__ieee754_rem_pio2+0xf6>
 8010e60:	a38f      	add	r3, pc, #572	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x308>)
 8010e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e66:	f7ef fa39 	bl	80002dc <__adddf3>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	e9ca 2300 	strd	r2, r3, [sl]
 8010e72:	4620      	mov	r0, r4
 8010e74:	4629      	mov	r1, r5
 8010e76:	f7ef fa2f 	bl	80002d8 <__aeabi_dsub>
 8010e7a:	a389      	add	r3, pc, #548	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x308>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	f7ef fa2c 	bl	80002dc <__adddf3>
 8010e84:	f04f 3bff 	mov.w	fp, #4294967295
 8010e88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e8c:	e7c4      	b.n	8010e18 <__ieee754_rem_pio2+0x80>
 8010e8e:	a386      	add	r3, pc, #536	; (adr r3, 80110a8 <__ieee754_rem_pio2+0x310>)
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	f7ef fa22 	bl	80002dc <__adddf3>
 8010e98:	a385      	add	r3, pc, #532	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x318>)
 8010e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	f7ef fa1b 	bl	80002dc <__adddf3>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	e9ca 2300 	strd	r2, r3, [sl]
 8010eae:	4620      	mov	r0, r4
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7ef fa11 	bl	80002d8 <__aeabi_dsub>
 8010eb6:	a37e      	add	r3, pc, #504	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x318>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	e7e0      	b.n	8010e80 <__ieee754_rem_pio2+0xe8>
 8010ebe:	4b87      	ldr	r3, [pc, #540]	; (80110dc <__ieee754_rem_pio2+0x344>)
 8010ec0:	4598      	cmp	r8, r3
 8010ec2:	f300 80d8 	bgt.w	8011076 <__ieee754_rem_pio2+0x2de>
 8010ec6:	f000 f96d 	bl	80111a4 <fabs>
 8010eca:	ec55 4b10 	vmov	r4, r5, d0
 8010ece:	ee10 0a10 	vmov	r0, s0
 8010ed2:	a379      	add	r3, pc, #484	; (adr r3, 80110b8 <__ieee754_rem_pio2+0x320>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef fbb5 	bl	8000648 <__aeabi_dmul>
 8010ede:	4b80      	ldr	r3, [pc, #512]	; (80110e0 <__ieee754_rem_pio2+0x348>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f7ef f9fb 	bl	80002dc <__adddf3>
 8010ee6:	f7ef fe5f 	bl	8000ba8 <__aeabi_d2iz>
 8010eea:	4683      	mov	fp, r0
 8010eec:	f7ef fb42 	bl	8000574 <__aeabi_i2d>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	ec43 2b18 	vmov	d8, r2, r3
 8010ef8:	a367      	add	r3, pc, #412	; (adr r3, 8011098 <__ieee754_rem_pio2+0x300>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	f7ef fba3 	bl	8000648 <__aeabi_dmul>
 8010f02:	4602      	mov	r2, r0
 8010f04:	460b      	mov	r3, r1
 8010f06:	4620      	mov	r0, r4
 8010f08:	4629      	mov	r1, r5
 8010f0a:	f7ef f9e5 	bl	80002d8 <__aeabi_dsub>
 8010f0e:	a364      	add	r3, pc, #400	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x308>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	4606      	mov	r6, r0
 8010f16:	460f      	mov	r7, r1
 8010f18:	ec51 0b18 	vmov	r0, r1, d8
 8010f1c:	f7ef fb94 	bl	8000648 <__aeabi_dmul>
 8010f20:	f1bb 0f1f 	cmp.w	fp, #31
 8010f24:	4604      	mov	r4, r0
 8010f26:	460d      	mov	r5, r1
 8010f28:	dc0d      	bgt.n	8010f46 <__ieee754_rem_pio2+0x1ae>
 8010f2a:	4b6e      	ldr	r3, [pc, #440]	; (80110e4 <__ieee754_rem_pio2+0x34c>)
 8010f2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f34:	4543      	cmp	r3, r8
 8010f36:	d006      	beq.n	8010f46 <__ieee754_rem_pio2+0x1ae>
 8010f38:	4622      	mov	r2, r4
 8010f3a:	462b      	mov	r3, r5
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	4639      	mov	r1, r7
 8010f40:	f7ef f9ca 	bl	80002d8 <__aeabi_dsub>
 8010f44:	e00e      	b.n	8010f64 <__ieee754_rem_pio2+0x1cc>
 8010f46:	462b      	mov	r3, r5
 8010f48:	4622      	mov	r2, r4
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ef f9c3 	bl	80002d8 <__aeabi_dsub>
 8010f52:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f56:	9303      	str	r3, [sp, #12]
 8010f58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f5c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010f60:	2b10      	cmp	r3, #16
 8010f62:	dc02      	bgt.n	8010f6a <__ieee754_rem_pio2+0x1d2>
 8010f64:	e9ca 0100 	strd	r0, r1, [sl]
 8010f68:	e039      	b.n	8010fde <__ieee754_rem_pio2+0x246>
 8010f6a:	a34f      	add	r3, pc, #316	; (adr r3, 80110a8 <__ieee754_rem_pio2+0x310>)
 8010f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f70:	ec51 0b18 	vmov	r0, r1, d8
 8010f74:	f7ef fb68 	bl	8000648 <__aeabi_dmul>
 8010f78:	4604      	mov	r4, r0
 8010f7a:	460d      	mov	r5, r1
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	4630      	mov	r0, r6
 8010f82:	4639      	mov	r1, r7
 8010f84:	f7ef f9a8 	bl	80002d8 <__aeabi_dsub>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	4689      	mov	r9, r1
 8010f90:	4630      	mov	r0, r6
 8010f92:	4639      	mov	r1, r7
 8010f94:	f7ef f9a0 	bl	80002d8 <__aeabi_dsub>
 8010f98:	4622      	mov	r2, r4
 8010f9a:	462b      	mov	r3, r5
 8010f9c:	f7ef f99c 	bl	80002d8 <__aeabi_dsub>
 8010fa0:	a343      	add	r3, pc, #268	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x318>)
 8010fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	460d      	mov	r5, r1
 8010faa:	ec51 0b18 	vmov	r0, r1, d8
 8010fae:	f7ef fb4b 	bl	8000648 <__aeabi_dmul>
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	462b      	mov	r3, r5
 8010fb6:	f7ef f98f 	bl	80002d8 <__aeabi_dsub>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	460d      	mov	r5, r1
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	f7ef f987 	bl	80002d8 <__aeabi_dsub>
 8010fca:	9a03      	ldr	r2, [sp, #12]
 8010fcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	2b31      	cmp	r3, #49	; 0x31
 8010fd4:	dc24      	bgt.n	8011020 <__ieee754_rem_pio2+0x288>
 8010fd6:	e9ca 0100 	strd	r0, r1, [sl]
 8010fda:	4646      	mov	r6, r8
 8010fdc:	464f      	mov	r7, r9
 8010fde:	e9da 8900 	ldrd	r8, r9, [sl]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4642      	mov	r2, r8
 8010fe6:	464b      	mov	r3, r9
 8010fe8:	4639      	mov	r1, r7
 8010fea:	f7ef f975 	bl	80002d8 <__aeabi_dsub>
 8010fee:	462b      	mov	r3, r5
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	f7ef f971 	bl	80002d8 <__aeabi_dsub>
 8010ff6:	9b02      	ldr	r3, [sp, #8]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ffe:	f6bf af0b 	bge.w	8010e18 <__ieee754_rem_pio2+0x80>
 8011002:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011006:	f8ca 3004 	str.w	r3, [sl, #4]
 801100a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801100e:	f8ca 8000 	str.w	r8, [sl]
 8011012:	f8ca 0008 	str.w	r0, [sl, #8]
 8011016:	f8ca 300c 	str.w	r3, [sl, #12]
 801101a:	f1cb 0b00 	rsb	fp, fp, #0
 801101e:	e6fb      	b.n	8010e18 <__ieee754_rem_pio2+0x80>
 8011020:	a327      	add	r3, pc, #156	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x328>)
 8011022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011026:	ec51 0b18 	vmov	r0, r1, d8
 801102a:	f7ef fb0d 	bl	8000648 <__aeabi_dmul>
 801102e:	4604      	mov	r4, r0
 8011030:	460d      	mov	r5, r1
 8011032:	4602      	mov	r2, r0
 8011034:	460b      	mov	r3, r1
 8011036:	4640      	mov	r0, r8
 8011038:	4649      	mov	r1, r9
 801103a:	f7ef f94d 	bl	80002d8 <__aeabi_dsub>
 801103e:	4602      	mov	r2, r0
 8011040:	460b      	mov	r3, r1
 8011042:	4606      	mov	r6, r0
 8011044:	460f      	mov	r7, r1
 8011046:	4640      	mov	r0, r8
 8011048:	4649      	mov	r1, r9
 801104a:	f7ef f945 	bl	80002d8 <__aeabi_dsub>
 801104e:	4622      	mov	r2, r4
 8011050:	462b      	mov	r3, r5
 8011052:	f7ef f941 	bl	80002d8 <__aeabi_dsub>
 8011056:	a31c      	add	r3, pc, #112	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x330>)
 8011058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105c:	4604      	mov	r4, r0
 801105e:	460d      	mov	r5, r1
 8011060:	ec51 0b18 	vmov	r0, r1, d8
 8011064:	f7ef faf0 	bl	8000648 <__aeabi_dmul>
 8011068:	4622      	mov	r2, r4
 801106a:	462b      	mov	r3, r5
 801106c:	f7ef f934 	bl	80002d8 <__aeabi_dsub>
 8011070:	4604      	mov	r4, r0
 8011072:	460d      	mov	r5, r1
 8011074:	e760      	b.n	8010f38 <__ieee754_rem_pio2+0x1a0>
 8011076:	4b1c      	ldr	r3, [pc, #112]	; (80110e8 <__ieee754_rem_pio2+0x350>)
 8011078:	4598      	cmp	r8, r3
 801107a:	dd37      	ble.n	80110ec <__ieee754_rem_pio2+0x354>
 801107c:	ee10 2a10 	vmov	r2, s0
 8011080:	462b      	mov	r3, r5
 8011082:	4620      	mov	r0, r4
 8011084:	4629      	mov	r1, r5
 8011086:	f7ef f927 	bl	80002d8 <__aeabi_dsub>
 801108a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801108e:	e9ca 0100 	strd	r0, r1, [sl]
 8011092:	e695      	b.n	8010dc0 <__ieee754_rem_pio2+0x28>
 8011094:	f3af 8000 	nop.w
 8011098:	54400000 	.word	0x54400000
 801109c:	3ff921fb 	.word	0x3ff921fb
 80110a0:	1a626331 	.word	0x1a626331
 80110a4:	3dd0b461 	.word	0x3dd0b461
 80110a8:	1a600000 	.word	0x1a600000
 80110ac:	3dd0b461 	.word	0x3dd0b461
 80110b0:	2e037073 	.word	0x2e037073
 80110b4:	3ba3198a 	.word	0x3ba3198a
 80110b8:	6dc9c883 	.word	0x6dc9c883
 80110bc:	3fe45f30 	.word	0x3fe45f30
 80110c0:	2e000000 	.word	0x2e000000
 80110c4:	3ba3198a 	.word	0x3ba3198a
 80110c8:	252049c1 	.word	0x252049c1
 80110cc:	397b839a 	.word	0x397b839a
 80110d0:	3fe921fb 	.word	0x3fe921fb
 80110d4:	4002d97b 	.word	0x4002d97b
 80110d8:	3ff921fb 	.word	0x3ff921fb
 80110dc:	413921fb 	.word	0x413921fb
 80110e0:	3fe00000 	.word	0x3fe00000
 80110e4:	08011ee8 	.word	0x08011ee8
 80110e8:	7fefffff 	.word	0x7fefffff
 80110ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 80110f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80110f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80110f8:	4620      	mov	r0, r4
 80110fa:	460d      	mov	r5, r1
 80110fc:	f7ef fd54 	bl	8000ba8 <__aeabi_d2iz>
 8011100:	f7ef fa38 	bl	8000574 <__aeabi_i2d>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	4620      	mov	r0, r4
 801110a:	4629      	mov	r1, r5
 801110c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011110:	f7ef f8e2 	bl	80002d8 <__aeabi_dsub>
 8011114:	4b21      	ldr	r3, [pc, #132]	; (801119c <__ieee754_rem_pio2+0x404>)
 8011116:	2200      	movs	r2, #0
 8011118:	f7ef fa96 	bl	8000648 <__aeabi_dmul>
 801111c:	460d      	mov	r5, r1
 801111e:	4604      	mov	r4, r0
 8011120:	f7ef fd42 	bl	8000ba8 <__aeabi_d2iz>
 8011124:	f7ef fa26 	bl	8000574 <__aeabi_i2d>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4620      	mov	r0, r4
 801112e:	4629      	mov	r1, r5
 8011130:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011134:	f7ef f8d0 	bl	80002d8 <__aeabi_dsub>
 8011138:	4b18      	ldr	r3, [pc, #96]	; (801119c <__ieee754_rem_pio2+0x404>)
 801113a:	2200      	movs	r2, #0
 801113c:	f7ef fa84 	bl	8000648 <__aeabi_dmul>
 8011140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011144:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011148:	2703      	movs	r7, #3
 801114a:	2400      	movs	r4, #0
 801114c:	2500      	movs	r5, #0
 801114e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011152:	4622      	mov	r2, r4
 8011154:	462b      	mov	r3, r5
 8011156:	46b9      	mov	r9, r7
 8011158:	3f01      	subs	r7, #1
 801115a:	f7ef fcdd 	bl	8000b18 <__aeabi_dcmpeq>
 801115e:	2800      	cmp	r0, #0
 8011160:	d1f5      	bne.n	801114e <__ieee754_rem_pio2+0x3b6>
 8011162:	4b0f      	ldr	r3, [pc, #60]	; (80111a0 <__ieee754_rem_pio2+0x408>)
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	2302      	movs	r3, #2
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	4632      	mov	r2, r6
 801116c:	464b      	mov	r3, r9
 801116e:	4651      	mov	r1, sl
 8011170:	a804      	add	r0, sp, #16
 8011172:	f000 f821 	bl	80111b8 <__kernel_rem_pio2>
 8011176:	9b02      	ldr	r3, [sp, #8]
 8011178:	2b00      	cmp	r3, #0
 801117a:	4683      	mov	fp, r0
 801117c:	f6bf ae4c 	bge.w	8010e18 <__ieee754_rem_pio2+0x80>
 8011180:	e9da 2100 	ldrd	r2, r1, [sl]
 8011184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011188:	e9ca 2300 	strd	r2, r3, [sl]
 801118c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011194:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011198:	e73f      	b.n	801101a <__ieee754_rem_pio2+0x282>
 801119a:	bf00      	nop
 801119c:	41700000 	.word	0x41700000
 80111a0:	08011f68 	.word	0x08011f68

080111a4 <fabs>:
 80111a4:	ec51 0b10 	vmov	r0, r1, d0
 80111a8:	ee10 2a10 	vmov	r2, s0
 80111ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111b0:	ec43 2b10 	vmov	d0, r2, r3
 80111b4:	4770      	bx	lr
	...

080111b8 <__kernel_rem_pio2>:
 80111b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111bc:	ed2d 8b02 	vpush	{d8}
 80111c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80111c4:	f112 0f14 	cmn.w	r2, #20
 80111c8:	9306      	str	r3, [sp, #24]
 80111ca:	9104      	str	r1, [sp, #16]
 80111cc:	4bc2      	ldr	r3, [pc, #776]	; (80114d8 <__kernel_rem_pio2+0x320>)
 80111ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80111d0:	9009      	str	r0, [sp, #36]	; 0x24
 80111d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	9b06      	ldr	r3, [sp, #24]
 80111da:	f103 33ff 	add.w	r3, r3, #4294967295
 80111de:	bfa8      	it	ge
 80111e0:	1ed4      	subge	r4, r2, #3
 80111e2:	9305      	str	r3, [sp, #20]
 80111e4:	bfb2      	itee	lt
 80111e6:	2400      	movlt	r4, #0
 80111e8:	2318      	movge	r3, #24
 80111ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80111ee:	f06f 0317 	mvn.w	r3, #23
 80111f2:	fb04 3303 	mla	r3, r4, r3, r3
 80111f6:	eb03 0a02 	add.w	sl, r3, r2
 80111fa:	9b00      	ldr	r3, [sp, #0]
 80111fc:	9a05      	ldr	r2, [sp, #20]
 80111fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80114c8 <__kernel_rem_pio2+0x310>
 8011202:	eb03 0802 	add.w	r8, r3, r2
 8011206:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011208:	1aa7      	subs	r7, r4, r2
 801120a:	ae20      	add	r6, sp, #128	; 0x80
 801120c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011210:	2500      	movs	r5, #0
 8011212:	4545      	cmp	r5, r8
 8011214:	dd13      	ble.n	801123e <__kernel_rem_pio2+0x86>
 8011216:	9b06      	ldr	r3, [sp, #24]
 8011218:	aa20      	add	r2, sp, #128	; 0x80
 801121a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801121e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011222:	f04f 0800 	mov.w	r8, #0
 8011226:	9b00      	ldr	r3, [sp, #0]
 8011228:	4598      	cmp	r8, r3
 801122a:	dc31      	bgt.n	8011290 <__kernel_rem_pio2+0xd8>
 801122c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80114c8 <__kernel_rem_pio2+0x310>
 8011230:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011238:	462f      	mov	r7, r5
 801123a:	2600      	movs	r6, #0
 801123c:	e01b      	b.n	8011276 <__kernel_rem_pio2+0xbe>
 801123e:	42ef      	cmn	r7, r5
 8011240:	d407      	bmi.n	8011252 <__kernel_rem_pio2+0x9a>
 8011242:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011246:	f7ef f995 	bl	8000574 <__aeabi_i2d>
 801124a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801124e:	3501      	adds	r5, #1
 8011250:	e7df      	b.n	8011212 <__kernel_rem_pio2+0x5a>
 8011252:	ec51 0b18 	vmov	r0, r1, d8
 8011256:	e7f8      	b.n	801124a <__kernel_rem_pio2+0x92>
 8011258:	e9d7 2300 	ldrd	r2, r3, [r7]
 801125c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011260:	f7ef f9f2 	bl	8000648 <__aeabi_dmul>
 8011264:	4602      	mov	r2, r0
 8011266:	460b      	mov	r3, r1
 8011268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801126c:	f7ef f836 	bl	80002dc <__adddf3>
 8011270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011274:	3601      	adds	r6, #1
 8011276:	9b05      	ldr	r3, [sp, #20]
 8011278:	429e      	cmp	r6, r3
 801127a:	f1a7 0708 	sub.w	r7, r7, #8
 801127e:	ddeb      	ble.n	8011258 <__kernel_rem_pio2+0xa0>
 8011280:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011284:	f108 0801 	add.w	r8, r8, #1
 8011288:	ecab 7b02 	vstmia	fp!, {d7}
 801128c:	3508      	adds	r5, #8
 801128e:	e7ca      	b.n	8011226 <__kernel_rem_pio2+0x6e>
 8011290:	9b00      	ldr	r3, [sp, #0]
 8011292:	aa0c      	add	r2, sp, #48	; 0x30
 8011294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011298:	930b      	str	r3, [sp, #44]	; 0x2c
 801129a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801129c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80112a0:	9c00      	ldr	r4, [sp, #0]
 80112a2:	930a      	str	r3, [sp, #40]	; 0x28
 80112a4:	00e3      	lsls	r3, r4, #3
 80112a6:	9308      	str	r3, [sp, #32]
 80112a8:	ab98      	add	r3, sp, #608	; 0x260
 80112aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80112b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80112b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80112b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80112bc:	46c3      	mov	fp, r8
 80112be:	46a1      	mov	r9, r4
 80112c0:	f1b9 0f00 	cmp.w	r9, #0
 80112c4:	f1a5 0508 	sub.w	r5, r5, #8
 80112c8:	dc77      	bgt.n	80113ba <__kernel_rem_pio2+0x202>
 80112ca:	ec47 6b10 	vmov	d0, r6, r7
 80112ce:	4650      	mov	r0, sl
 80112d0:	f000 fac2 	bl	8011858 <scalbn>
 80112d4:	ec57 6b10 	vmov	r6, r7, d0
 80112d8:	2200      	movs	r2, #0
 80112da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80112de:	ee10 0a10 	vmov	r0, s0
 80112e2:	4639      	mov	r1, r7
 80112e4:	f7ef f9b0 	bl	8000648 <__aeabi_dmul>
 80112e8:	ec41 0b10 	vmov	d0, r0, r1
 80112ec:	f000 fb34 	bl	8011958 <floor>
 80112f0:	4b7a      	ldr	r3, [pc, #488]	; (80114dc <__kernel_rem_pio2+0x324>)
 80112f2:	ec51 0b10 	vmov	r0, r1, d0
 80112f6:	2200      	movs	r2, #0
 80112f8:	f7ef f9a6 	bl	8000648 <__aeabi_dmul>
 80112fc:	4602      	mov	r2, r0
 80112fe:	460b      	mov	r3, r1
 8011300:	4630      	mov	r0, r6
 8011302:	4639      	mov	r1, r7
 8011304:	f7ee ffe8 	bl	80002d8 <__aeabi_dsub>
 8011308:	460f      	mov	r7, r1
 801130a:	4606      	mov	r6, r0
 801130c:	f7ef fc4c 	bl	8000ba8 <__aeabi_d2iz>
 8011310:	9002      	str	r0, [sp, #8]
 8011312:	f7ef f92f 	bl	8000574 <__aeabi_i2d>
 8011316:	4602      	mov	r2, r0
 8011318:	460b      	mov	r3, r1
 801131a:	4630      	mov	r0, r6
 801131c:	4639      	mov	r1, r7
 801131e:	f7ee ffdb 	bl	80002d8 <__aeabi_dsub>
 8011322:	f1ba 0f00 	cmp.w	sl, #0
 8011326:	4606      	mov	r6, r0
 8011328:	460f      	mov	r7, r1
 801132a:	dd6d      	ble.n	8011408 <__kernel_rem_pio2+0x250>
 801132c:	1e61      	subs	r1, r4, #1
 801132e:	ab0c      	add	r3, sp, #48	; 0x30
 8011330:	9d02      	ldr	r5, [sp, #8]
 8011332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011336:	f1ca 0018 	rsb	r0, sl, #24
 801133a:	fa43 f200 	asr.w	r2, r3, r0
 801133e:	4415      	add	r5, r2
 8011340:	4082      	lsls	r2, r0
 8011342:	1a9b      	subs	r3, r3, r2
 8011344:	aa0c      	add	r2, sp, #48	; 0x30
 8011346:	9502      	str	r5, [sp, #8]
 8011348:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801134c:	f1ca 0217 	rsb	r2, sl, #23
 8011350:	fa43 fb02 	asr.w	fp, r3, r2
 8011354:	f1bb 0f00 	cmp.w	fp, #0
 8011358:	dd65      	ble.n	8011426 <__kernel_rem_pio2+0x26e>
 801135a:	9b02      	ldr	r3, [sp, #8]
 801135c:	2200      	movs	r2, #0
 801135e:	3301      	adds	r3, #1
 8011360:	9302      	str	r3, [sp, #8]
 8011362:	4615      	mov	r5, r2
 8011364:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011368:	4294      	cmp	r4, r2
 801136a:	f300 809f 	bgt.w	80114ac <__kernel_rem_pio2+0x2f4>
 801136e:	f1ba 0f00 	cmp.w	sl, #0
 8011372:	dd07      	ble.n	8011384 <__kernel_rem_pio2+0x1cc>
 8011374:	f1ba 0f01 	cmp.w	sl, #1
 8011378:	f000 80c1 	beq.w	80114fe <__kernel_rem_pio2+0x346>
 801137c:	f1ba 0f02 	cmp.w	sl, #2
 8011380:	f000 80c7 	beq.w	8011512 <__kernel_rem_pio2+0x35a>
 8011384:	f1bb 0f02 	cmp.w	fp, #2
 8011388:	d14d      	bne.n	8011426 <__kernel_rem_pio2+0x26e>
 801138a:	4632      	mov	r2, r6
 801138c:	463b      	mov	r3, r7
 801138e:	4954      	ldr	r1, [pc, #336]	; (80114e0 <__kernel_rem_pio2+0x328>)
 8011390:	2000      	movs	r0, #0
 8011392:	f7ee ffa1 	bl	80002d8 <__aeabi_dsub>
 8011396:	4606      	mov	r6, r0
 8011398:	460f      	mov	r7, r1
 801139a:	2d00      	cmp	r5, #0
 801139c:	d043      	beq.n	8011426 <__kernel_rem_pio2+0x26e>
 801139e:	4650      	mov	r0, sl
 80113a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80114d0 <__kernel_rem_pio2+0x318>
 80113a4:	f000 fa58 	bl	8011858 <scalbn>
 80113a8:	4630      	mov	r0, r6
 80113aa:	4639      	mov	r1, r7
 80113ac:	ec53 2b10 	vmov	r2, r3, d0
 80113b0:	f7ee ff92 	bl	80002d8 <__aeabi_dsub>
 80113b4:	4606      	mov	r6, r0
 80113b6:	460f      	mov	r7, r1
 80113b8:	e035      	b.n	8011426 <__kernel_rem_pio2+0x26e>
 80113ba:	4b4a      	ldr	r3, [pc, #296]	; (80114e4 <__kernel_rem_pio2+0x32c>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4630      	mov	r0, r6
 80113c0:	4639      	mov	r1, r7
 80113c2:	f7ef f941 	bl	8000648 <__aeabi_dmul>
 80113c6:	f7ef fbef 	bl	8000ba8 <__aeabi_d2iz>
 80113ca:	f7ef f8d3 	bl	8000574 <__aeabi_i2d>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	ec43 2b18 	vmov	d8, r2, r3
 80113d6:	4b44      	ldr	r3, [pc, #272]	; (80114e8 <__kernel_rem_pio2+0x330>)
 80113d8:	2200      	movs	r2, #0
 80113da:	f7ef f935 	bl	8000648 <__aeabi_dmul>
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	4630      	mov	r0, r6
 80113e4:	4639      	mov	r1, r7
 80113e6:	f7ee ff77 	bl	80002d8 <__aeabi_dsub>
 80113ea:	f7ef fbdd 	bl	8000ba8 <__aeabi_d2iz>
 80113ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113f2:	f84b 0b04 	str.w	r0, [fp], #4
 80113f6:	ec51 0b18 	vmov	r0, r1, d8
 80113fa:	f7ee ff6f 	bl	80002dc <__adddf3>
 80113fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8011402:	4606      	mov	r6, r0
 8011404:	460f      	mov	r7, r1
 8011406:	e75b      	b.n	80112c0 <__kernel_rem_pio2+0x108>
 8011408:	d106      	bne.n	8011418 <__kernel_rem_pio2+0x260>
 801140a:	1e63      	subs	r3, r4, #1
 801140c:	aa0c      	add	r2, sp, #48	; 0x30
 801140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011412:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011416:	e79d      	b.n	8011354 <__kernel_rem_pio2+0x19c>
 8011418:	4b34      	ldr	r3, [pc, #208]	; (80114ec <__kernel_rem_pio2+0x334>)
 801141a:	2200      	movs	r2, #0
 801141c:	f7ef fb9a 	bl	8000b54 <__aeabi_dcmpge>
 8011420:	2800      	cmp	r0, #0
 8011422:	d140      	bne.n	80114a6 <__kernel_rem_pio2+0x2ee>
 8011424:	4683      	mov	fp, r0
 8011426:	2200      	movs	r2, #0
 8011428:	2300      	movs	r3, #0
 801142a:	4630      	mov	r0, r6
 801142c:	4639      	mov	r1, r7
 801142e:	f7ef fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8011432:	2800      	cmp	r0, #0
 8011434:	f000 80c1 	beq.w	80115ba <__kernel_rem_pio2+0x402>
 8011438:	1e65      	subs	r5, r4, #1
 801143a:	462b      	mov	r3, r5
 801143c:	2200      	movs	r2, #0
 801143e:	9900      	ldr	r1, [sp, #0]
 8011440:	428b      	cmp	r3, r1
 8011442:	da6d      	bge.n	8011520 <__kernel_rem_pio2+0x368>
 8011444:	2a00      	cmp	r2, #0
 8011446:	f000 808a 	beq.w	801155e <__kernel_rem_pio2+0x3a6>
 801144a:	ab0c      	add	r3, sp, #48	; 0x30
 801144c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011450:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011454:	2b00      	cmp	r3, #0
 8011456:	f000 80ae 	beq.w	80115b6 <__kernel_rem_pio2+0x3fe>
 801145a:	4650      	mov	r0, sl
 801145c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80114d0 <__kernel_rem_pio2+0x318>
 8011460:	f000 f9fa 	bl	8011858 <scalbn>
 8011464:	1c6b      	adds	r3, r5, #1
 8011466:	00da      	lsls	r2, r3, #3
 8011468:	9205      	str	r2, [sp, #20]
 801146a:	ec57 6b10 	vmov	r6, r7, d0
 801146e:	aa70      	add	r2, sp, #448	; 0x1c0
 8011470:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80114e4 <__kernel_rem_pio2+0x32c>
 8011474:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011478:	462c      	mov	r4, r5
 801147a:	f04f 0800 	mov.w	r8, #0
 801147e:	2c00      	cmp	r4, #0
 8011480:	f280 80d4 	bge.w	801162c <__kernel_rem_pio2+0x474>
 8011484:	462c      	mov	r4, r5
 8011486:	2c00      	cmp	r4, #0
 8011488:	f2c0 8102 	blt.w	8011690 <__kernel_rem_pio2+0x4d8>
 801148c:	4b18      	ldr	r3, [pc, #96]	; (80114f0 <__kernel_rem_pio2+0x338>)
 801148e:	461e      	mov	r6, r3
 8011490:	ab70      	add	r3, sp, #448	; 0x1c0
 8011492:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8011496:	1b2b      	subs	r3, r5, r4
 8011498:	f04f 0900 	mov.w	r9, #0
 801149c:	f04f 0a00 	mov.w	sl, #0
 80114a0:	2700      	movs	r7, #0
 80114a2:	9306      	str	r3, [sp, #24]
 80114a4:	e0e6      	b.n	8011674 <__kernel_rem_pio2+0x4bc>
 80114a6:	f04f 0b02 	mov.w	fp, #2
 80114aa:	e756      	b.n	801135a <__kernel_rem_pio2+0x1a2>
 80114ac:	f8d8 3000 	ldr.w	r3, [r8]
 80114b0:	bb05      	cbnz	r5, 80114f4 <__kernel_rem_pio2+0x33c>
 80114b2:	b123      	cbz	r3, 80114be <__kernel_rem_pio2+0x306>
 80114b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80114b8:	f8c8 3000 	str.w	r3, [r8]
 80114bc:	2301      	movs	r3, #1
 80114be:	3201      	adds	r2, #1
 80114c0:	f108 0804 	add.w	r8, r8, #4
 80114c4:	461d      	mov	r5, r3
 80114c6:	e74f      	b.n	8011368 <__kernel_rem_pio2+0x1b0>
	...
 80114d4:	3ff00000 	.word	0x3ff00000
 80114d8:	080120b0 	.word	0x080120b0
 80114dc:	40200000 	.word	0x40200000
 80114e0:	3ff00000 	.word	0x3ff00000
 80114e4:	3e700000 	.word	0x3e700000
 80114e8:	41700000 	.word	0x41700000
 80114ec:	3fe00000 	.word	0x3fe00000
 80114f0:	08012070 	.word	0x08012070
 80114f4:	1acb      	subs	r3, r1, r3
 80114f6:	f8c8 3000 	str.w	r3, [r8]
 80114fa:	462b      	mov	r3, r5
 80114fc:	e7df      	b.n	80114be <__kernel_rem_pio2+0x306>
 80114fe:	1e62      	subs	r2, r4, #1
 8011500:	ab0c      	add	r3, sp, #48	; 0x30
 8011502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011506:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801150a:	a90c      	add	r1, sp, #48	; 0x30
 801150c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011510:	e738      	b.n	8011384 <__kernel_rem_pio2+0x1cc>
 8011512:	1e62      	subs	r2, r4, #1
 8011514:	ab0c      	add	r3, sp, #48	; 0x30
 8011516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801151a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801151e:	e7f4      	b.n	801150a <__kernel_rem_pio2+0x352>
 8011520:	a90c      	add	r1, sp, #48	; 0x30
 8011522:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011526:	3b01      	subs	r3, #1
 8011528:	430a      	orrs	r2, r1
 801152a:	e788      	b.n	801143e <__kernel_rem_pio2+0x286>
 801152c:	3301      	adds	r3, #1
 801152e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011532:	2900      	cmp	r1, #0
 8011534:	d0fa      	beq.n	801152c <__kernel_rem_pio2+0x374>
 8011536:	9a08      	ldr	r2, [sp, #32]
 8011538:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801153c:	446a      	add	r2, sp
 801153e:	3a98      	subs	r2, #152	; 0x98
 8011540:	9208      	str	r2, [sp, #32]
 8011542:	9a06      	ldr	r2, [sp, #24]
 8011544:	a920      	add	r1, sp, #128	; 0x80
 8011546:	18a2      	adds	r2, r4, r2
 8011548:	18e3      	adds	r3, r4, r3
 801154a:	f104 0801 	add.w	r8, r4, #1
 801154e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011552:	9302      	str	r3, [sp, #8]
 8011554:	9b02      	ldr	r3, [sp, #8]
 8011556:	4543      	cmp	r3, r8
 8011558:	da04      	bge.n	8011564 <__kernel_rem_pio2+0x3ac>
 801155a:	461c      	mov	r4, r3
 801155c:	e6a2      	b.n	80112a4 <__kernel_rem_pio2+0xec>
 801155e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011560:	2301      	movs	r3, #1
 8011562:	e7e4      	b.n	801152e <__kernel_rem_pio2+0x376>
 8011564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011566:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801156a:	f7ef f803 	bl	8000574 <__aeabi_i2d>
 801156e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011574:	46ab      	mov	fp, r5
 8011576:	461c      	mov	r4, r3
 8011578:	f04f 0900 	mov.w	r9, #0
 801157c:	2600      	movs	r6, #0
 801157e:	2700      	movs	r7, #0
 8011580:	9b05      	ldr	r3, [sp, #20]
 8011582:	4599      	cmp	r9, r3
 8011584:	dd06      	ble.n	8011594 <__kernel_rem_pio2+0x3dc>
 8011586:	9b08      	ldr	r3, [sp, #32]
 8011588:	e8e3 6702 	strd	r6, r7, [r3], #8
 801158c:	f108 0801 	add.w	r8, r8, #1
 8011590:	9308      	str	r3, [sp, #32]
 8011592:	e7df      	b.n	8011554 <__kernel_rem_pio2+0x39c>
 8011594:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011598:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801159c:	f7ef f854 	bl	8000648 <__aeabi_dmul>
 80115a0:	4602      	mov	r2, r0
 80115a2:	460b      	mov	r3, r1
 80115a4:	4630      	mov	r0, r6
 80115a6:	4639      	mov	r1, r7
 80115a8:	f7ee fe98 	bl	80002dc <__adddf3>
 80115ac:	f109 0901 	add.w	r9, r9, #1
 80115b0:	4606      	mov	r6, r0
 80115b2:	460f      	mov	r7, r1
 80115b4:	e7e4      	b.n	8011580 <__kernel_rem_pio2+0x3c8>
 80115b6:	3d01      	subs	r5, #1
 80115b8:	e747      	b.n	801144a <__kernel_rem_pio2+0x292>
 80115ba:	ec47 6b10 	vmov	d0, r6, r7
 80115be:	f1ca 0000 	rsb	r0, sl, #0
 80115c2:	f000 f949 	bl	8011858 <scalbn>
 80115c6:	ec57 6b10 	vmov	r6, r7, d0
 80115ca:	4ba0      	ldr	r3, [pc, #640]	; (801184c <__kernel_rem_pio2+0x694>)
 80115cc:	ee10 0a10 	vmov	r0, s0
 80115d0:	2200      	movs	r2, #0
 80115d2:	4639      	mov	r1, r7
 80115d4:	f7ef fabe 	bl	8000b54 <__aeabi_dcmpge>
 80115d8:	b1f8      	cbz	r0, 801161a <__kernel_rem_pio2+0x462>
 80115da:	4b9d      	ldr	r3, [pc, #628]	; (8011850 <__kernel_rem_pio2+0x698>)
 80115dc:	2200      	movs	r2, #0
 80115de:	4630      	mov	r0, r6
 80115e0:	4639      	mov	r1, r7
 80115e2:	f7ef f831 	bl	8000648 <__aeabi_dmul>
 80115e6:	f7ef fadf 	bl	8000ba8 <__aeabi_d2iz>
 80115ea:	4680      	mov	r8, r0
 80115ec:	f7ee ffc2 	bl	8000574 <__aeabi_i2d>
 80115f0:	4b96      	ldr	r3, [pc, #600]	; (801184c <__kernel_rem_pio2+0x694>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	f7ef f828 	bl	8000648 <__aeabi_dmul>
 80115f8:	460b      	mov	r3, r1
 80115fa:	4602      	mov	r2, r0
 80115fc:	4639      	mov	r1, r7
 80115fe:	4630      	mov	r0, r6
 8011600:	f7ee fe6a 	bl	80002d8 <__aeabi_dsub>
 8011604:	f7ef fad0 	bl	8000ba8 <__aeabi_d2iz>
 8011608:	1c65      	adds	r5, r4, #1
 801160a:	ab0c      	add	r3, sp, #48	; 0x30
 801160c:	f10a 0a18 	add.w	sl, sl, #24
 8011610:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011614:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011618:	e71f      	b.n	801145a <__kernel_rem_pio2+0x2a2>
 801161a:	4630      	mov	r0, r6
 801161c:	4639      	mov	r1, r7
 801161e:	f7ef fac3 	bl	8000ba8 <__aeabi_d2iz>
 8011622:	ab0c      	add	r3, sp, #48	; 0x30
 8011624:	4625      	mov	r5, r4
 8011626:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801162a:	e716      	b.n	801145a <__kernel_rem_pio2+0x2a2>
 801162c:	ab0c      	add	r3, sp, #48	; 0x30
 801162e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011632:	f7ee ff9f 	bl	8000574 <__aeabi_i2d>
 8011636:	4632      	mov	r2, r6
 8011638:	463b      	mov	r3, r7
 801163a:	f7ef f805 	bl	8000648 <__aeabi_dmul>
 801163e:	4642      	mov	r2, r8
 8011640:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011644:	464b      	mov	r3, r9
 8011646:	4630      	mov	r0, r6
 8011648:	4639      	mov	r1, r7
 801164a:	f7ee fffd 	bl	8000648 <__aeabi_dmul>
 801164e:	3c01      	subs	r4, #1
 8011650:	4606      	mov	r6, r0
 8011652:	460f      	mov	r7, r1
 8011654:	e713      	b.n	801147e <__kernel_rem_pio2+0x2c6>
 8011656:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801165a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801165e:	f7ee fff3 	bl	8000648 <__aeabi_dmul>
 8011662:	4602      	mov	r2, r0
 8011664:	460b      	mov	r3, r1
 8011666:	4648      	mov	r0, r9
 8011668:	4651      	mov	r1, sl
 801166a:	f7ee fe37 	bl	80002dc <__adddf3>
 801166e:	3701      	adds	r7, #1
 8011670:	4681      	mov	r9, r0
 8011672:	468a      	mov	sl, r1
 8011674:	9b00      	ldr	r3, [sp, #0]
 8011676:	429f      	cmp	r7, r3
 8011678:	dc02      	bgt.n	8011680 <__kernel_rem_pio2+0x4c8>
 801167a:	9b06      	ldr	r3, [sp, #24]
 801167c:	429f      	cmp	r7, r3
 801167e:	ddea      	ble.n	8011656 <__kernel_rem_pio2+0x49e>
 8011680:	9a06      	ldr	r2, [sp, #24]
 8011682:	ab48      	add	r3, sp, #288	; 0x120
 8011684:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011688:	e9c6 9a00 	strd	r9, sl, [r6]
 801168c:	3c01      	subs	r4, #1
 801168e:	e6fa      	b.n	8011486 <__kernel_rem_pio2+0x2ce>
 8011690:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011692:	2b02      	cmp	r3, #2
 8011694:	dc0b      	bgt.n	80116ae <__kernel_rem_pio2+0x4f6>
 8011696:	2b00      	cmp	r3, #0
 8011698:	dc39      	bgt.n	801170e <__kernel_rem_pio2+0x556>
 801169a:	d05d      	beq.n	8011758 <__kernel_rem_pio2+0x5a0>
 801169c:	9b02      	ldr	r3, [sp, #8]
 801169e:	f003 0007 	and.w	r0, r3, #7
 80116a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80116a6:	ecbd 8b02 	vpop	{d8}
 80116aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80116b0:	2b03      	cmp	r3, #3
 80116b2:	d1f3      	bne.n	801169c <__kernel_rem_pio2+0x4e4>
 80116b4:	9b05      	ldr	r3, [sp, #20]
 80116b6:	9500      	str	r5, [sp, #0]
 80116b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80116bc:	eb0d 0403 	add.w	r4, sp, r3
 80116c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80116c4:	46a2      	mov	sl, r4
 80116c6:	9b00      	ldr	r3, [sp, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80116ce:	dc69      	bgt.n	80117a4 <__kernel_rem_pio2+0x5ec>
 80116d0:	46aa      	mov	sl, r5
 80116d2:	f1ba 0f01 	cmp.w	sl, #1
 80116d6:	f1a4 0408 	sub.w	r4, r4, #8
 80116da:	f300 8083 	bgt.w	80117e4 <__kernel_rem_pio2+0x62c>
 80116de:	9c05      	ldr	r4, [sp, #20]
 80116e0:	ab48      	add	r3, sp, #288	; 0x120
 80116e2:	441c      	add	r4, r3
 80116e4:	2000      	movs	r0, #0
 80116e6:	2100      	movs	r1, #0
 80116e8:	2d01      	cmp	r5, #1
 80116ea:	f300 809a 	bgt.w	8011822 <__kernel_rem_pio2+0x66a>
 80116ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80116f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80116f6:	f1bb 0f00 	cmp.w	fp, #0
 80116fa:	f040 8098 	bne.w	801182e <__kernel_rem_pio2+0x676>
 80116fe:	9b04      	ldr	r3, [sp, #16]
 8011700:	e9c3 7800 	strd	r7, r8, [r3]
 8011704:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011708:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801170c:	e7c6      	b.n	801169c <__kernel_rem_pio2+0x4e4>
 801170e:	9e05      	ldr	r6, [sp, #20]
 8011710:	ab48      	add	r3, sp, #288	; 0x120
 8011712:	441e      	add	r6, r3
 8011714:	462c      	mov	r4, r5
 8011716:	2000      	movs	r0, #0
 8011718:	2100      	movs	r1, #0
 801171a:	2c00      	cmp	r4, #0
 801171c:	da33      	bge.n	8011786 <__kernel_rem_pio2+0x5ce>
 801171e:	f1bb 0f00 	cmp.w	fp, #0
 8011722:	d036      	beq.n	8011792 <__kernel_rem_pio2+0x5da>
 8011724:	4602      	mov	r2, r0
 8011726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801172a:	9c04      	ldr	r4, [sp, #16]
 801172c:	e9c4 2300 	strd	r2, r3, [r4]
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011738:	f7ee fdce 	bl	80002d8 <__aeabi_dsub>
 801173c:	ae4a      	add	r6, sp, #296	; 0x128
 801173e:	2401      	movs	r4, #1
 8011740:	42a5      	cmp	r5, r4
 8011742:	da29      	bge.n	8011798 <__kernel_rem_pio2+0x5e0>
 8011744:	f1bb 0f00 	cmp.w	fp, #0
 8011748:	d002      	beq.n	8011750 <__kernel_rem_pio2+0x598>
 801174a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801174e:	4619      	mov	r1, r3
 8011750:	9b04      	ldr	r3, [sp, #16]
 8011752:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011756:	e7a1      	b.n	801169c <__kernel_rem_pio2+0x4e4>
 8011758:	9c05      	ldr	r4, [sp, #20]
 801175a:	ab48      	add	r3, sp, #288	; 0x120
 801175c:	441c      	add	r4, r3
 801175e:	2000      	movs	r0, #0
 8011760:	2100      	movs	r1, #0
 8011762:	2d00      	cmp	r5, #0
 8011764:	da09      	bge.n	801177a <__kernel_rem_pio2+0x5c2>
 8011766:	f1bb 0f00 	cmp.w	fp, #0
 801176a:	d002      	beq.n	8011772 <__kernel_rem_pio2+0x5ba>
 801176c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011770:	4619      	mov	r1, r3
 8011772:	9b04      	ldr	r3, [sp, #16]
 8011774:	e9c3 0100 	strd	r0, r1, [r3]
 8011778:	e790      	b.n	801169c <__kernel_rem_pio2+0x4e4>
 801177a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801177e:	f7ee fdad 	bl	80002dc <__adddf3>
 8011782:	3d01      	subs	r5, #1
 8011784:	e7ed      	b.n	8011762 <__kernel_rem_pio2+0x5aa>
 8011786:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801178a:	f7ee fda7 	bl	80002dc <__adddf3>
 801178e:	3c01      	subs	r4, #1
 8011790:	e7c3      	b.n	801171a <__kernel_rem_pio2+0x562>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	e7c8      	b.n	801172a <__kernel_rem_pio2+0x572>
 8011798:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801179c:	f7ee fd9e 	bl	80002dc <__adddf3>
 80117a0:	3401      	adds	r4, #1
 80117a2:	e7cd      	b.n	8011740 <__kernel_rem_pio2+0x588>
 80117a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80117a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80117ac:	9b00      	ldr	r3, [sp, #0]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	4632      	mov	r2, r6
 80117b4:	463b      	mov	r3, r7
 80117b6:	4640      	mov	r0, r8
 80117b8:	4649      	mov	r1, r9
 80117ba:	f7ee fd8f 	bl	80002dc <__adddf3>
 80117be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4640      	mov	r0, r8
 80117c8:	4649      	mov	r1, r9
 80117ca:	f7ee fd85 	bl	80002d8 <__aeabi_dsub>
 80117ce:	4632      	mov	r2, r6
 80117d0:	463b      	mov	r3, r7
 80117d2:	f7ee fd83 	bl	80002dc <__adddf3>
 80117d6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80117da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80117de:	ed8a 7b00 	vstr	d7, [sl]
 80117e2:	e770      	b.n	80116c6 <__kernel_rem_pio2+0x50e>
 80117e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80117e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80117ec:	4640      	mov	r0, r8
 80117ee:	4632      	mov	r2, r6
 80117f0:	463b      	mov	r3, r7
 80117f2:	4649      	mov	r1, r9
 80117f4:	f7ee fd72 	bl	80002dc <__adddf3>
 80117f8:	e9cd 0100 	strd	r0, r1, [sp]
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4640      	mov	r0, r8
 8011802:	4649      	mov	r1, r9
 8011804:	f7ee fd68 	bl	80002d8 <__aeabi_dsub>
 8011808:	4632      	mov	r2, r6
 801180a:	463b      	mov	r3, r7
 801180c:	f7ee fd66 	bl	80002dc <__adddf3>
 8011810:	ed9d 7b00 	vldr	d7, [sp]
 8011814:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011818:	ed84 7b00 	vstr	d7, [r4]
 801181c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011820:	e757      	b.n	80116d2 <__kernel_rem_pio2+0x51a>
 8011822:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011826:	f7ee fd59 	bl	80002dc <__adddf3>
 801182a:	3d01      	subs	r5, #1
 801182c:	e75c      	b.n	80116e8 <__kernel_rem_pio2+0x530>
 801182e:	9b04      	ldr	r3, [sp, #16]
 8011830:	9a04      	ldr	r2, [sp, #16]
 8011832:	601f      	str	r7, [r3, #0]
 8011834:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011838:	605c      	str	r4, [r3, #4]
 801183a:	609d      	str	r5, [r3, #8]
 801183c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011840:	60d3      	str	r3, [r2, #12]
 8011842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011846:	6110      	str	r0, [r2, #16]
 8011848:	6153      	str	r3, [r2, #20]
 801184a:	e727      	b.n	801169c <__kernel_rem_pio2+0x4e4>
 801184c:	41700000 	.word	0x41700000
 8011850:	3e700000 	.word	0x3e700000
 8011854:	00000000 	.word	0x00000000

08011858 <scalbn>:
 8011858:	b570      	push	{r4, r5, r6, lr}
 801185a:	ec55 4b10 	vmov	r4, r5, d0
 801185e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011862:	4606      	mov	r6, r0
 8011864:	462b      	mov	r3, r5
 8011866:	b999      	cbnz	r1, 8011890 <scalbn+0x38>
 8011868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801186c:	4323      	orrs	r3, r4
 801186e:	d03f      	beq.n	80118f0 <scalbn+0x98>
 8011870:	4b35      	ldr	r3, [pc, #212]	; (8011948 <scalbn+0xf0>)
 8011872:	4629      	mov	r1, r5
 8011874:	ee10 0a10 	vmov	r0, s0
 8011878:	2200      	movs	r2, #0
 801187a:	f7ee fee5 	bl	8000648 <__aeabi_dmul>
 801187e:	4b33      	ldr	r3, [pc, #204]	; (801194c <scalbn+0xf4>)
 8011880:	429e      	cmp	r6, r3
 8011882:	4604      	mov	r4, r0
 8011884:	460d      	mov	r5, r1
 8011886:	da10      	bge.n	80118aa <scalbn+0x52>
 8011888:	a327      	add	r3, pc, #156	; (adr r3, 8011928 <scalbn+0xd0>)
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	e01f      	b.n	80118d0 <scalbn+0x78>
 8011890:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011894:	4291      	cmp	r1, r2
 8011896:	d10c      	bne.n	80118b2 <scalbn+0x5a>
 8011898:	ee10 2a10 	vmov	r2, s0
 801189c:	4620      	mov	r0, r4
 801189e:	4629      	mov	r1, r5
 80118a0:	f7ee fd1c 	bl	80002dc <__adddf3>
 80118a4:	4604      	mov	r4, r0
 80118a6:	460d      	mov	r5, r1
 80118a8:	e022      	b.n	80118f0 <scalbn+0x98>
 80118aa:	460b      	mov	r3, r1
 80118ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80118b0:	3936      	subs	r1, #54	; 0x36
 80118b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80118b6:	4296      	cmp	r6, r2
 80118b8:	dd0d      	ble.n	80118d6 <scalbn+0x7e>
 80118ba:	2d00      	cmp	r5, #0
 80118bc:	a11c      	add	r1, pc, #112	; (adr r1, 8011930 <scalbn+0xd8>)
 80118be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118c2:	da02      	bge.n	80118ca <scalbn+0x72>
 80118c4:	a11c      	add	r1, pc, #112	; (adr r1, 8011938 <scalbn+0xe0>)
 80118c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118ca:	a319      	add	r3, pc, #100	; (adr r3, 8011930 <scalbn+0xd8>)
 80118cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d0:	f7ee feba 	bl	8000648 <__aeabi_dmul>
 80118d4:	e7e6      	b.n	80118a4 <scalbn+0x4c>
 80118d6:	1872      	adds	r2, r6, r1
 80118d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80118dc:	428a      	cmp	r2, r1
 80118de:	dcec      	bgt.n	80118ba <scalbn+0x62>
 80118e0:	2a00      	cmp	r2, #0
 80118e2:	dd08      	ble.n	80118f6 <scalbn+0x9e>
 80118e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80118ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80118f0:	ec45 4b10 	vmov	d0, r4, r5
 80118f4:	bd70      	pop	{r4, r5, r6, pc}
 80118f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80118fa:	da08      	bge.n	801190e <scalbn+0xb6>
 80118fc:	2d00      	cmp	r5, #0
 80118fe:	a10a      	add	r1, pc, #40	; (adr r1, 8011928 <scalbn+0xd0>)
 8011900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011904:	dac0      	bge.n	8011888 <scalbn+0x30>
 8011906:	a10e      	add	r1, pc, #56	; (adr r1, 8011940 <scalbn+0xe8>)
 8011908:	e9d1 0100 	ldrd	r0, r1, [r1]
 801190c:	e7bc      	b.n	8011888 <scalbn+0x30>
 801190e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011912:	3236      	adds	r2, #54	; 0x36
 8011914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011918:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801191c:	4620      	mov	r0, r4
 801191e:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <scalbn+0xf8>)
 8011920:	2200      	movs	r2, #0
 8011922:	e7d5      	b.n	80118d0 <scalbn+0x78>
 8011924:	f3af 8000 	nop.w
 8011928:	c2f8f359 	.word	0xc2f8f359
 801192c:	01a56e1f 	.word	0x01a56e1f
 8011930:	8800759c 	.word	0x8800759c
 8011934:	7e37e43c 	.word	0x7e37e43c
 8011938:	8800759c 	.word	0x8800759c
 801193c:	fe37e43c 	.word	0xfe37e43c
 8011940:	c2f8f359 	.word	0xc2f8f359
 8011944:	81a56e1f 	.word	0x81a56e1f
 8011948:	43500000 	.word	0x43500000
 801194c:	ffff3cb0 	.word	0xffff3cb0
 8011950:	3c900000 	.word	0x3c900000
 8011954:	00000000 	.word	0x00000000

08011958 <floor>:
 8011958:	ec51 0b10 	vmov	r0, r1, d0
 801195c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011964:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011968:	2e13      	cmp	r6, #19
 801196a:	ee10 5a10 	vmov	r5, s0
 801196e:	ee10 8a10 	vmov	r8, s0
 8011972:	460c      	mov	r4, r1
 8011974:	dc31      	bgt.n	80119da <floor+0x82>
 8011976:	2e00      	cmp	r6, #0
 8011978:	da14      	bge.n	80119a4 <floor+0x4c>
 801197a:	a333      	add	r3, pc, #204	; (adr r3, 8011a48 <floor+0xf0>)
 801197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011980:	f7ee fcac 	bl	80002dc <__adddf3>
 8011984:	2200      	movs	r2, #0
 8011986:	2300      	movs	r3, #0
 8011988:	f7ef f8ee 	bl	8000b68 <__aeabi_dcmpgt>
 801198c:	b138      	cbz	r0, 801199e <floor+0x46>
 801198e:	2c00      	cmp	r4, #0
 8011990:	da53      	bge.n	8011a3a <floor+0xe2>
 8011992:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011996:	4325      	orrs	r5, r4
 8011998:	d052      	beq.n	8011a40 <floor+0xe8>
 801199a:	4c2d      	ldr	r4, [pc, #180]	; (8011a50 <floor+0xf8>)
 801199c:	2500      	movs	r5, #0
 801199e:	4621      	mov	r1, r4
 80119a0:	4628      	mov	r0, r5
 80119a2:	e024      	b.n	80119ee <floor+0x96>
 80119a4:	4f2b      	ldr	r7, [pc, #172]	; (8011a54 <floor+0xfc>)
 80119a6:	4137      	asrs	r7, r6
 80119a8:	ea01 0307 	and.w	r3, r1, r7
 80119ac:	4303      	orrs	r3, r0
 80119ae:	d01e      	beq.n	80119ee <floor+0x96>
 80119b0:	a325      	add	r3, pc, #148	; (adr r3, 8011a48 <floor+0xf0>)
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	f7ee fc91 	bl	80002dc <__adddf3>
 80119ba:	2200      	movs	r2, #0
 80119bc:	2300      	movs	r3, #0
 80119be:	f7ef f8d3 	bl	8000b68 <__aeabi_dcmpgt>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d0eb      	beq.n	801199e <floor+0x46>
 80119c6:	2c00      	cmp	r4, #0
 80119c8:	bfbe      	ittt	lt
 80119ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80119ce:	4133      	asrlt	r3, r6
 80119d0:	18e4      	addlt	r4, r4, r3
 80119d2:	ea24 0407 	bic.w	r4, r4, r7
 80119d6:	2500      	movs	r5, #0
 80119d8:	e7e1      	b.n	801199e <floor+0x46>
 80119da:	2e33      	cmp	r6, #51	; 0x33
 80119dc:	dd0b      	ble.n	80119f6 <floor+0x9e>
 80119de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80119e2:	d104      	bne.n	80119ee <floor+0x96>
 80119e4:	ee10 2a10 	vmov	r2, s0
 80119e8:	460b      	mov	r3, r1
 80119ea:	f7ee fc77 	bl	80002dc <__adddf3>
 80119ee:	ec41 0b10 	vmov	d0, r0, r1
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80119fa:	f04f 37ff 	mov.w	r7, #4294967295
 80119fe:	40df      	lsrs	r7, r3
 8011a00:	4238      	tst	r0, r7
 8011a02:	d0f4      	beq.n	80119ee <floor+0x96>
 8011a04:	a310      	add	r3, pc, #64	; (adr r3, 8011a48 <floor+0xf0>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	f7ee fc67 	bl	80002dc <__adddf3>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	2300      	movs	r3, #0
 8011a12:	f7ef f8a9 	bl	8000b68 <__aeabi_dcmpgt>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d0c1      	beq.n	801199e <floor+0x46>
 8011a1a:	2c00      	cmp	r4, #0
 8011a1c:	da0a      	bge.n	8011a34 <floor+0xdc>
 8011a1e:	2e14      	cmp	r6, #20
 8011a20:	d101      	bne.n	8011a26 <floor+0xce>
 8011a22:	3401      	adds	r4, #1
 8011a24:	e006      	b.n	8011a34 <floor+0xdc>
 8011a26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	40b3      	lsls	r3, r6
 8011a2e:	441d      	add	r5, r3
 8011a30:	45a8      	cmp	r8, r5
 8011a32:	d8f6      	bhi.n	8011a22 <floor+0xca>
 8011a34:	ea25 0507 	bic.w	r5, r5, r7
 8011a38:	e7b1      	b.n	801199e <floor+0x46>
 8011a3a:	2500      	movs	r5, #0
 8011a3c:	462c      	mov	r4, r5
 8011a3e:	e7ae      	b.n	801199e <floor+0x46>
 8011a40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011a44:	e7ab      	b.n	801199e <floor+0x46>
 8011a46:	bf00      	nop
 8011a48:	8800759c 	.word	0x8800759c
 8011a4c:	7e37e43c 	.word	0x7e37e43c
 8011a50:	bff00000 	.word	0xbff00000
 8011a54:	000fffff 	.word	0x000fffff

08011a58 <_init>:
 8011a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5a:	bf00      	nop
 8011a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a5e:	bc08      	pop	{r3}
 8011a60:	469e      	mov	lr, r3
 8011a62:	4770      	bx	lr

08011a64 <_fini>:
 8011a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a66:	bf00      	nop
 8011a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a6a:	bc08      	pop	{r3}
 8011a6c:	469e      	mov	lr, r3
 8011a6e:	4770      	bx	lr
